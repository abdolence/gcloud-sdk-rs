// This file is @generated by prost-build.
/// A Managed Lustre instance.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Instance {
    /// Identifier. The name of the instance.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Required. Immutable. The filesystem name for this instance. This name is
    /// used by client-side tools, including when mounting the instance. Must be
    /// eight characters or less and can only contain letters and numbers.
    #[prost(string, tag = "10")]
    pub filesystem: ::prost::alloc::string::String,
    /// Required. The storage capacity of the instance in gibibytes (GiB). Allowed
    /// values are from `18000` to `954000`, in increments of 9000.
    #[prost(int64, tag = "2")]
    pub capacity_gib: i64,
    /// Required. Immutable. The full name of the VPC network to which the instance
    /// is connected. Must be in the format
    /// `projects/{project_id}/global/networks/{network_name}`.
    #[prost(string, tag = "3")]
    pub network: ::prost::alloc::string::String,
    /// Output only. The state of the instance.
    #[prost(enumeration = "instance::State", tag = "4")]
    pub state: i32,
    /// Output only. Mount point of the instance in the format
    /// `IP_ADDRESS@tcp:/FILESYSTEM`.
    #[prost(string, tag = "5")]
    pub mount_point: ::prost::alloc::string::String,
    /// Output only. Timestamp when the instance was created.
    #[prost(message, optional, tag = "6")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. Timestamp when the instance was last updated.
    #[prost(message, optional, tag = "7")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Optional. A user-readable description of the instance.
    #[prost(string, tag = "8")]
    pub description: ::prost::alloc::string::String,
    /// Optional. Labels as key value pairs.
    #[prost(map = "string, string", tag = "9")]
    pub labels: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Required. The throughput of the instance in MB/s/TiB.
    /// Valid values are 125, 250, 500, 1000.
    #[prost(int64, tag = "11")]
    pub per_unit_storage_throughput: i64,
    /// Optional. Indicates whether you want to enable support for GKE clients. By
    /// default, GKE clients are not supported. Deprecated. No longer required for
    /// GKE instance creation.
    #[deprecated]
    #[prost(bool, tag = "12")]
    pub gke_support_enabled: bool,
}
/// Nested message and enum types in `Instance`.
pub mod instance {
    /// The possible states of an instance.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum State {
        /// Not set.
        Unspecified = 0,
        /// The instance is available for use.
        Active = 1,
        /// The instance is being created and is not yet ready for use.
        Creating = 2,
        /// The instance is being deleted.
        Deleting = 3,
        /// The instance is being upgraded.
        Upgrading = 4,
        /// The instance is being repaired.
        Repairing = 5,
        /// The instance is stopped.
        Stopped = 6,
        /// The instance is being updated.
        Updating = 7,
    }
    impl State {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "STATE_UNSPECIFIED",
                Self::Active => "ACTIVE",
                Self::Creating => "CREATING",
                Self::Deleting => "DELETING",
                Self::Upgrading => "UPGRADING",
                Self::Repairing => "REPAIRING",
                Self::Stopped => "STOPPED",
                Self::Updating => "UPDATING",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "STATE_UNSPECIFIED" => Some(Self::Unspecified),
                "ACTIVE" => Some(Self::Active),
                "CREATING" => Some(Self::Creating),
                "DELETING" => Some(Self::Deleting),
                "UPGRADING" => Some(Self::Upgrading),
                "REPAIRING" => Some(Self::Repairing),
                "STOPPED" => Some(Self::Stopped),
                "UPDATING" => Some(Self::Updating),
                _ => None,
            }
        }
    }
}
/// Message for requesting list of Instances
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListInstancesRequest {
    /// Required. The project and location for which to retrieve a list of
    /// instances, in the format `projects/{projectId}/locations/{location}`.
    ///
    /// To retrieve instance information for all locations, use "-" as the value
    /// of `{location}`.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Optional. Requested page size. Server might return fewer items than
    /// requested. If unspecified, the server will pick an appropriate default.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// Optional. A token identifying a page of results the server should return.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// Optional. Filtering results.
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
    /// Optional. Desired order of results.
    #[prost(string, tag = "5")]
    pub order_by: ::prost::alloc::string::String,
}
/// Message for response to listing Instances
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListInstancesResponse {
    /// Response from [ListInstances][google.cloud.lustre.v1.Lustre.ListInstances].
    #[prost(message, repeated, tag = "1")]
    pub instances: ::prost::alloc::vec::Vec<Instance>,
    /// A token identifying a page of results the server should return.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    /// Unordered list. Locations that could not be reached.
    #[prost(string, repeated, tag = "3")]
    pub unreachable: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Message for getting a Instance
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetInstanceRequest {
    /// Required. The instance resource name, in the format
    /// `projects/{projectId}/locations/{location}/instances/{instanceId}`.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Message for creating a Instance
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateInstanceRequest {
    /// Required. The instance's project and location, in the format
    /// `projects/{project}/locations/{location}`. Locations map to Google Cloud
    /// zones; for example, `us-west1-b`.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Required. The name of the Managed Lustre instance.
    ///
    /// * Must contain only lowercase letters, numbers, and hyphens.
    /// * Must start with a letter.
    /// * Must be between 1-63 characters.
    /// * Must end with a number or a letter.
    #[prost(string, tag = "2")]
    pub instance_id: ::prost::alloc::string::String,
    /// Required. The resource being created
    #[prost(message, optional, tag = "3")]
    pub instance: ::core::option::Option<Instance>,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "4")]
    pub request_id: ::prost::alloc::string::String,
}
/// Message for updating a Instance
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateInstanceRequest {
    /// Optional. Specifies the fields to be overwritten in the instance resource
    /// by the update.
    ///
    /// The fields specified in the update_mask are relative to the resource, not
    /// the full request. A field will be overwritten if it is in the mask. If no
    /// mask is provided then all fields present in the request are
    /// overwritten.
    #[prost(message, optional, tag = "1")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
    /// Required. The resource name of the instance to update, in the format
    /// `projects/{projectId}/locations/{location}/instances/{instanceId}`.
    #[prost(message, optional, tag = "2")]
    pub instance: ::core::option::Option<Instance>,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "3")]
    pub request_id: ::prost::alloc::string::String,
}
/// Message for deleting a Instance
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteInstanceRequest {
    /// Required. The resource name of the instance to delete, in the format
    /// `projects/{projectId}/locations/{location}/instances/{instanceId}`.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "2")]
    pub request_id: ::prost::alloc::string::String,
}
/// Represents the metadata of a long-running operation.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OperationMetadata {
    /// Output only. The time the operation was created.
    #[prost(message, optional, tag = "1")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. The time the operation finished running.
    #[prost(message, optional, tag = "2")]
    pub end_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. Server-defined resource path for the target of the operation.
    #[prost(string, tag = "3")]
    pub target: ::prost::alloc::string::String,
    /// Output only. Name of the verb executed by the operation.
    #[prost(string, tag = "4")]
    pub verb: ::prost::alloc::string::String,
    /// Output only. Human-readable status of the operation, if any.
    #[prost(string, tag = "5")]
    pub status_message: ::prost::alloc::string::String,
    /// Output only. Identifies whether the user has requested cancellation
    /// of the operation. Operations that have been cancelled successfully
    /// have [Operation.error][] value with a
    /// [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
    /// `Code.CANCELLED`.
    #[prost(bool, tag = "6")]
    pub requested_cancellation: bool,
    /// Output only. API version used to start the operation.
    #[prost(string, tag = "7")]
    pub api_version: ::prost::alloc::string::String,
}
/// Message for importing data to Lustre.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ImportDataRequest {
    /// Required. The name of the Managed Lustre instance in the format
    /// `projects/{project}/locations/{location}/instances/{instance}`.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Optional. UUID to identify requests.
    #[prost(string, tag = "4")]
    pub request_id: ::prost::alloc::string::String,
    /// Optional. User-specified service account used to perform the transfer.
    /// If unspecified, the default Managed Lustre service agent will be used.
    #[prost(string, tag = "5")]
    pub service_account: ::prost::alloc::string::String,
    /// A Cloud Storage URI of a folder to import file data from, in the
    /// form of `gs://<bucket_name>/<path_inside_bucket>/`.
    #[prost(oneof = "import_data_request::Source", tags = "2")]
    pub source: ::core::option::Option<import_data_request::Source>,
    /// The destination of the data transfer.
    #[prost(oneof = "import_data_request::Destination", tags = "3")]
    pub destination: ::core::option::Option<import_data_request::Destination>,
}
/// Nested message and enum types in `ImportDataRequest`.
pub mod import_data_request {
    /// A Cloud Storage URI of a folder to import file data from, in the
    /// form of `gs://<bucket_name>/<path_inside_bucket>/`.
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Source {
        /// The Cloud Storage source bucket and, optionally, path inside the bucket.
        /// If a path inside the bucket is specified, it must end with a forward
        /// slash (`/`).
        #[prost(message, tag = "2")]
        GcsPath(super::GcsPath),
    }
    /// The destination of the data transfer.
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Destination {
        /// Lustre path destination.
        #[prost(message, tag = "3")]
        LustrePath(super::LustrePath),
    }
}
/// Export data from Managed Lustre to a Cloud Storage bucket.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExportDataRequest {
    /// Required. The name of the Managed Lustre instance in the format
    /// `projects/{project}/locations/{location}/instances/{instance}`.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Optional. UUID to identify requests.
    #[prost(string, tag = "4")]
    pub request_id: ::prost::alloc::string::String,
    /// Optional. User-specified service account used to perform the transfer.
    /// If unspecified, the Managed Lustre service agent is used.
    #[prost(string, tag = "5")]
    pub service_account: ::prost::alloc::string::String,
    /// The source of the data transfer.
    #[prost(oneof = "export_data_request::Source", tags = "2")]
    pub source: ::core::option::Option<export_data_request::Source>,
    /// The destination of the data transfer.
    #[prost(oneof = "export_data_request::Destination", tags = "3")]
    pub destination: ::core::option::Option<export_data_request::Destination>,
}
/// Nested message and enum types in `ExportDataRequest`.
pub mod export_data_request {
    /// The source of the data transfer.
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Source {
        /// The root directory path to the Managed Lustre file system. Must start
        /// with `/`. Default is `/`.
        #[prost(message, tag = "2")]
        LustrePath(super::LustrePath),
    }
    /// The destination of the data transfer.
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Destination {
        /// The URI to a Cloud Storage bucket, or a path within a bucket, using
        /// the format `gs://<bucket_name>/<optional_path_inside_bucket>/`. If a
        /// path inside the bucket is specified, it must end with a forward slash
        /// (`/`).
        #[prost(message, tag = "3")]
        GcsPath(super::GcsPath),
    }
}
/// Response message for ExportData.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExportDataResponse {}
/// Response message for ImportData.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ImportDataResponse {}
/// Metadata of the export data operation.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExportDataMetadata {
    /// Data transfer operation metadata.
    #[prost(message, optional, tag = "1")]
    pub operation_metadata: ::core::option::Option<TransferOperationMetadata>,
    /// Output only. The time the operation was created.
    #[prost(message, optional, tag = "2")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. The time the operation finished running.
    #[prost(message, optional, tag = "3")]
    pub end_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. Server-defined resource path for the target of the operation.
    #[prost(string, tag = "4")]
    pub target: ::prost::alloc::string::String,
    /// Output only. Name of the verb executed by the operation.
    #[prost(string, tag = "5")]
    pub verb: ::prost::alloc::string::String,
    /// Output only. Human-readable status of the operation, if any.
    #[prost(string, tag = "6")]
    pub status_message: ::prost::alloc::string::String,
    /// Output only. Identifies whether the user has requested cancellation
    /// of the operation. Operations that have successfully been cancelled
    /// have
    /// [google.longrunning.Operation.error][google.longrunning.Operation.error]
    /// value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
    /// corresponding to `Code.CANCELLED`.
    #[prost(bool, tag = "7")]
    pub requested_cancellation: bool,
    /// Output only. API version used to start the operation.
    #[prost(string, tag = "8")]
    pub api_version: ::prost::alloc::string::String,
}
/// Metadata of the import data operation.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ImportDataMetadata {
    /// Data transfer operation metadata.
    #[prost(message, optional, tag = "1")]
    pub operation_metadata: ::core::option::Option<TransferOperationMetadata>,
    /// Output only. The time the operation was created.
    #[prost(message, optional, tag = "2")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. The time the operation finished running.
    #[prost(message, optional, tag = "3")]
    pub end_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. Server-defined resource path for the target of the operation.
    #[prost(string, tag = "4")]
    pub target: ::prost::alloc::string::String,
    /// Output only. Name of the verb executed by the operation.
    #[prost(string, tag = "6")]
    pub status_message: ::prost::alloc::string::String,
    /// Output only. Identifies whether the user has requested cancellation
    /// of the operation. Operations that have successfully been cancelled
    /// have
    /// [google.longrunning.Operation.error][google.longrunning.Operation.error]
    /// value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
    /// corresponding to `Code.CANCELLED`.
    #[prost(bool, tag = "7")]
    pub requested_cancellation: bool,
    /// Output only. API version used to start the operation.
    #[prost(string, tag = "8")]
    pub api_version: ::prost::alloc::string::String,
}
/// Specifies a Cloud Storage bucket and, optionally, a path inside the bucket.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GcsPath {
    /// Required. The URI to a Cloud Storage bucket, or a path within a bucket,
    /// using the format `gs://<bucket_name>/<optional_path_inside_bucket>/`. If a
    /// path inside the bucket is specified, it must end with a forward slash
    /// (`/`).
    #[prost(string, tag = "1")]
    pub uri: ::prost::alloc::string::String,
}
/// The root directory path to the Lustre file system.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LustrePath {
    /// Optional. The root directory path to the Managed Lustre file system. Must
    /// start with
    /// `/`. Default is `/`. If you're importing data into Managed Lustre, any
    /// path other than the default must already exist on the file system.
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
}
/// A collection of counters that report the progress of a transfer operation.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TransferCounters {
    /// Objects found in the data source that are scheduled to be transferred,
    /// excluding any that are filtered based on object conditions or skipped due
    /// to sync.
    #[prost(int64, tag = "1")]
    pub found_objects_count: i64,
    /// Total number of bytes found in the data source that are scheduled to be
    /// transferred, excluding any that are filtered based on object conditions or
    /// skipped due to sync.
    #[prost(int64, tag = "2")]
    pub bytes_found_count: i64,
    /// Objects in the data source that are not transferred because they already
    /// exist in the data destination.
    #[prost(int64, tag = "3")]
    pub objects_skipped_count: i64,
    /// Bytes in the data source that are not transferred because they already
    /// exist in the data destination.
    #[prost(int64, tag = "4")]
    pub bytes_skipped_count: i64,
    /// Objects that are copied to the data destination.
    #[prost(int64, tag = "5")]
    pub objects_copied_count: i64,
    /// Bytes that are copied to the data destination.
    #[prost(int64, tag = "6")]
    pub bytes_copied_count: i64,
    /// Output only. Objects that are failed to write to the data destination.
    #[prost(int64, tag = "7")]
    pub objects_failed_count: i64,
    /// Output only. Bytes that are failed to write to the data destination.
    #[prost(int64, tag = "8")]
    pub bytes_failed_count: i64,
}
/// An entry describing an error that has occurred.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ErrorLogEntry {
    /// Required. A URL that refers to the target (a data source, a data sink,
    /// or an object) with which the error is associated.
    #[prost(string, tag = "1")]
    pub uri: ::prost::alloc::string::String,
    /// A list of messages that carry the error details.
    #[prost(string, repeated, tag = "2")]
    pub error_details: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// A summary of errors by error code, plus a count and sample error log
/// entries.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ErrorSummary {
    /// Required.
    #[prost(enumeration = "super::super::super::rpc::Code", tag = "1")]
    pub error_code: i32,
    /// Required. Count of this type of error.
    #[prost(int64, tag = "2")]
    pub error_count: i64,
    /// Error samples.
    ///
    /// At most 5 error log entries are recorded for a given
    /// error code for a single transfer operation.
    #[prost(message, repeated, tag = "3")]
    pub error_log_entries: ::prost::alloc::vec::Vec<ErrorLogEntry>,
}
/// Represents the metadata of the long-running transfer operation.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransferOperationMetadata {
    /// Output only. The progress of the transfer operation.
    #[prost(message, optional, tag = "1")]
    pub counters: ::core::option::Option<TransferCounters>,
    /// Output only. The type of transfer occurring.
    #[prost(enumeration = "TransferType", tag = "2")]
    pub transfer_type: i32,
    /// Output only. Error summary about the transfer operation
    #[prost(message, repeated, tag = "7")]
    pub error_summaries: ::prost::alloc::vec::Vec<ErrorSummary>,
    /// The source of transfer operation.
    #[prost(oneof = "transfer_operation_metadata::Source", tags = "3, 4")]
    pub source: ::core::option::Option<transfer_operation_metadata::Source>,
    /// The destination of transfer operation.
    #[prost(oneof = "transfer_operation_metadata::Destination", tags = "5, 6")]
    pub destination: ::core::option::Option<transfer_operation_metadata::Destination>,
}
/// Nested message and enum types in `TransferOperationMetadata`.
pub mod transfer_operation_metadata {
    /// The source of transfer operation.
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Source {
        /// Output only. Lustre source.
        #[prost(message, tag = "3")]
        SourceLustrePath(super::LustrePath),
        /// Output only. Cloud Storage source.
        #[prost(message, tag = "4")]
        SourceGcsPath(super::GcsPath),
    }
    /// The destination of transfer operation.
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Destination {
        /// Output only. Cloud Storage destination.
        #[prost(message, tag = "5")]
        DestinationGcsPath(super::GcsPath),
        /// Output only. Lustre destination.
        #[prost(message, tag = "6")]
        DestinationLustrePath(super::LustrePath),
    }
}
/// Type of transfer that occurred.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TransferType {
    /// Zero is an illegal value.
    Unspecified = 0,
    /// Imports to Lustre.
    Import = 1,
    /// Exports from Lustre.
    Export = 2,
}
impl TransferType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "TRANSFER_TYPE_UNSPECIFIED",
            Self::Import => "IMPORT",
            Self::Export => "EXPORT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TRANSFER_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "IMPORT" => Some(Self::Import),
            "EXPORT" => Some(Self::Export),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod lustre_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Service describing handlers for resources
    #[derive(Debug, Clone)]
    pub struct LustreClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl LustreClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> LustreClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> LustreClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            LustreClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Lists instances in a given project and location.
        pub async fn list_instances(
            &mut self,
            request: impl tonic::IntoRequest<super::ListInstancesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListInstancesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.lustre.v1.Lustre/ListInstances",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("google.cloud.lustre.v1.Lustre", "ListInstances"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Gets details of a single instance.
        pub async fn get_instance(
            &mut self,
            request: impl tonic::IntoRequest<super::GetInstanceRequest>,
        ) -> std::result::Result<tonic::Response<super::Instance>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.lustre.v1.Lustre/GetInstance",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("google.cloud.lustre.v1.Lustre", "GetInstance"));
            self.inner.unary(req, path, codec).await
        }
        /// Creates a new instance in a given project and location.
        pub async fn create_instance(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateInstanceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.lustre.v1.Lustre/CreateInstance",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("google.cloud.lustre.v1.Lustre", "CreateInstance"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Updates the parameters of a single instance.
        pub async fn update_instance(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateInstanceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.lustre.v1.Lustre/UpdateInstance",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("google.cloud.lustre.v1.Lustre", "UpdateInstance"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Deletes a single instance.
        pub async fn delete_instance(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteInstanceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.lustre.v1.Lustre/DeleteInstance",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("google.cloud.lustre.v1.Lustre", "DeleteInstance"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Imports data from Cloud Storage to a Managed Lustre instance.
        pub async fn import_data(
            &mut self,
            request: impl tonic::IntoRequest<super::ImportDataRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.lustre.v1.Lustre/ImportData",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("google.cloud.lustre.v1.Lustre", "ImportData"));
            self.inner.unary(req, path, codec).await
        }
        /// Exports data from a Managed Lustre instance to Cloud Storage.
        pub async fn export_data(
            &mut self,
            request: impl tonic::IntoRequest<super::ExportDataRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.lustre.v1.Lustre/ExportData",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("google.cloud.lustre.v1.Lustre", "ExportData"));
            self.inner.unary(req, path, codec).await
        }
    }
}
