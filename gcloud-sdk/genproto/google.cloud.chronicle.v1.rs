// This file is @generated by prost-build.
/// Request message for CreateDataAccessLabel.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateDataAccessLabelRequest {
    /// Required. The parent resource where this Data Access Label will be created.
    /// Format: `projects/{project}/locations/{location}/instances/{instance}`
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Required. Data access label to create.
    #[prost(message, optional, tag = "2")]
    pub data_access_label: ::core::option::Option<DataAccessLabel>,
    /// Required. The ID to use for the data access label, which will become the
    /// label's display name and the final component of the label's resource name.
    /// The maximum number of characters should be 63. Regex pattern is as per AIP:
    /// <https://google.aip.dev/122#resource-id-segments>
    #[prost(string, tag = "3")]
    pub data_access_label_id: ::prost::alloc::string::String,
}
/// Request message to retrieve a data access label.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetDataAccessLabelRequest {
    /// Required. The ID of the data access label to retrieve.
    /// Format:
    /// `projects/{project}/locations/{location}/instances/{instance}/dataAccessLabels/{data_access_label}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Request message for ListDataAccessLabels.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListDataAccessLabelsRequest {
    /// Required. The parent resource where this data access label will be created.
    /// Format: `projects/{project}/locations/{location}/instances/{instance}`
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// The maximum number of data access labels to return. The service may return
    /// fewer than this value. If unspecified, at most 100 data access labels will
    /// be returned. The maximum value is 1000; values above 1000 will be coerced
    /// to 1000.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// A page token, received from a previous `ListDataAccessLabelsRequest` call.
    /// Provide this to retrieve the subsequent page.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// Optional. A filter which should follow the guidelines of AIP-160.
    /// Supports filtering on all fieds of DataAccessLabel and all operations as
    /// mentioned in <https://google.aip.dev/160.>
    /// example filter: "create_time greater than \"2023-04-21T11:30:00-04:00\" OR
    /// display_name:\"-21-1\"".
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
}
/// Response message for ListDataAccessLabels.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListDataAccessLabelsResponse {
    /// List of data access labels.
    #[prost(message, repeated, tag = "1")]
    pub data_access_labels: ::prost::alloc::vec::Vec<DataAccessLabel>,
    /// A token, which can be sent as `page_token` to retrieve the next page.
    /// If this field is omitted, there are no subsequent pages.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
/// Request message for UpdateDataAccessLabel method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateDataAccessLabelRequest {
    /// Required. The data access label to update.
    ///
    /// The label's `name` field is used to identify the label to update.
    /// Format:
    /// `projects/{project}/locations/{location}/instances/{instance}/dataAccessLabels/{data_access_label}`
    #[prost(message, optional, tag = "1")]
    pub data_access_label: ::core::option::Option<DataAccessLabel>,
    /// The list of fields to update. If not included, all fields with a non-empty
    /// value will be overwritten. Currently, only the description and definition
    /// fields are supported for update; an update call that attempts to update any
    /// other fields will return INVALID_ARGUMENT.
    #[prost(message, optional, tag = "2")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
}
/// Request message to delete a data access label.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteDataAccessLabelRequest {
    /// Required. The ID of the data access label to delete.
    /// Format:
    /// `projects/{project}/locations/{location}/instances/{instance}/dataAccessLabels/{data_access_label}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Request message for CreateDataAccessScope.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateDataAccessScopeRequest {
    /// Required. The parent resource where this Data Access Scope will be created.
    /// Format: `projects/{project}/locations/{location}/instances/{instance}`
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Required. Data access scope to create.
    #[prost(message, optional, tag = "2")]
    pub data_access_scope: ::core::option::Option<DataAccessScope>,
    /// Required. The user provided scope id which will become the last part of the
    /// name of the scope resource. Needs to be compliant with
    /// <https://google.aip.dev/122>
    #[prost(string, tag = "3")]
    pub data_access_scope_id: ::prost::alloc::string::String,
}
/// Request message to retrieve a data access scope.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetDataAccessScopeRequest {
    /// Required. The ID of the data access scope to retrieve.
    /// Format:
    /// `projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{data_access_scope}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Request message for ListDataAccessScopes.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListDataAccessScopesRequest {
    /// Required. The parent resource where this data access scope will be created.
    /// Format: `projects/{project}/locations/{location}/instances/{instance}`
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// The maximum number of data access scopes to return. The service may return
    /// fewer than this value. If unspecified, at most 100 data access scopes will
    /// be returned. The maximum value is 1000; values above 1000 will be coerced
    /// to 1000.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// A page token, received from a previous `ListDataAccessScopesRequest` call.
    /// Provide this to retrieve the subsequent page.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// Optional. A filter which should follow the guidelines of AIP-160.
    /// Supports filtering on all fieds of DataAccessScope and all operations as
    /// mentioned in <https://google.aip.dev/160.>
    /// example filter: "create_time greater than \"2023-04-21T11:30:00-04:00\" OR
    /// display_name:\"-21-1\"".
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
}
/// Response message for ListDataAccessScopes.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListDataAccessScopesResponse {
    /// List of data access scopes.
    #[prost(message, repeated, tag = "1")]
    pub data_access_scopes: ::prost::alloc::vec::Vec<DataAccessScope>,
    /// Whether or not global scope is granted to the user.
    #[prost(bool, optional, tag = "3")]
    pub global_data_access_scope_granted: ::core::option::Option<bool>,
    /// A token, which can be sent as `page_token` to retrieve the next page.
    /// If this field is omitted, there are no subsequent pages.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
/// Request message for UpdateDataAccessScope method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateDataAccessScopeRequest {
    /// Required. The data access scope to update.
    ///
    /// The scope's `name` field is used to identify the scope to update.
    /// Format:
    /// `projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{data_access_scope}`
    #[prost(message, optional, tag = "1")]
    pub data_access_scope: ::core::option::Option<DataAccessScope>,
    /// The list of fields to update. If not included, all fields with a non-empty
    /// value will be overwritten. Currently, only the description, the allowed
    /// and denied labels list fields are supported for update;
    /// an update call that attempts to update any
    /// other fields will return INVALID_ARGUMENT.
    #[prost(message, optional, tag = "2")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
}
/// Request message to delete a data access scope.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteDataAccessScopeRequest {
    /// Required. The ID of the data access scope to delete.
    /// Format:
    /// `projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{data_access_scope}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// A DataAccessLabel is a label on events to define user access to data.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DataAccessLabel {
    /// Required. The unique resource name of the data access label.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Output only. The short name displayed for the label as it appears on event
    /// data.
    #[prost(string, tag = "8")]
    pub display_name: ::prost::alloc::string::String,
    /// Output only. The time at which the data access label was created.
    #[prost(message, optional, tag = "4")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. The time at which the data access label was last updated.
    #[prost(message, optional, tag = "5")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. The user who created the data access label.
    #[prost(string, tag = "6")]
    pub author: ::prost::alloc::string::String,
    /// Output only. The user who last updated the data access label.
    #[prost(string, tag = "7")]
    pub last_editor: ::prost::alloc::string::String,
    /// Optional. A description of the data access label for a human reader.
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    /// Required.
    /// The definition of the data access label that determines which
    /// data gets tagged with this label.
    #[prost(oneof = "data_access_label::Definition", tags = "3")]
    pub definition: ::core::option::Option<data_access_label::Definition>,
}
/// Nested message and enum types in `DataAccessLabel`.
pub mod data_access_label {
    /// Required.
    /// The definition of the data access label that determines which
    /// data gets tagged with this label.
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Definition {
        /// A UDM query over event data.
        #[prost(string, tag = "3")]
        UdmQuery(::prost::alloc::string::String),
    }
}
/// A DataAccessScope is a boolean expression of data access labels used
/// to restrict access to data for users.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DataAccessScope {
    /// Required. The unique full name of the data access scope.
    /// The name should comply with <https://google.aip.dev/122> standards.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Optional. The allowed labels for the scope.
    /// Either allow_all or allowed_data_access_labels needs to be provided.
    /// When provided, there has to be at least one label allowed for the scope to
    /// be valid.
    /// The logical operator for evaluation of the allowed labels is OR.
    /// E.g.: A customer with scope with allowed labels A and B will be able
    /// to see data with labeled with A or B or (A and B).
    #[prost(message, repeated, tag = "2")]
    pub allowed_data_access_labels: ::prost::alloc::vec::Vec<DataAccessLabelReference>,
    /// Optional. The denied labels for the scope.
    /// The logical operator for evaluation of the denied labels is AND.
    /// E.g.: A customer with scope with denied labels A and B won't be able
    /// to see data labeled with A and data labeled with B
    /// and data with labels A and B.
    #[prost(message, repeated, tag = "3")]
    pub denied_data_access_labels: ::prost::alloc::vec::Vec<DataAccessLabelReference>,
    /// Output only. The name to be used for display to customers of the data
    /// access scope.
    #[prost(string, tag = "4")]
    pub display_name: ::prost::alloc::string::String,
    /// Output only. The time at which the data access scope was created.
    #[prost(message, optional, tag = "5")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. The time at which the data access scope was last updated.
    #[prost(message, optional, tag = "6")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. The user who created the data access scope.
    #[prost(string, tag = "7")]
    pub author: ::prost::alloc::string::String,
    /// Output only. The user who last updated the data access scope.
    #[prost(string, tag = "8")]
    pub last_editor: ::prost::alloc::string::String,
    /// Optional. A description of the data access scope for a human reader.
    #[prost(string, tag = "9")]
    pub description: ::prost::alloc::string::String,
    /// Optional. Whether or not the scope allows all labels, allow_all and
    /// allowed_data_access_labels are mutually exclusive and one of them must be
    /// present. denied_data_access_labels can still be used along with allow_all.
    /// When combined with denied_data_access_labels, access will be granted to all
    /// data that doesn't have labels mentioned in denied_data_access_labels. E.g.:
    /// A customer with scope with denied labels A and B and allow_all will be able
    /// to see all data except data labeled with A and data labeled with B and data
    /// with labels A and B.
    #[prost(bool, tag = "10")]
    pub allow_all: bool,
}
/// Reference object to a data access label.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DataAccessLabelReference {
    /// Output only. The display name of the label.
    /// Data access label and log types's name
    /// will match the display name of the resource.
    /// The asset namespace will match the namespace itself.
    /// The ingestion key value pair will match the key of the tuple.
    #[prost(string, tag = "5")]
    pub display_name: ::prost::alloc::string::String,
    /// The unique identifier for the label.
    #[prost(oneof = "data_access_label_reference::Label", tags = "1, 2, 3, 4")]
    pub label: ::core::option::Option<data_access_label_reference::Label>,
}
/// Nested message and enum types in `DataAccessLabelReference`.
pub mod data_access_label_reference {
    /// The unique identifier for the label.
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Label {
        /// The name of the data access label.
        #[prost(string, tag = "1")]
        DataAccessLabel(::prost::alloc::string::String),
        /// The name of the log type.
        #[prost(string, tag = "2")]
        LogType(::prost::alloc::string::String),
        /// The asset namespace configured in the forwarder
        /// of the customer's events.
        #[prost(string, tag = "3")]
        AssetNamespace(::prost::alloc::string::String),
        /// The ingestion label configured in the forwarder of the customer's events.
        #[prost(message, tag = "4")]
        IngestionLabel(super::IngestionLabel),
    }
}
/// Representation of an ingestion label type.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IngestionLabel {
    /// Required. The key of the ingestion label. Always required.
    #[prost(string, tag = "1")]
    pub ingestion_label_key: ::prost::alloc::string::String,
    /// Optional. The value of the ingestion label. Optional. An object
    /// with no provided value and some key provided would match
    /// against the given key and ANY value.
    #[prost(string, tag = "2")]
    pub ingestion_label_value: ::prost::alloc::string::String,
}
/// Generated client implementations.
pub mod data_access_control_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// DataAccessControlService exposes resources and endpoints related to data
    /// access control.
    #[derive(Debug, Clone)]
    pub struct DataAccessControlServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl DataAccessControlServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> DataAccessControlServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> DataAccessControlServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            DataAccessControlServiceClient::new(
                InterceptedService::new(inner, interceptor),
            )
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Creates a data access label.
        /// Data access labels are applied to incoming event data and selected in data
        /// access scopes (another resource), and only users with scopes containing the
        /// label can see data with that label. Currently, the data access label
        /// resource only includes custom labels, which are labels that correspond
        /// to UDM queries over event data.
        pub async fn create_data_access_label(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateDataAccessLabelRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DataAccessLabel>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.chronicle.v1.DataAccessControlService/CreateDataAccessLabel",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.chronicle.v1.DataAccessControlService",
                        "CreateDataAccessLabel",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Gets a data access label.
        pub async fn get_data_access_label(
            &mut self,
            request: impl tonic::IntoRequest<super::GetDataAccessLabelRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DataAccessLabel>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.chronicle.v1.DataAccessControlService/GetDataAccessLabel",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.chronicle.v1.DataAccessControlService",
                        "GetDataAccessLabel",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Lists all data access labels for the customer.
        pub async fn list_data_access_labels(
            &mut self,
            request: impl tonic::IntoRequest<super::ListDataAccessLabelsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListDataAccessLabelsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.chronicle.v1.DataAccessControlService/ListDataAccessLabels",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.chronicle.v1.DataAccessControlService",
                        "ListDataAccessLabels",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Updates a data access label.
        pub async fn update_data_access_label(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateDataAccessLabelRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DataAccessLabel>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.chronicle.v1.DataAccessControlService/UpdateDataAccessLabel",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.chronicle.v1.DataAccessControlService",
                        "UpdateDataAccessLabel",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Deletes a data access label. When a label is deleted, new
        /// data that enters in the system will not receive the label, but the label
        /// will not be removed from old data that still refers to it.
        pub async fn delete_data_access_label(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteDataAccessLabelRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.chronicle.v1.DataAccessControlService/DeleteDataAccessLabel",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.chronicle.v1.DataAccessControlService",
                        "DeleteDataAccessLabel",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Creates a data access scope.
        /// Data access scope is a combination of allowed and denied labels attached
        /// to a permission group. If a scope has allowed labels A and B and denied
        /// labels C and D, then the group of people attached to the scope
        /// will have permissions to see all events labeled with A or B (or both) and
        /// not labeled with either C or D.
        pub async fn create_data_access_scope(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateDataAccessScopeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DataAccessScope>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.chronicle.v1.DataAccessControlService/CreateDataAccessScope",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.chronicle.v1.DataAccessControlService",
                        "CreateDataAccessScope",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Retrieves an existing data access scope.
        pub async fn get_data_access_scope(
            &mut self,
            request: impl tonic::IntoRequest<super::GetDataAccessScopeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DataAccessScope>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.chronicle.v1.DataAccessControlService/GetDataAccessScope",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.chronicle.v1.DataAccessControlService",
                        "GetDataAccessScope",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Lists all existing data access scopes for the customer.
        pub async fn list_data_access_scopes(
            &mut self,
            request: impl tonic::IntoRequest<super::ListDataAccessScopesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListDataAccessScopesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.chronicle.v1.DataAccessControlService/ListDataAccessScopes",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.chronicle.v1.DataAccessControlService",
                        "ListDataAccessScopes",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Updates a data access scope.
        pub async fn update_data_access_scope(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateDataAccessScopeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DataAccessScope>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.chronicle.v1.DataAccessControlService/UpdateDataAccessScope",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.chronicle.v1.DataAccessControlService",
                        "UpdateDataAccessScope",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Deletes a data access scope.
        pub async fn delete_data_access_scope(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteDataAccessScopeRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.chronicle.v1.DataAccessControlService/DeleteDataAccessScope",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.chronicle.v1.DataAccessControlService",
                        "DeleteDataAccessScope",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// A watchlist is a list of entities that allows for bulk operations over the
/// included entities.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Watchlist {
    /// Identifier. Resource name of the watchlist.
    /// Format:
    /// `projects/{project}/locations/{location}/instances/{instance}/watchlists/{watchlist}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Required. Display name of the watchlist.
    /// Note that it must be at least one character and less than 63 characters
    /// (<https://google.aip.dev/148>).
    #[prost(string, tag = "2")]
    pub display_name: ::prost::alloc::string::String,
    /// Optional. Description of the watchlist.
    #[prost(string, tag = "3")]
    pub description: ::prost::alloc::string::String,
    /// Optional. Weight applied to the risk_score for entities
    /// in this watchlist.
    /// The default is 1.0 if it is not specified.
    #[prost(float, tag = "5")]
    pub multiplying_factor: f32,
    /// Required. Mechanism to populate entities in the watchlist.
    #[prost(message, optional, tag = "6")]
    pub entity_population_mechanism: ::core::option::Option<
        watchlist::EntityPopulationMechanism,
    >,
    /// Output only. Entity count in the watchlist.
    #[prost(message, optional, tag = "7")]
    pub entity_count: ::core::option::Option<watchlist::EntityCount>,
    /// Output only. Time the watchlist was created.
    #[prost(message, optional, tag = "8")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. Time the watchlist was last updated.
    #[prost(message, optional, tag = "9")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Optional. User preferences for watchlist configuration.
    #[prost(message, optional, tag = "10")]
    pub watchlist_user_preferences: ::core::option::Option<WatchlistUserPreferences>,
}
/// Nested message and enum types in `Watchlist`.
pub mod watchlist {
    /// Mechanism to populate entities in the watchlist.
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct EntityPopulationMechanism {
        /// Ways to populate entities in watchlist.
        /// Currently, only manual is supported.
        #[prost(oneof = "entity_population_mechanism::Mechanism", tags = "1")]
        pub mechanism: ::core::option::Option<entity_population_mechanism::Mechanism>,
    }
    /// Nested message and enum types in `EntityPopulationMechanism`.
    pub mod entity_population_mechanism {
        /// Entities are added manually.
        #[derive(Clone, Copy, PartialEq, ::prost::Message)]
        pub struct Manual {}
        /// Ways to populate entities in watchlist.
        /// Currently, only manual is supported.
        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
        pub enum Mechanism {
            /// Optional. Entities are added manually.
            #[prost(message, tag = "1")]
            Manual(Manual),
        }
    }
    /// Count of different types of entities in the watchlist.
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct EntityCount {
        /// Output only. Count of user type entities in the watchlist.
        #[prost(int32, tag = "1")]
        pub user: i32,
        /// Output only. Count of asset type entities in the watchlist.
        #[prost(int32, tag = "2")]
        pub asset: i32,
    }
}
/// A collection of user preferences for watchlist UI configuration.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WatchlistUserPreferences {
    /// Optional. Whether the watchlist is pinned on the dashboard.
    #[prost(bool, tag = "1")]
    pub pinned: bool,
}
/// Request message for getting a watchlist.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetWatchlistRequest {
    /// Required. The parent, which owns this collection of watchlists.
    /// The name of the watchlist to retrieve.
    /// Format:
    /// `projects/{project}/locations/{location}/instances/{instance}/watchlists/{watchlist}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Request message for listing watchlists.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListWatchlistsRequest {
    /// Required. The parent, which owns this collection of watchlists.
    /// Format: `projects/{project}/locations/{location}/instances/{instance}`
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Optional. The maximum number of watchlists to return.
    /// The service may return fewer than this value.
    /// If unspecified, at most 200 watchlists will be returned.
    /// The maximum value is 200; values above 200 will be coerced to 200.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// Optional. A page token, received from a previous `ListWatchlists` call.
    /// Provide this to retrieve the subsequent page.
    ///
    /// When paginating, all other parameters provided to
    /// `ListWatchlists` must match the call that provided the page
    /// token.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// Optional. Which watchlist to return in aip.dev/160 form.
    /// Currently, only the following filters are supported:
    /// - `watchlist_user_preferences.pinned=true`
    /// - `has_entity(\[ENTITY_INDICATOR\],[ENTITY_TYPE])`
    /// - `has_entity(\[ENTITY_INDICATOR\],[ENTITY_TYPE],\[NAMESPACE\])`
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
}
/// Response message for listing watchlists.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListWatchlistsResponse {
    /// Optional. The watchlists from the specified instance.
    #[prost(message, repeated, tag = "1")]
    pub watchlists: ::prost::alloc::vec::Vec<Watchlist>,
    /// Optional. A token, which can be sent as `page_token` to retrieve the next
    /// page. If this field is omitted, there are no subsequent pages.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
/// Request message for creating watchlist.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateWatchlistRequest {
    /// Required. The parent resource where this watchlist will be created.
    /// Format: `projects/{project}/locations/{location}/instances/{instance}`
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Optional. The ID to use for the watchlist,
    /// which will become the final component of the watchlist's resource name.
    ///
    /// This value should be 4-63 characters, and valid characters
    /// are /[a-z][0-9]-/.
    #[prost(string, tag = "2")]
    pub watchlist_id: ::prost::alloc::string::String,
    /// Required. The watchlist to create.
    #[prost(message, optional, tag = "3")]
    pub watchlist: ::core::option::Option<Watchlist>,
}
/// Request message for updating watchlist.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateWatchlistRequest {
    /// Required. The watchlist to update.
    ///
    /// The watchlist's `name` field is used to identify the watchlist to update.
    /// Format:
    /// `projects/{project}/locations/{location}/instances/{instance}/watchlists/{watchlist}`
    #[prost(message, optional, tag = "1")]
    pub watchlist: ::core::option::Option<Watchlist>,
    /// Optional. The list of fields to update.
    #[prost(message, optional, tag = "2")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
}
/// Request message for deleting watchlist.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteWatchlistRequest {
    /// Required. The name of the watchlist to delete.
    /// Format:
    /// `projects/{project}/locations/{location}/instances/{instance}/watchlists/{watchlist}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Optional. If set to true, any entities under this watchlist will also be
    /// deleted. (Otherwise, the request will only work if the watchlist has no
    /// entities.)
    #[prost(bool, tag = "2")]
    pub force: bool,
}
/// Generated client implementations.
pub mod entity_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// EntityService contains apis for finding entities.
    #[derive(Debug, Clone)]
    pub struct EntityServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl EntityServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> EntityServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> EntityServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            EntityServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Gets watchlist details for the given watchlist ID.
        pub async fn get_watchlist(
            &mut self,
            request: impl tonic::IntoRequest<super::GetWatchlistRequest>,
        ) -> std::result::Result<tonic::Response<super::Watchlist>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.chronicle.v1.EntityService/GetWatchlist",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.chronicle.v1.EntityService",
                        "GetWatchlist",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Lists all watchlists for the given instance.
        pub async fn list_watchlists(
            &mut self,
            request: impl tonic::IntoRequest<super::ListWatchlistsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListWatchlistsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.chronicle.v1.EntityService/ListWatchlists",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.chronicle.v1.EntityService",
                        "ListWatchlists",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Creates a watchlist for the given instance.
        /// Note that there can be at most 200 watchlists per instance.
        pub async fn create_watchlist(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateWatchlistRequest>,
        ) -> std::result::Result<tonic::Response<super::Watchlist>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.chronicle.v1.EntityService/CreateWatchlist",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.chronicle.v1.EntityService",
                        "CreateWatchlist",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Updates the watchlist for the given instance.
        pub async fn update_watchlist(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateWatchlistRequest>,
        ) -> std::result::Result<tonic::Response<super::Watchlist>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.chronicle.v1.EntityService/UpdateWatchlist",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.chronicle.v1.EntityService",
                        "UpdateWatchlist",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Deletes the watchlist for the given instance.
        pub async fn delete_watchlist(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteWatchlistRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.chronicle.v1.EntityService/DeleteWatchlist",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.chronicle.v1.EntityService",
                        "DeleteWatchlist",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// A Instance represents an instantiation of the Instance product.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Instance {
    /// Output only. The resource name of this instance.
    /// Format: `projects/{project}/locations/{location}/instances/{instance}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Request to get a Instance.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetInstanceRequest {
    /// Required. The name of the instance to retrieve.
    /// Format:
    /// `projects/{project_id}/locations/{location}/instances/{instance}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Generated client implementations.
pub mod instance_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// InstanceService provides the entry interface for the Chronicle API.
    #[derive(Debug, Clone)]
    pub struct InstanceServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl InstanceServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> InstanceServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InstanceServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            InstanceServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Gets a Instance.
        pub async fn get_instance(
            &mut self,
            request: impl tonic::IntoRequest<super::GetInstanceRequest>,
        ) -> std::result::Result<tonic::Response<super::Instance>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.chronicle.v1.InstanceService/GetInstance",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.chronicle.v1.InstanceService",
                        "GetInstance",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// ScopeInfo specifies the scope info of the reference list.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ScopeInfo {
    /// Required. The list of scope names of the reference list, if the list is
    /// empty the reference list is treated as unscoped.
    #[prost(message, optional, tag = "2")]
    pub reference_list_scope: ::core::option::Option<ReferenceListScope>,
}
/// ReferenceListScope specifies the list of scope names of the reference list.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReferenceListScope {
    /// Optional. The list of scope names of the reference list. The scope names
    /// should be full resource names and should be of the format:
    /// `projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{scope_name}`.
    #[prost(string, repeated, tag = "1")]
    pub scope_names: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// A request to get details about a reference list.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetReferenceListRequest {
    /// Required. The resource name of the reference list to retrieve.
    /// Format:
    /// `projects/{project}/locations/{locations}/instances/{instance}/referenceLists/{reference_list}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// How much of the ReferenceList to view. Defaults to
    /// REFERENCE_LIST_VIEW_FULL.
    #[prost(enumeration = "ReferenceListView", tag = "2")]
    pub view: i32,
}
/// A request for a list of reference lists.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListReferenceListsRequest {
    /// Required. The parent, which owns this collection of reference lists.
    /// Format:
    /// `projects/{project}/locations/{location}/instances/{instance}`
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// The maximum number of reference lists to return.
    /// The service may return fewer than this value.
    /// If unspecified, at most 100 reference lists will be returned.
    /// The maximum value is 1000; values above 1000 will be coerced to 1000.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// A page token, received from a previous `ListReferenceLists` call.
    /// Provide this to retrieve the subsequent page.
    /// When paginating, all other parameters provided to `ListReferenceLists` must
    /// match the call that provided the page token.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// How much of each ReferenceList to view. Defaults to
    /// REFERENCE_LIST_VIEW_BASIC.
    #[prost(enumeration = "ReferenceListView", tag = "4")]
    pub view: i32,
}
/// A response to a request for a list of reference lists.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListReferenceListsResponse {
    /// The reference lists.
    /// Ordered in ascending alphabetical order by name.
    #[prost(message, repeated, tag = "1")]
    pub reference_lists: ::prost::alloc::vec::Vec<ReferenceList>,
    /// A token, which can be sent as `page_token` to retrieve the next page.
    /// If this field is omitted, there are no subsequent pages.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
/// A request to create a reference list.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateReferenceListRequest {
    /// Required. The parent resource where this reference list will be created.
    /// Format: `projects/{project}/locations/{location}/instances/{instance}`
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Required. The reference list to create.
    #[prost(message, optional, tag = "2")]
    pub reference_list: ::core::option::Option<ReferenceList>,
    /// Required. The ID to use for the reference list. This is also the display
    /// name for the reference list. It must satisfy the following requirements:
    /// - Starts with letter.
    /// - Contains only letters, numbers and underscore.
    /// - Has length less than 256.
    /// - Must be unique.
    #[prost(string, tag = "3")]
    pub reference_list_id: ::prost::alloc::string::String,
}
/// A request to update a reference list.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateReferenceListRequest {
    /// Required. The reference list to update.
    ///
    /// The reference list's `name` field is used to identify the reference list to
    /// update.
    /// Format:
    /// `projects/{project}/locations/{locations}/instances/{instance}/referenceLists/{reference_list}`
    #[prost(message, optional, tag = "1")]
    pub reference_list: ::core::option::Option<ReferenceList>,
    /// The list of fields to update.
    /// When no field mask is supplied, all non-empty fields will be updated.
    /// A field mask of "*" will update all fields, whether empty or not.
    #[prost(message, optional, tag = "2")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
}
/// A reference list.
/// Reference lists are user-defined lists of values which users can
/// use in multiple Rules.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReferenceList {
    /// Output only. The resource name of the reference list.
    /// Format:
    /// `projects/{project}/locations/{location}/instances/{instance}/referenceLists/{reference_list}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Output only. The unique display name of the reference list.
    #[prost(string, tag = "2")]
    pub display_name: ::prost::alloc::string::String,
    /// Output only. The timestamp when the reference list was last updated.
    #[prost(message, optional, tag = "3")]
    pub revision_create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Required. A user-provided description of the reference list.
    #[prost(string, tag = "4")]
    pub description: ::prost::alloc::string::String,
    /// Required. The entries of the reference list.
    /// When listed, they are returned in the order that was specified at creation
    /// or update. The combined size of the values of the reference list may not
    /// exceed 6MB.
    /// This is returned only when the view is REFERENCE_LIST_VIEW_FULL.
    #[prost(message, repeated, tag = "5")]
    pub entries: ::prost::alloc::vec::Vec<ReferenceListEntry>,
    /// Output only. The resource names for the associated self-authored Rules that
    /// use this reference list. This is returned only when the view is
    /// REFERENCE_LIST_VIEW_FULL.
    #[prost(string, repeated, tag = "6")]
    pub rules: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Required. The syntax type indicating how list entries should be validated.
    #[prost(enumeration = "ReferenceListSyntaxType", tag = "8")]
    pub syntax_type: i32,
    /// Output only. The count of self-authored rules using the reference list.
    #[prost(int32, tag = "9")]
    pub rule_associations_count: i32,
    /// Output only. The scope info of the reference list.
    /// During reference list creation, if this field is not set, the reference
    /// list without scopes (an unscoped list) will be created for an unscoped
    /// user. For a scoped user, this field must be set. During reference list
    /// update, if scope_info is requested to be updated, this field must be set.
    #[prost(message, optional, tag = "11")]
    pub scope_info: ::core::option::Option<ScopeInfo>,
}
/// An entry in a reference list.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReferenceListEntry {
    /// Required. The value of the entry. Maximum length is 512 characters.
    #[prost(string, tag = "1")]
    pub value: ::prost::alloc::string::String,
}
/// The syntax type indicating how list entries should be validated.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ReferenceListSyntaxType {
    /// Defaults to REFERENCE_LIST_SYNTAX_TYPE_PLAIN_TEXT_STRING.
    Unspecified = 0,
    /// List contains plain text patterns.
    PlainTextString = 1,
    /// List contains only Regular Expression patterns.
    Regex = 2,
    /// List contains only CIDR patterns.
    Cidr = 3,
}
impl ReferenceListSyntaxType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "REFERENCE_LIST_SYNTAX_TYPE_UNSPECIFIED",
            Self::PlainTextString => "REFERENCE_LIST_SYNTAX_TYPE_PLAIN_TEXT_STRING",
            Self::Regex => "REFERENCE_LIST_SYNTAX_TYPE_REGEX",
            Self::Cidr => "REFERENCE_LIST_SYNTAX_TYPE_CIDR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "REFERENCE_LIST_SYNTAX_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "REFERENCE_LIST_SYNTAX_TYPE_PLAIN_TEXT_STRING" => Some(Self::PlainTextString),
            "REFERENCE_LIST_SYNTAX_TYPE_REGEX" => Some(Self::Regex),
            "REFERENCE_LIST_SYNTAX_TYPE_CIDR" => Some(Self::Cidr),
            _ => None,
        }
    }
}
/// ReferenceListView is a mechanism for viewing partial responses of the
/// ReferenceList resource.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ReferenceListView {
    /// The default / unset value.
    /// The API will default to the BASIC view for ListReferenceLists.
    /// The API will default to the FULL view for methods that return a single
    /// ReferenceList resource.
    Unspecified = 0,
    /// Include metadata about the ReferenceList.
    /// This is the default view for ListReferenceLists.
    Basic = 1,
    /// Include all details about the ReferenceList: metadata, content lines,
    /// associated rule counts. This is the default view for GetReferenceList.
    Full = 2,
}
impl ReferenceListView {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "REFERENCE_LIST_VIEW_UNSPECIFIED",
            Self::Basic => "REFERENCE_LIST_VIEW_BASIC",
            Self::Full => "REFERENCE_LIST_VIEW_FULL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "REFERENCE_LIST_VIEW_UNSPECIFIED" => Some(Self::Unspecified),
            "REFERENCE_LIST_VIEW_BASIC" => Some(Self::Basic),
            "REFERENCE_LIST_VIEW_FULL" => Some(Self::Full),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod reference_list_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// ReferenceListService provides an interface for managing reference lists.
    #[derive(Debug, Clone)]
    pub struct ReferenceListServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ReferenceListServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ReferenceListServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ReferenceListServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ReferenceListServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Gets a single reference list.
        pub async fn get_reference_list(
            &mut self,
            request: impl tonic::IntoRequest<super::GetReferenceListRequest>,
        ) -> std::result::Result<tonic::Response<super::ReferenceList>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.chronicle.v1.ReferenceListService/GetReferenceList",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.chronicle.v1.ReferenceListService",
                        "GetReferenceList",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Lists a collection of reference lists.
        pub async fn list_reference_lists(
            &mut self,
            request: impl tonic::IntoRequest<super::ListReferenceListsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListReferenceListsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.chronicle.v1.ReferenceListService/ListReferenceLists",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.chronicle.v1.ReferenceListService",
                        "ListReferenceLists",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Creates a new reference list.
        pub async fn create_reference_list(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateReferenceListRequest>,
        ) -> std::result::Result<tonic::Response<super::ReferenceList>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.chronicle.v1.ReferenceListService/CreateReferenceList",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.chronicle.v1.ReferenceListService",
                        "CreateReferenceList",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Updates an existing reference list.
        pub async fn update_reference_list(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateReferenceListRequest>,
        ) -> std::result::Result<tonic::Response<super::ReferenceList>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.chronicle.v1.ReferenceListService/UpdateReferenceList",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.chronicle.v1.ReferenceListService",
                        "UpdateReferenceList",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// The Rule resource represents a user-created rule.
/// NEXT TAG: 21
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Rule {
    /// Full resource name for the rule.
    /// Format:
    /// `projects/{project}/locations/{location}/instances/{instance}/rules/{rule}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Output only. The revision ID of the rule.
    /// A new revision is created whenever the rule text is changed in any way.
    /// Format: `v_{10 digits}_{9 digits}`
    /// Populated in REVISION_METADATA_ONLY view and FULL view.
    #[prost(string, tag = "2")]
    pub revision_id: ::prost::alloc::string::String,
    /// Output only. Display name of the rule.
    /// Populated in BASIC view and FULL view.
    #[prost(string, tag = "3")]
    pub display_name: ::prost::alloc::string::String,
    /// The YARA-L content of the rule.
    /// Populated in FULL view.
    #[prost(string, tag = "4")]
    pub text: ::prost::alloc::string::String,
    /// Output only. The author of the rule. Extracted from the meta section of
    /// text. Populated in BASIC view and FULL view.
    #[prost(string, tag = "5")]
    pub author: ::prost::alloc::string::String,
    /// Output only. The severity of the rule as specified in the meta section of
    /// text. Populated in BASIC view and FULL view.
    #[prost(message, optional, tag = "6")]
    pub severity: ::core::option::Option<Severity>,
    /// Output only. Additional metadata specified in the meta section of text.
    /// Populated in FULL view.
    #[prost(map = "string, string", tag = "7")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Output only. The timestamp of when the rule was created.
    /// Populated in FULL view.
    #[prost(message, optional, tag = "8")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. The timestamp of when the rule revision was created.
    /// Populated in FULL, REVISION_METADATA_ONLY views.
    #[prost(message, optional, tag = "9")]
    pub revision_create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. The current compilation state of the rule.
    /// Populated in FULL view.
    #[prost(enumeration = "rule::CompilationState", tag = "10")]
    pub compilation_state: i32,
    /// Output only. User-facing type of the rule. Extracted from the events
    /// section of rule text. Populated in BASIC view and FULL view.
    #[prost(enumeration = "RuleType", tag = "12")]
    pub r#type: i32,
    /// Output only. Resource names of the reference lists used in this rule.
    /// Populated in FULL view.
    #[prost(string, repeated, tag = "13")]
    pub reference_lists: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Output only. The run frequencies that are allowed for the rule.
    /// Populated in BASIC view and FULL view.
    #[prost(enumeration = "RunFrequency", repeated, packed = "false", tag = "14")]
    pub allowed_run_frequencies: ::prost::alloc::vec::Vec<i32>,
    /// The etag for this rule.
    /// If this is provided on update, the request will succeed if and only if it
    /// matches the server-computed value, and will fail with an ABORTED error
    /// otherwise.
    /// Populated in BASIC view and FULL view.
    #[prost(string, tag = "15")]
    pub etag: ::prost::alloc::string::String,
    /// Resource name of the DataAccessScope bound to this rule.
    /// Populated in BASIC view and FULL view.
    /// If reference lists are used in the rule, validations will be performed
    /// against this scope to ensure that the reference lists are compatible with
    /// both the user's and the rule's scopes.
    /// The scope should be in the format:
    /// `projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{scope}`.
    #[prost(string, tag = "16")]
    pub scope: ::prost::alloc::string::String,
    /// Output only. A list of a rule's corresponding compilation diagnostic
    /// messages such as compilation errors and compilation warnings. Populated in
    /// FULL view.
    #[prost(message, repeated, tag = "17")]
    pub compilation_diagnostics: ::prost::alloc::vec::Vec<CompilationDiagnostic>,
    /// Output only. Indicate the rule can run in near real time live rule.
    /// If this is true, the rule uses the near real time live rule when the run
    /// frequency is set to LIVE.
    #[prost(bool, tag = "18")]
    pub near_real_time_live_rule_eligible: bool,
    /// Output only. The set of inputs used in the rule. For example, if the rule
    /// uses $e.principal.hostname, then the uses_udm field will be true.
    #[prost(message, optional, tag = "20")]
    pub inputs_used: ::core::option::Option<InputsUsed>,
}
/// Nested message and enum types in `Rule`.
pub mod rule {
    /// The current compilation state of the rule.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum CompilationState {
        /// The compilation state is unspecified/unknown.
        Unspecified = 0,
        /// The Rule can successfully compile.
        Succeeded = 1,
        /// The Rule cannot successfully compile.
        /// This is possible if a backwards-incompatible change was made to the
        /// compiler.
        Failed = 2,
    }
    impl CompilationState {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "COMPILATION_STATE_UNSPECIFIED",
                Self::Succeeded => "SUCCEEDED",
                Self::Failed => "FAILED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "COMPILATION_STATE_UNSPECIFIED" => Some(Self::Unspecified),
                "SUCCEEDED" => Some(Self::Succeeded),
                "FAILED" => Some(Self::Failed),
                _ => None,
            }
        }
    }
}
/// The RuleDeployment resource represents the deployment state of a Rule.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RuleDeployment {
    /// Required. The resource name of the rule deployment.
    /// Note that RuleDeployment is a child of the overall Rule, not any individual
    /// revision, so the resource ID segment for the Rule resource must not
    /// reference a specific revision.
    /// Format:
    /// `projects/{project}/locations/{location}/instances/{instance}/rules/{rule}/deployment`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Whether the rule is currently deployed continuously against incoming data.
    #[prost(bool, tag = "2")]
    pub enabled: bool,
    /// Whether detections resulting from this deployment should be considered
    /// alerts.
    #[prost(bool, tag = "3")]
    pub alerting: bool,
    /// The archive state of the rule deployment.
    /// Cannot be set to true unless enabled is set to false.
    /// If set to true, alerting will automatically be set to false.
    /// If currently set to true, enabled, alerting, and run_frequency cannot be
    /// updated.
    #[prost(bool, tag = "4")]
    pub archived: bool,
    /// Output only. The timestamp when the rule deployment archive state was last
    /// set to true. If the rule deployment's current archive state is not set to
    /// true, the field will be empty.
    #[prost(message, optional, tag = "5")]
    pub archive_time: ::core::option::Option<::prost_types::Timestamp>,
    /// The run frequency of the rule deployment.
    #[prost(enumeration = "RunFrequency", tag = "6")]
    pub run_frequency: i32,
    /// Output only. The execution state of the rule deployment.
    #[prost(enumeration = "rule_deployment::ExecutionState", tag = "7")]
    pub execution_state: i32,
    /// Output only. The names of the associated/chained producer rules. Rules are
    /// considered producers for this rule if this rule explicitly filters on their
    /// ruleid. Format:
    /// `projects/{project}/locations/{location}/instances/{instance}/rules/{rule}`
    #[prost(string, repeated, tag = "8")]
    pub producer_rules: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Output only. The names of the associated/chained consumer rules. Rules are
    /// considered consumers of this rule if their rule text explicitly filters on
    /// this rule's ruleid. Format:
    /// `projects/{project}/locations/{location}/instances/{instance}/rules/{rule}`
    #[prost(string, repeated, tag = "9")]
    pub consumer_rules: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Output only. The timestamp when the rule deployment alert state was lastly
    /// changed. This is filled regardless of the current alert state. E.g. if the
    /// current alert status is false, this timestamp will be the timestamp when
    /// the alert status was changed to false.
    #[prost(message, optional, tag = "10")]
    pub last_alert_status_change_time: ::core::option::Option<::prost_types::Timestamp>,
}
/// Nested message and enum types in `RuleDeployment`.
pub mod rule_deployment {
    /// The possible execution states the rule deployment can be in.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum ExecutionState {
        /// Unspecified or unknown execution state.
        Unspecified = 0,
        /// Default execution state.
        Default = 1,
        /// Rules in limited state may not have their executions guaranteed.
        Limited = 2,
        /// Paused rules are not executed at all.
        Paused = 3,
    }
    impl ExecutionState {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "EXECUTION_STATE_UNSPECIFIED",
                Self::Default => "DEFAULT",
                Self::Limited => "LIMITED",
                Self::Paused => "PAUSED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "EXECUTION_STATE_UNSPECIFIED" => Some(Self::Unspecified),
                "DEFAULT" => Some(Self::Default),
                "LIMITED" => Some(Self::Limited),
                "PAUSED" => Some(Self::Paused),
                _ => None,
            }
        }
    }
}
/// Retrohunt is an execution of a Rule over a time range in the past.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Retrohunt {
    /// The resource name of the retrohunt.
    /// Retrohunt is the child of a rule revision. {rule} in the format below is
    /// structured as {rule_id@revision_id}.
    /// Format:
    /// `projects/{project}/locations/{location}/instances/{instance}/rules/{rule}/retrohunts/{retrohunt}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Required. The start and end time of the event time range this retrohunt
    /// processes.
    #[prost(message, optional, tag = "2")]
    pub process_interval: ::core::option::Option<super::super::super::r#type::Interval>,
    /// Output only. The start and end time of the retrohunt execution. If the
    /// retrohunt is not yet finished, the end time of the interval will not be
    /// populated.
    #[prost(message, optional, tag = "3")]
    pub execution_interval: ::core::option::Option<
        super::super::super::r#type::Interval,
    >,
    /// Output only. The state of the retrohunt.
    #[prost(enumeration = "retrohunt::State", tag = "4")]
    pub state: i32,
    /// Output only. Percent progress of the retrohunt towards completion, from
    /// 0.00 to 100.00.
    #[prost(float, tag = "5")]
    pub progress_percentage: f32,
}
/// Nested message and enum types in `Retrohunt`.
pub mod retrohunt {
    /// The possible states a retrohunt can be in.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum State {
        /// Unspecified or unknown retrohunt state.
        Unspecified = 0,
        /// Running state.
        Running = 1,
        /// Done state.
        Done = 2,
        /// Cancelled state.
        Cancelled = 3,
        /// Failed state.
        Failed = 4,
    }
    impl State {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "STATE_UNSPECIFIED",
                Self::Running => "RUNNING",
                Self::Done => "DONE",
                Self::Cancelled => "CANCELLED",
                Self::Failed => "FAILED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "STATE_UNSPECIFIED" => Some(Self::Unspecified),
                "RUNNING" => Some(Self::Running),
                "DONE" => Some(Self::Done),
                "CANCELLED" => Some(Self::Cancelled),
                "FAILED" => Some(Self::Failed),
                _ => None,
            }
        }
    }
}
/// Request message for CreateRule method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateRuleRequest {
    /// Required. The parent resource where this rule will be created.
    /// Format: `projects/{project}/locations/{location}/instances/{instance}`
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Required. The rule to create.
    #[prost(message, optional, tag = "2")]
    pub rule: ::core::option::Option<Rule>,
}
/// Request message for GetRule method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRuleRequest {
    /// Required. The name of the rule to retrieve.
    /// Format:
    /// `projects/{project}/locations/{location}/instances/{instance}/rules/{rule}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// The view field indicates the scope of fields to populate for the Rule being
    /// returned. If unspecified, defaults to FULL.
    #[prost(enumeration = "RuleView", tag = "2")]
    pub view: i32,
}
/// Request message for ListRules method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListRulesRequest {
    /// Required. The parent, which owns this collection of rules.
    /// Format:
    /// `projects/{project}/locations/{location}/instances/{instance}`
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// The maximum number of rules to return. The service may return fewer than
    /// this value. If unspecified, at most 100 rules will be returned. The
    /// maximum value is 1000; values above 1000 will be coerced to 1000.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// A page token, received from a previous `ListRules` call.
    /// Provide this to retrieve the subsequent page.
    ///
    /// When paginating, all other parameters provided to `ListRules`
    /// must match the call that provided the page token.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// view indicates the scope of fields to populate for the Rule being returned.
    /// If unspecified, defaults to BASIC.
    #[prost(enumeration = "RuleView", tag = "4")]
    pub view: i32,
    /// Only the following filters are allowed:
    /// "reference_lists:{reference_list_name}"
    /// "data_tables:{data_table_name}"
    /// "display_name:{display_name}"
    #[prost(string, tag = "5")]
    pub filter: ::prost::alloc::string::String,
}
/// Response message for ListRules method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListRulesResponse {
    /// The rules from the specified instance.
    #[prost(message, repeated, tag = "1")]
    pub rules: ::prost::alloc::vec::Vec<Rule>,
    /// A token, which can be sent as `page_token` to retrieve the next page.
    /// If this field is omitted, there are no subsequent pages.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
/// Request message for UpdateRule method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateRuleRequest {
    /// Required. The rule to update.
    ///
    /// The rule's `name` field is used to identify the rule to update.
    /// Format:
    /// `projects/{project}/locations/{location}/instances/{instance}/rules/{rule}`
    #[prost(message, optional, tag = "1")]
    pub rule: ::core::option::Option<Rule>,
    /// The list of fields to update. If not included, all fields with a non-empty
    /// value will be overwritten.
    #[prost(message, optional, tag = "2")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
}
/// Request message for the DeleteRule method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteRuleRequest {
    /// Required. The name of the rule to delete. A rule revision timestamp cannot
    /// be specified as part of the name, as deleting specific revisions is not
    /// supported.
    /// Format:
    /// `projects/{project}/locations/{location}/instances/{instance}/rules/{rule}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Optional. If set to true, any retrohunts and any detections associated with
    /// the rule will also be deleted. If set to false, the call will only succeed
    /// if the rule has no associated retrohunts, including completed retrohunts,
    /// and no associated detections. Regardless of this field's value, the rule
    /// deployment associated with this rule will also be deleted.
    #[prost(bool, tag = "2")]
    pub force: bool,
}
/// Request message for ListRuleRevisions method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListRuleRevisionsRequest {
    /// Required. The name of the rule to list revisions for.
    /// Format:
    /// `projects/{project}/locations/{location}/instances/{instance}/rules/{rule}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// The maximum number of revisions to return per page. The service may return
    /// fewer than this value. If unspecified, at most 100 revisions will be
    /// returned. The maximum value is 1000; values above 1000 will be coerced to
    /// 1000.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// The page token, received from a previous `ListRuleRevisions` call.
    /// Provide this to retrieve the subsequent page.
    ///
    /// When paginating, all other parameters provided to `ListRuleRevisions`
    /// must match the call that provided the page token.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// The view field indicates the scope of fields to populate for the revision
    /// being returned. If unspecified, defaults to BASIC.
    #[prost(enumeration = "RuleView", tag = "4")]
    pub view: i32,
}
/// Response message for ListRuleRevisions method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListRuleRevisionsResponse {
    /// The revisions of the rule.
    #[prost(message, repeated, tag = "1")]
    pub rules: ::prost::alloc::vec::Vec<Rule>,
    /// A token that can be sent as `page_token` to retrieve the next page.
    /// If this field is omitted, there are no subsequent pages.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
/// Request message for CreateRetrohunt method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateRetrohuntRequest {
    /// Required. The parent of retrohunt, which is a rule.
    /// Format:
    /// `projects/{project}/locations/{location}/instances/{instance}/rules/{rule}`
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Required. The retrohunt to create.
    #[prost(message, optional, tag = "2")]
    pub retrohunt: ::core::option::Option<Retrohunt>,
}
/// Request message for GetRetrohunt method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRetrohuntRequest {
    /// Required. The name of the retrohunt to retrieve.
    /// Format:
    /// `projects/{project}/locations/{location}/instances/{instance}/rules/{rule}/retrohunts/{retrohunt}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Request message for ListRetrohunts method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListRetrohuntsRequest {
    /// Required. The rule that the retrohunts belong to.
    /// Format:
    /// `projects/{project}/locations/{location}/instances/{instance}/rules/{rule}`
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// The maximum number of retrohunt to return. The service may return fewer
    /// than this value. If unspecified, at most 100 retrohunts will be returned.
    /// The maximum value is 1000; values above 1000 will be coerced to
    /// 1000.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// A page token, received from a previous `ListRetrohunts` call.
    /// Provide this to retrieve the subsequent page.
    ///
    /// When paginating, all other parameters provided to `ListRetrohunts` must
    /// match the call that provided the page token.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// A filter that can be used to retrieve specific rule deployments.
    /// The following fields are filterable:
    /// state
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
}
/// Response message for ListRetrohunts method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListRetrohuntsResponse {
    /// The retrohunts from the specified rule.
    #[prost(message, repeated, tag = "1")]
    pub retrohunts: ::prost::alloc::vec::Vec<Retrohunt>,
    /// A token, which can be sent as `page_token` to retrieve the next page.
    /// If this field is omitted, there are no subsequent pages.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
/// Request message for GetRuleDeployment.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRuleDeploymentRequest {
    /// Required. The name of the rule deployment to retrieve.
    /// Format:
    /// `projects/{project}/locations/{location}/instances/{instance}/rules/{rule}/deployment`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Request message for ListRuleDeployments.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListRuleDeploymentsRequest {
    /// Required. The collection of all parents which own all rule deployments. The
    /// "-" wildcard token must be used as the rule identifier in the resource
    /// path. Format:
    /// `projects/{project}/locations/{location}/instances/{instance}/rules/-`
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// The maximum number of rule deployments to return. The service may return
    /// fewer than this value. If unspecified, at most 100 rule deployments will be
    /// returned. The maximum value is 1000; values above 1000 will be coerced to
    /// 1000.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// A page token, received from a previous `ListRuleDeployments` call.
    /// Provide this to retrieve the subsequent page.
    ///
    /// When paginating, all other parameters provided to `ListRuleDeployments`
    /// must match the call that provided the page token.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// A filter that can be used to retrieve specific rule deployments.
    /// The following fields are filterable:
    /// archived, name
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
}
/// Response message for ListRuleDeployments.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListRuleDeploymentsResponse {
    /// The rule deployments from all rules.
    #[prost(message, repeated, tag = "1")]
    pub rule_deployments: ::prost::alloc::vec::Vec<RuleDeployment>,
    /// A token, which can be sent as `page_token` to retrieve the next page.
    /// If this field is omitted, there are no subsequent pages.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
/// Request message for UpdateRuleDeployment.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateRuleDeploymentRequest {
    /// Required. The rule deployment to update.
    ///
    /// The rule deployment's `name` field is used to identify the rule deployment
    /// to update. Format:
    /// `projects/{project}/locations/{location}/instances/{instance}/rules/{rule}/deployment`
    #[prost(message, optional, tag = "1")]
    pub rule_deployment: ::core::option::Option<RuleDeployment>,
    /// Required. The list of fields to update.
    #[prost(message, optional, tag = "2")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
}
/// CompilationPosition represents the location of a compilation diagnostic in
/// rule text.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CompilationPosition {
    /// Output only. Start line number, beginning at 1.
    #[prost(int32, tag = "1")]
    pub start_line: i32,
    /// Output only. Start column number, beginning at 1.
    #[prost(int32, tag = "2")]
    pub start_column: i32,
    /// Output only. End line number, beginning at 1.
    #[prost(int32, tag = "3")]
    pub end_line: i32,
    /// Output only. End column number, beginning at 1.
    #[prost(int32, tag = "4")]
    pub end_column: i32,
}
/// CompilationDiagnostic represents a compilation diagnostic generated
/// during a rule's compilation, such as a compilation error or a compilation
/// warning.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CompilationDiagnostic {
    /// Output only. The diagnostic message.
    #[prost(string, tag = "1")]
    pub message: ::prost::alloc::string::String,
    /// Output only. The approximate position in the rule text associated with the
    /// compilation diagnostic.
    /// Compilation Position may be empty.
    #[prost(message, optional, tag = "2")]
    pub position: ::core::option::Option<CompilationPosition>,
    /// Output only. The severity of a rule's compilation diagnostic.
    #[prost(enumeration = "compilation_diagnostic::Severity", tag = "3")]
    pub severity: i32,
    /// Output only. Link to documentation that describes a diagnostic in more
    /// detail.
    #[prost(string, tag = "5")]
    pub uri: ::prost::alloc::string::String,
}
/// Nested message and enum types in `CompilationDiagnostic`.
pub mod compilation_diagnostic {
    /// The severity level of the compilation diagnostic.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Severity {
        /// An unspecified severity level.
        Unspecified = 0,
        /// A compilation warning.
        Warning = 1,
        /// A compilation error.
        Error = 2,
    }
    impl Severity {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "SEVERITY_UNSPECIFIED",
                Self::Warning => "WARNING",
                Self::Error => "ERROR",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "SEVERITY_UNSPECIFIED" => Some(Self::Unspecified),
                "WARNING" => Some(Self::Warning),
                "ERROR" => Some(Self::Error),
                _ => None,
            }
        }
    }
}
/// Severity represents the severity level of the rule.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Severity {
    /// The display name of the severity level. Extracted from the meta section of
    /// the rule text.
    #[prost(string, tag = "1")]
    pub display_name: ::prost::alloc::string::String,
}
/// Operation Metadata for Retrohunts.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RetrohuntMetadata {
    /// The name of the retrohunt.
    /// Format:
    /// `projects/{project}/locations/{location}/instances/{instance}/rules/{rule}/retrohunts/{retrohunt}`
    #[prost(string, tag = "1")]
    pub retrohunt: ::prost::alloc::string::String,
    /// The start and end time of the retrohunt execution. If the retrohunt is not
    /// yet finished, the end time of the interval will not be filled.
    #[prost(message, optional, tag = "2")]
    pub execution_interval: ::core::option::Option<
        super::super::super::r#type::Interval,
    >,
    /// Percent progress of the retrohunt towards completion, from 0.00 to 100.00.
    #[prost(float, tag = "3")]
    pub progress_percentage: f32,
}
/// InputsUsed is a convenience field that tells us which sources
/// of events (if any) were used in the rule.
/// NEXT TAG: 4
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct InputsUsed {
    /// Optional. Whether the rule queries UDM events.
    #[prost(bool, tag = "1")]
    pub uses_udm: bool,
    /// Optional. Whether the rule queries entity events.
    #[prost(bool, tag = "2")]
    pub uses_entity: bool,
    /// Optional. Whether the rule queries detections.
    #[prost(bool, tag = "3")]
    pub uses_detection: bool,
}
/// RunFrequency indicates the run frequency at which a YARA-L 2 rule will run if
/// enabled.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RunFrequency {
    /// The run frequency is unspecified/unknown.
    Unspecified = 0,
    /// Executes in real time.
    Live = 1,
    /// Executes once per hour.
    Hourly = 2,
    /// Executes once per day.
    Daily = 3,
}
impl RunFrequency {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "RUN_FREQUENCY_UNSPECIFIED",
            Self::Live => "LIVE",
            Self::Hourly => "HOURLY",
            Self::Daily => "DAILY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RUN_FREQUENCY_UNSPECIFIED" => Some(Self::Unspecified),
            "LIVE" => Some(Self::Live),
            "HOURLY" => Some(Self::Hourly),
            "DAILY" => Some(Self::Daily),
            _ => None,
        }
    }
}
/// RuleType indicates the YARA-L rule type of user-created and Google Cloud
/// Threat Intelligence (GCTI) authored rules.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RuleType {
    /// The rule type is unspecified/unknown.
    Unspecified = 0,
    /// Rule checks for the existence of a single event.
    SingleEvent = 1,
    /// Rule checks for correlation between multiple events
    MultiEvent = 2,
}
impl RuleType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "RULE_TYPE_UNSPECIFIED",
            Self::SingleEvent => "SINGLE_EVENT",
            Self::MultiEvent => "MULTI_EVENT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RULE_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "SINGLE_EVENT" => Some(Self::SingleEvent),
            "MULTI_EVENT" => Some(Self::MultiEvent),
            _ => None,
        }
    }
}
/// RuleView indicates the scope of fields to populate when returning the Rule
/// resource.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RuleView {
    /// The default/unset value.
    /// The API will default to the BASIC view for ListRules/ListRuleRevisions.
    /// The API will default to the FULL view for GetRule.
    Unspecified = 0,
    /// Include basic metadata about the rule, but not the full contents.
    /// Returned fields include: revision_id, revision_create_time, display_name,
    /// author, severity, type, allowed_run_frequency,
    /// near_real_time_live_rule_eligible, etag, and scope.
    /// This is the default value for ListRules and ListRuleRevisions.
    Basic = 1,
    /// Include all fields.
    /// This is the default value for GetRule.
    Full = 2,
    /// Include basic metadata about the rule's revision only.
    /// Returned fields include: revision_id and revision_create_time.
    RevisionMetadataOnly = 3,
}
impl RuleView {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "RULE_VIEW_UNSPECIFIED",
            Self::Basic => "BASIC",
            Self::Full => "FULL",
            Self::RevisionMetadataOnly => "REVISION_METADATA_ONLY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RULE_VIEW_UNSPECIFIED" => Some(Self::Unspecified),
            "BASIC" => Some(Self::Basic),
            "FULL" => Some(Self::Full),
            "REVISION_METADATA_ONLY" => Some(Self::RevisionMetadataOnly),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod rule_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// RuleService provides interface for user-created rules.
    #[derive(Debug, Clone)]
    pub struct RuleServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl RuleServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> RuleServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> RuleServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            RuleServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Creates a new Rule.
        pub async fn create_rule(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateRuleRequest>,
        ) -> std::result::Result<tonic::Response<super::Rule>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.chronicle.v1.RuleService/CreateRule",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.chronicle.v1.RuleService",
                        "CreateRule",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Gets a Rule.
        pub async fn get_rule(
            &mut self,
            request: impl tonic::IntoRequest<super::GetRuleRequest>,
        ) -> std::result::Result<tonic::Response<super::Rule>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.chronicle.v1.RuleService/GetRule",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("google.cloud.chronicle.v1.RuleService", "GetRule"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Lists Rules.
        pub async fn list_rules(
            &mut self,
            request: impl tonic::IntoRequest<super::ListRulesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListRulesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.chronicle.v1.RuleService/ListRules",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("google.cloud.chronicle.v1.RuleService", "ListRules"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Updates a Rule.
        pub async fn update_rule(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateRuleRequest>,
        ) -> std::result::Result<tonic::Response<super::Rule>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.chronicle.v1.RuleService/UpdateRule",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.chronicle.v1.RuleService",
                        "UpdateRule",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Deletes a Rule.
        pub async fn delete_rule(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteRuleRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.chronicle.v1.RuleService/DeleteRule",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.chronicle.v1.RuleService",
                        "DeleteRule",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Lists all revisions of the rule.
        pub async fn list_rule_revisions(
            &mut self,
            request: impl tonic::IntoRequest<super::ListRuleRevisionsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListRuleRevisionsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.chronicle.v1.RuleService/ListRuleRevisions",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.chronicle.v1.RuleService",
                        "ListRuleRevisions",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Create a Retrohunt.
        pub async fn create_retrohunt(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateRetrohuntRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.chronicle.v1.RuleService/CreateRetrohunt",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.chronicle.v1.RuleService",
                        "CreateRetrohunt",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Get a Retrohunt.
        pub async fn get_retrohunt(
            &mut self,
            request: impl tonic::IntoRequest<super::GetRetrohuntRequest>,
        ) -> std::result::Result<tonic::Response<super::Retrohunt>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.chronicle.v1.RuleService/GetRetrohunt",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.chronicle.v1.RuleService",
                        "GetRetrohunt",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// List Retrohunts.
        pub async fn list_retrohunts(
            &mut self,
            request: impl tonic::IntoRequest<super::ListRetrohuntsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListRetrohuntsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.chronicle.v1.RuleService/ListRetrohunts",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.chronicle.v1.RuleService",
                        "ListRetrohunts",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Gets a RuleDeployment.
        pub async fn get_rule_deployment(
            &mut self,
            request: impl tonic::IntoRequest<super::GetRuleDeploymentRequest>,
        ) -> std::result::Result<tonic::Response<super::RuleDeployment>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.chronicle.v1.RuleService/GetRuleDeployment",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.chronicle.v1.RuleService",
                        "GetRuleDeployment",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Lists RuleDeployments across all Rules.
        pub async fn list_rule_deployments(
            &mut self,
            request: impl tonic::IntoRequest<super::ListRuleDeploymentsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListRuleDeploymentsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.chronicle.v1.RuleService/ListRuleDeployments",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.chronicle.v1.RuleService",
                        "ListRuleDeployments",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Updates a RuleDeployment.
        /// Failures are not necessarily atomic. If there is a request to update
        /// multiple fields, and any update to a single field fails, an error will be
        /// returned, but other fields may remain successfully updated.
        pub async fn update_rule_deployment(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateRuleDeploymentRequest>,
        ) -> std::result::Result<tonic::Response<super::RuleDeployment>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.chronicle.v1.RuleService/UpdateRuleDeployment",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.chronicle.v1.RuleService",
                        "UpdateRuleDeployment",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
