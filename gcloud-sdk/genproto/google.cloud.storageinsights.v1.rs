// This file is @generated by prost-build.
/// Request message for
/// \[`ListReportConfigs`\]\[google.cloud.storageinsights.v1.StorageInsights.ListReportConfigs\]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ListReportConfigsRequest {
    /// Required. Parent value for ListReportConfigsRequest
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Requested page size. Server may return fewer items than requested.
    /// If unspecified, server will pick an appropriate default.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// A token identifying a page of results the server should return.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// Filtering results
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
    /// Hint for how to order the results
    #[prost(string, tag = "5")]
    pub order_by: ::prost::alloc::string::String,
}
/// Message for response to listing ReportConfigs
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListReportConfigsResponse {
    /// The list of ReportConfig
    #[prost(message, repeated, tag = "1")]
    pub report_configs: ::prost::alloc::vec::Vec<ReportConfig>,
    /// A token identifying a page of results the server should return.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    /// Locations that could not be reached.
    #[prost(string, repeated, tag = "3")]
    pub unreachable: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Message for getting a ReportConfig
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetReportConfigRequest {
    /// Required. Name of the resource
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Message for creating a ReportConfig
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateReportConfigRequest {
    /// Required. Value for parent.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Required. The resource being created
    #[prost(message, optional, tag = "3")]
    pub report_config: ::core::option::Option<ReportConfig>,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and
    /// the request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "4")]
    pub request_id: ::prost::alloc::string::String,
}
/// Message for updating a ReportConfig
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateReportConfigRequest {
    /// Required. Field mask is used to specify the fields to be overwritten in the
    /// ReportConfig resource by the update.
    /// The fields specified in the update_mask are relative to the resource, not
    /// the full request. A field will be overwritten if it is in the mask. If the
    /// user does not provide a mask then all fields will be overwritten.
    #[prost(message, optional, tag = "1")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
    /// Required. The resource being updated
    #[prost(message, optional, tag = "2")]
    pub report_config: ::core::option::Option<ReportConfig>,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and
    /// the request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "3")]
    pub request_id: ::prost::alloc::string::String,
}
/// Message for deleting a ReportConfig
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DeleteReportConfigRequest {
    /// Required. Name of the resource
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Optional. If set, all ReportDetails for this ReportConfig will be deleted.
    #[prost(bool, tag = "2")]
    pub force: bool,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and
    /// the request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "3")]
    pub request_id: ::prost::alloc::string::String,
}
/// Message describing ReportDetail object. ReportDetail represents metadata of
/// generated reports for a ReportConfig.
/// Next ID: 10
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReportDetail {
    /// Name of resource. It will be of form
    /// projects/<project>/locations/<location>/reportConfigs/<report-config-id>/reportDetails/<report-detail-id>.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// The snapshot time.
    /// All the report data is referenced at this point of time.
    #[prost(message, optional, tag = "2")]
    pub snapshot_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Prefix of the object name of each report's shard. This will have full
    /// prefix except the "extension" and "shard_id".
    /// For example, if the `destination_path` is
    /// `{{report-config-id}}/dt={{datetime}}`, the shard object name would be
    /// `gs://my-insights/1A34-F2E456-12B456-1C3D/dt=2022-05-20T06:35/1A34-F2E456-12B456-1C3D_2022-05-20T06:35_5.csv`
    /// and the value of `report_path_prefix` field would be
    /// `gs://my-insights/1A34-F2E456-12B456-1C3D/dt=2022-05-20T06:35/1A34-F2E456-12B456-1C3D_2022-05-20T06:35_`.
    #[prost(string, tag = "8")]
    pub report_path_prefix: ::prost::alloc::string::String,
    /// Total shards generated for the report.
    #[prost(int64, tag = "9")]
    pub shards_count: i64,
    /// Status of the ReportDetail.
    #[prost(message, optional, tag = "4")]
    pub status: ::core::option::Option<super::super::super::rpc::Status>,
    /// Labels as key value pairs
    #[prost(map = "string, string", tag = "5")]
    pub labels: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// The date for which report is generated. The time part of target_datetime
    /// will be zero till we support multiple reports per day.
    #[prost(message, optional, tag = "6")]
    pub target_datetime: ::core::option::Option<super::super::super::r#type::DateTime>,
    /// Metrics of the report.
    #[prost(message, optional, tag = "7")]
    pub report_metrics: ::core::option::Option<report_detail::Metrics>,
}
/// Nested message and enum types in `ReportDetail`.
pub mod report_detail {
    /// Different metrics associated with the generated report.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct Metrics {
        /// Count of Cloud Storage objects which are part of the report.
        #[prost(int64, tag = "1")]
        pub processed_records_count: i64,
    }
}
/// Message for requesting list of ReportDetails
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ListReportDetailsRequest {
    /// Required. Parent value for ListReportDetailsRequest
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Requested page size. Server may return fewer items than requested.
    /// If unspecified, server will pick an appropriate default.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// A token identifying a page of results the server should return.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// Filtering results
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
    /// Hint for how to order the results
    #[prost(string, tag = "5")]
    pub order_by: ::prost::alloc::string::String,
}
/// Message for response to listing ReportDetails
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListReportDetailsResponse {
    /// The list of ReportDetail
    #[prost(message, repeated, tag = "1")]
    pub report_details: ::prost::alloc::vec::Vec<ReportDetail>,
    /// A token identifying a page of results the server should return.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    /// Locations that could not be reached.
    #[prost(string, repeated, tag = "3")]
    pub unreachable: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Message for getting a ReportDetail
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetReportDetailRequest {
    /// Required. Name of the resource
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Represents the metadata of the long-running operation.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct OperationMetadata {
    /// Output only. The time the operation was created.
    #[prost(message, optional, tag = "1")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. The time the operation finished running.
    #[prost(message, optional, tag = "2")]
    pub end_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. Server-defined resource path for the target of the operation.
    #[prost(string, tag = "3")]
    pub target: ::prost::alloc::string::String,
    /// Output only. Name of the verb executed by the operation.
    #[prost(string, tag = "4")]
    pub verb: ::prost::alloc::string::String,
    /// Output only. Human-readable status of the operation, if any.
    #[prost(string, tag = "5")]
    pub status_message: ::prost::alloc::string::String,
    /// Output only. Identifies whether the user has requested cancellation
    /// of the operation. Operations that have been cancelled successfully
    /// have \[Operation.error\]\[\] value with a
    /// \[google.rpc.Status.code\]\[google.rpc.Status.code\] of 1, corresponding to
    /// `Code.CANCELLED`.
    #[prost(bool, tag = "6")]
    pub requested_cancellation: bool,
    /// Output only. API version used to start the operation.
    #[prost(string, tag = "7")]
    pub api_version: ::prost::alloc::string::String,
}
/// ReportConfig Resource:
///
/// Options to setup frequency of report generation.
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FrequencyOptions {
    /// Frequency of report generation.
    #[prost(enumeration = "frequency_options::Frequency", tag = "1")]
    pub frequency: i32,
    /// The date from which report generation should start.
    /// UTC time zone.
    #[prost(message, optional, tag = "2")]
    pub start_date: ::core::option::Option<super::super::super::r#type::Date>,
    /// The date on which report generation should stop (Inclusive).
    /// UTC time zone.
    #[prost(message, optional, tag = "3")]
    pub end_date: ::core::option::Option<super::super::super::r#type::Date>,
}
/// Nested message and enum types in `FrequencyOptions`.
pub mod frequency_options {
    /// This ENUM specifies possible frequencies of report generation.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Frequency {
        /// Unspecified.
        Unspecified = 0,
        /// Report will be generated daily.
        Daily = 1,
        /// Report will be generated weekly.
        Weekly = 2,
    }
    impl Frequency {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "FREQUENCY_UNSPECIFIED",
                Self::Daily => "DAILY",
                Self::Weekly => "WEEKLY",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "FREQUENCY_UNSPECIFIED" => Some(Self::Unspecified),
                "DAILY" => Some(Self::Daily),
                "WEEKLY" => Some(Self::Weekly),
                _ => None,
            }
        }
    }
}
/// Options to configure CSV formatted reports.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CsvOptions {
    /// Record separator characters in CSV.
    #[prost(string, tag = "1")]
    pub record_separator: ::prost::alloc::string::String,
    /// Delimiter characters in CSV.
    #[prost(string, tag = "2")]
    pub delimiter: ::prost::alloc::string::String,
    /// If set, will include a header row in the CSV report.
    #[prost(bool, tag = "3")]
    pub header_required: bool,
}
/// Options to configure Parquet formatted reports.
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ParquetOptions {}
/// Options to filter data on storage systems.
/// Next ID: 2
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CloudStorageFilters {
    /// Bucket for which the report will be generated.
    #[prost(string, tag = "1")]
    pub bucket: ::prost::alloc::string::String,
}
/// Options to store reports in storage systems.
/// Next ID: 3
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CloudStorageDestinationOptions {
    /// Destination bucket.
    #[prost(string, tag = "1")]
    pub bucket: ::prost::alloc::string::String,
    /// Destination path is the path in the bucket where the report should be
    /// generated.
    #[prost(string, tag = "2")]
    pub destination_path: ::prost::alloc::string::String,
}
/// Report specification for exporting object metadata.
/// Next ID: 4
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ObjectMetadataReportOptions {
    /// Metadata fields to be included in the report.
    #[prost(string, repeated, tag = "1")]
    pub metadata_fields: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Filter options for storage systems.
    #[prost(oneof = "object_metadata_report_options::Filter", tags = "2")]
    pub filter: ::core::option::Option<object_metadata_report_options::Filter>,
    /// Options on destination for storage systems.
    #[prost(oneof = "object_metadata_report_options::DestinationOptions", tags = "3")]
    pub destination_options: ::core::option::Option<
        object_metadata_report_options::DestinationOptions,
    >,
}
/// Nested message and enum types in `ObjectMetadataReportOptions`.
pub mod object_metadata_report_options {
    /// Filter options for storage systems.
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Oneof)]
    pub enum Filter {
        /// Cloud Storage as the storage system.
        #[prost(message, tag = "2")]
        StorageFilters(super::CloudStorageFilters),
    }
    /// Options on destination for storage systems.
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Oneof)]
    pub enum DestinationOptions {
        /// Cloud Storage as the storage system.
        #[prost(message, tag = "3")]
        StorageDestinationOptions(super::CloudStorageDestinationOptions),
    }
}
/// Message describing ReportConfig object. ReportConfig is the configuration to
/// generate reports.
/// See
/// <https://cloud.google.com/storage/docs/insights/using-inventory-reports#create-config-rest>
/// for more details on how to set various fields.
/// Next ID: 12
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReportConfig {
    /// name of resource. It will be of form
    /// projects/<project>/locations/<location>/reportConfigs/<report-config-id>.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Output only. \[Output only\] Create time stamp
    #[prost(message, optional, tag = "2")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. \[Output only\] Update time stamp
    #[prost(message, optional, tag = "3")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    /// The frequency of report generation.
    #[prost(message, optional, tag = "5")]
    pub frequency_options: ::core::option::Option<FrequencyOptions>,
    /// Labels as key value pairs
    #[prost(map = "string, string", tag = "10")]
    pub labels: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// User provided display name which can be empty and limited to 256 characters
    /// that is editable.
    #[prost(string, tag = "11")]
    pub display_name: ::prost::alloc::string::String,
    /// Format in which report will be published.
    #[prost(oneof = "report_config::ReportFormat", tags = "6, 7")]
    pub report_format: ::core::option::Option<report_config::ReportFormat>,
    /// Configuration options for report contents.
    #[prost(oneof = "report_config::ReportKind", tags = "8")]
    pub report_kind: ::core::option::Option<report_config::ReportKind>,
}
/// Nested message and enum types in `ReportConfig`.
pub mod report_config {
    /// Format in which report will be published.
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Oneof)]
    pub enum ReportFormat {
        /// Options for CSV formatted reports.
        #[prost(message, tag = "6")]
        CsvOptions(super::CsvOptions),
        /// Options for Parquet formatted reports.
        #[prost(message, tag = "7")]
        ParquetOptions(super::ParquetOptions),
    }
    /// Configuration options for report contents.
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Oneof)]
    pub enum ReportKind {
        /// Report for exporting object metadata.
        #[prost(message, tag = "8")]
        ObjectMetadataReportOptions(super::ObjectMetadataReportOptions),
    }
}
/// Identity lets the user provide the type of identity to use, and outputs
/// the identity string that can be used for IAM policy changes.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct Identity {
    /// Output only. Name of the identity.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Type of identity to use for the datasetConfig.
    #[prost(enumeration = "identity::IdentityType", tag = "2")]
    pub r#type: i32,
}
/// Nested message and enum types in `Identity`.
pub mod identity {
    /// Type of service account to use for the dataset configuration.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum IdentityType {
        /// Default is unspecified and should not be used.
        Unspecified = 0,
        /// Google managed service account per resource.
        PerConfig = 1,
        /// Google managed service account per project.
        PerProject = 2,
    }
    impl IdentityType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "IDENTITY_TYPE_UNSPECIFIED",
                Self::PerConfig => "IDENTITY_TYPE_PER_CONFIG",
                Self::PerProject => "IDENTITY_TYPE_PER_PROJECT",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "IDENTITY_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
                "IDENTITY_TYPE_PER_CONFIG" => Some(Self::PerConfig),
                "IDENTITY_TYPE_PER_PROJECT" => Some(Self::PerProject),
                _ => None,
            }
        }
    }
}
/// Message describing the dataset configuration properties. For more
/// information, see [Dataset configuration
/// properties](<https://cloud.google.com/storage/docs/insights/datasets#dataset-config>).
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DatasetConfig {
    /// Identifier. name of resource
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Output only. The UTC time at which the dataset configuration was created.
    /// This is auto-populated.
    #[prost(message, optional, tag = "2")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. The UTC time at which the dataset configuration was last
    /// updated. This is auto-populated.
    #[prost(message, optional, tag = "3")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Labels as key value pairs
    #[prost(map = "string, string", tag = "4")]
    pub labels: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Output only. System generated unique identifier for the resource.
    #[prost(string, tag = "5")]
    pub uid: ::prost::alloc::string::String,
    /// Optional. Organization resource ID that the source projects should belong
    /// to. Projects that do not belong to the provided organization are not
    /// considered when creating the dataset.
    #[prost(int64, tag = "22")]
    pub organization_number: i64,
    /// If set to `true`, the request includes all the newly created buckets in the
    /// dataset that meet the inclusion and exclusion rules.
    #[prost(bool, tag = "12")]
    pub include_newly_created_buckets: bool,
    /// Optional. If set to `false`, then all the permission checks must be
    /// successful before the system can start ingesting data. This field can only
    /// be updated before the system ingests data for the first time. Any attempt
    /// to modify the field after data ingestion starts results in an error.
    #[deprecated]
    #[prost(bool, tag = "19")]
    pub skip_verification_and_ingest: bool,
    /// Number of days of history that must be retained.
    #[prost(int32, tag = "14")]
    pub retention_period_days: i32,
    /// Details of the linked dataset.
    #[prost(message, optional, tag = "15")]
    pub link: ::core::option::Option<dataset_config::Link>,
    /// Identity used by this `datasetConfig`.
    #[prost(message, optional, tag = "16")]
    pub identity: ::core::option::Option<Identity>,
    /// Output only. Status of the `datasetConfig`.
    #[prost(message, optional, tag = "17")]
    pub status: ::core::option::Option<super::super::super::rpc::Status>,
    /// Output only. State of the `datasetConfig`.
    #[prost(enumeration = "dataset_config::ConfigState", tag = "18")]
    pub dataset_config_state: i32,
    /// Optional. A user-provided description for the dataset configuration.
    ///
    /// Maximum length: 256 characters.
    #[prost(string, tag = "20")]
    pub description: ::prost::alloc::string::String,
    /// Defines the options for providing source identifiers for the dataset.
    #[prost(oneof = "dataset_config::SourceOptions", tags = "7, 24, 25, 21")]
    pub source_options: ::core::option::Option<dataset_config::SourceOptions>,
    /// Cloud Storage locations to include or exclude.
    #[prost(oneof = "dataset_config::CloudStorageLocations", tags = "8, 9")]
    pub cloud_storage_locations: ::core::option::Option<
        dataset_config::CloudStorageLocations,
    >,
    /// Cloud Storage buckets to include or exclude.
    #[prost(oneof = "dataset_config::CloudStorageBuckets", tags = "10, 11")]
    pub cloud_storage_buckets: ::core::option::Option<
        dataset_config::CloudStorageBuckets,
    >,
}
/// Nested message and enum types in `DatasetConfig`.
pub mod dataset_config {
    /// Collection of project numbers
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct SourceProjects {
        #[prost(int64, repeated, tag = "1")]
        pub project_numbers: ::prost::alloc::vec::Vec<i64>,
    }
    /// Specifies a set of folders to include in the dataset
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct SourceFolders {
        /// Optional. The list of folder numbers to include in the dataset.
        #[prost(int64, repeated, packed = "false", tag = "1")]
        pub folder_numbers: ::prost::alloc::vec::Vec<i64>,
    }
    /// Collection of Cloud Storage locations.
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct CloudStorageLocations {
        #[prost(string, repeated, tag = "1")]
        pub locations: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    }
    /// Collection of Cloud Storage buckets.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct CloudStorageBuckets {
        #[prost(message, repeated, tag = "1")]
        pub cloud_storage_buckets: ::prost::alloc::vec::Vec<
            cloud_storage_buckets::CloudStorageBucket,
        >,
    }
    /// Nested message and enum types in `CloudStorageBuckets`.
    pub mod cloud_storage_buckets {
        /// Defines the bucket by its name or a regex pattern to match buckets.
        #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
        pub struct CloudStorageBucket {
            #[prost(oneof = "cloud_storage_bucket::CloudStorageBucket", tags = "1, 2")]
            pub cloud_storage_bucket: ::core::option::Option<
                cloud_storage_bucket::CloudStorageBucket,
            >,
        }
        /// Nested message and enum types in `CloudStorageBucket`.
        pub mod cloud_storage_bucket {
            #[derive(Clone, PartialEq, Eq, Hash, ::prost::Oneof)]
            pub enum CloudStorageBucket {
                /// Cloud Storage bucket name.
                #[prost(string, tag = "1")]
                BucketName(::prost::alloc::string::String),
                /// A regex pattern for bucket names matching the regex. Regex should
                /// follow the syntax specified in `google/re2` on GitHub.
                #[prost(string, tag = "2")]
                BucketPrefixRegex(::prost::alloc::string::String),
            }
        }
    }
    /// Defines the details about the linked dataset.
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct Link {
        /// Output only. Dataset name for linked dataset.
        #[prost(string, tag = "1")]
        pub dataset: ::prost::alloc::string::String,
        /// Output only. State of the linked dataset.
        #[prost(bool, tag = "2")]
        pub linked: bool,
    }
    /// Provides a summary of the bucket level error statistics.
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct BucketErrors {
        /// Optional. Count of successfully validated buckets.
        #[prost(int64, tag = "1")]
        pub validated_count: i64,
        /// Optional. Count of buckets with permission denied errors.
        #[prost(int64, tag = "2")]
        pub permission_denied_count: i64,
        /// Optional. Subset of bucket names that have permission denied.
        #[prost(string, repeated, tag = "3")]
        pub permission_denied_bucket_ids: ::prost::alloc::vec::Vec<
            ::prost::alloc::string::String,
        >,
        /// Optional. Count of buckets that are not subscribed to Storage
        /// Intelligence.
        #[deprecated]
        #[prost(int64, tag = "5")]
        pub non_management_hub_entitled_count: i64,
        /// Optional. Number of buckets that encountered internal errors during the
        /// validation process. These buckets are automatically retried in subsequent
        /// validation attempts.
        #[prost(int64, tag = "4")]
        pub internal_error_count: i64,
        /// Optional. Count of buckets that are not subscribed to Storage
        /// Intelligence.
        #[prost(int64, tag = "7")]
        pub non_storage_intelligence_entitled_count: i64,
        /// Optional. Subset of bucket names that are not subscribed to Storage
        /// Intelligence.
        #[prost(string, repeated, tag = "8")]
        pub non_storage_intelligence_entitled_bucket_ids: ::prost::alloc::vec::Vec<
            ::prost::alloc::string::String,
        >,
    }
    /// Provides a summary of the project level error statistics.
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct ProjectErrors {
        /// Optional. Count of successfully validated projects.
        #[prost(int64, optional, tag = "1")]
        pub validated_count: ::core::option::Option<i64>,
        /// Optional. Count of projects which are not in the same organization.
        #[prost(int64, optional, tag = "2")]
        pub outside_org_error_count: ::core::option::Option<i64>,
        /// Optional. Subset of project numbers which are not in the same
        /// organization.
        #[prost(int64, repeated, packed = "false", tag = "3")]
        pub outside_org_project_numbers: ::prost::alloc::vec::Vec<i64>,
        /// Optional. Count of projects that are not subscribed to Storage
        /// Intelligence.
        #[deprecated]
        #[prost(int64, optional, tag = "7")]
        pub non_management_hub_entitled_error_count: ::core::option::Option<i64>,
        /// Optional. Subset of project numbers that are not subscribed to Storage
        /// Intelligence.
        #[deprecated]
        #[prost(int64, repeated, packed = "false", tag = "8")]
        pub non_management_hub_entitled_project_numbers: ::prost::alloc::vec::Vec<i64>,
        /// Optional. Count of projects that are not subscribed to Storage
        /// Intelligence.
        #[prost(int64, optional, tag = "9")]
        pub non_storage_intelligence_entitled_error_count: ::core::option::Option<i64>,
        /// Optional. Subset of project numbers that are not subscribed to Storage
        /// Intelligence.
        #[prost(int64, repeated, packed = "false", tag = "10")]
        pub non_storage_intelligence_entitled_project_numbers: ::prost::alloc::vec::Vec<
            i64,
        >,
        /// Optional. Number of projects that encountered internal errors during
        /// validation and are automatically retried.
        #[prost(int64, optional, tag = "4")]
        pub internal_error_count: ::core::option::Option<i64>,
        /// The destination project check result. It indicates whether the project
        /// is in the correct organization or if an internal error occurred during
        /// the check.
        #[prost(oneof = "project_errors::DestinationProjectCheckResult", tags = "5, 6")]
        pub destination_project_check_result: ::core::option::Option<
            project_errors::DestinationProjectCheckResult,
        >,
    }
    /// Nested message and enum types in `ProjectErrors`.
    pub mod project_errors {
        /// The destination project check result. It indicates whether the project
        /// is in the correct organization or if an internal error occurred during
        /// the check.
        #[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Oneof)]
        pub enum DestinationProjectCheckResult {
            /// Optional. Indicates if the destination project resides within the same
            /// organization as the source project.
            #[prost(bool, tag = "5")]
            DestinationProjectOrgError(bool),
            /// Optional. Indicates whether the destination project check failed due to
            /// an internal error. If `true`, the system automatically retries the
            /// check.
            #[prost(bool, tag = "6")]
            DestinationProjectCheckHasInternalError(bool),
        }
    }
    /// Summary of validation errors that occurred during the verification phase.
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct ValidationErrorsBeforeIngestion {
        /// Optional. Provides a summary of the bucket level error stats.
        #[prost(message, optional, tag = "1")]
        pub bucket_errors: ::core::option::Option<BucketErrors>,
        /// Optional. Provides a summary of the project level error stats.
        #[prost(message, optional, tag = "2")]
        pub project_errors: ::core::option::Option<ProjectErrors>,
    }
    /// State of the configuration.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum ConfigState {
        /// Unspecified state.
        Unspecified = 0,
        /// Active configuration indicates that the configuration is
        /// actively ingesting data.
        Active = 1,
        /// In this state, the configuration is being verified for various
        /// permissions.
        VerificationInProgress = 2,
        /// Configuration is created and further processing needs to happen.
        Created = 3,
        /// Configuration is under processing
        Processing = 4,
    }
    impl ConfigState {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "CONFIG_STATE_UNSPECIFIED",
                Self::Active => "CONFIG_STATE_ACTIVE",
                Self::VerificationInProgress => "CONFIG_STATE_VERIFICATION_IN_PROGRESS",
                Self::Created => "CONFIG_STATE_CREATED",
                Self::Processing => "CONFIG_STATE_PROCESSING",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "CONFIG_STATE_UNSPECIFIED" => Some(Self::Unspecified),
                "CONFIG_STATE_ACTIVE" => Some(Self::Active),
                "CONFIG_STATE_VERIFICATION_IN_PROGRESS" => {
                    Some(Self::VerificationInProgress)
                }
                "CONFIG_STATE_CREATED" => Some(Self::Created),
                "CONFIG_STATE_PROCESSING" => Some(Self::Processing),
                _ => None,
            }
        }
    }
    /// Defines the options for providing source identifiers for the dataset.
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Oneof)]
    pub enum SourceOptions {
        /// Defines the options for providing source projects for the dataset.
        #[prost(message, tag = "7")]
        SourceProjects(SourceProjects),
        /// Defines the options for providing source folders for the dataset.
        #[prost(message, tag = "24")]
        SourceFolders(SourceFolders),
        /// Defines the options for providing a source organization for the dataset.
        #[prost(bool, tag = "25")]
        OrganizationScope(bool),
        /// Input only. Cloud Storage object path containing a list of
        /// project or folder numbers to include in the dataset;
        /// it cannot contain a mix of project and folders.
        ///
        /// The object must be a text file where each line has one of the following
        /// entries:
        ///
        /// * Project number, formatted as `projects/{project_number}`, for example,
        ///   `projects/1234567890`.
        /// * Folder identifier, formatted as `folders/{folder_number}`, for example,
        ///   `folders/9876543210`.
        ///   Path must be in the format `gs://{bucket_name}/{object_name}`.
        #[prost(string, tag = "21")]
        CloudStorageObjectPath(::prost::alloc::string::String),
    }
    /// Cloud Storage locations to include or exclude.
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Oneof)]
    pub enum CloudStorageLocations {
        #[prost(message, tag = "8")]
        IncludeCloudStorageLocations(CloudStorageLocations),
        #[prost(message, tag = "9")]
        ExcludeCloudStorageLocations(CloudStorageLocations),
    }
    /// Cloud Storage buckets to include or exclude.
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum CloudStorageBuckets {
        #[prost(message, tag = "10")]
        IncludeCloudStorageBuckets(CloudStorageBuckets),
        #[prost(message, tag = "11")]
        ExcludeCloudStorageBuckets(CloudStorageBuckets),
    }
}
/// Request message for
/// \[`ListDatasetConfigs`\]\[google.cloud.storageinsights.v1.StorageInsights.ListDatasetConfigs\]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ListDatasetConfigsRequest {
    /// Required. Parent value for ListDatasetConfigsRequest
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Requested page size. Server might return fewer items than requested.
    /// If unspecified, server picks an appropriate default.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// A token identifying a page of results the server should return.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// Filtering results
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
    /// Hint for how to order the results
    #[prost(string, tag = "5")]
    pub order_by: ::prost::alloc::string::String,
}
/// Response message for
/// \[`ListDatasetConfigs`\]\[google.cloud.storageinsights.v1.StorageInsights.ListDatasetConfigs\]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListDatasetConfigsResponse {
    /// The list of `DatasetConfigs`
    #[prost(message, repeated, tag = "1")]
    pub dataset_configs: ::prost::alloc::vec::Vec<DatasetConfig>,
    /// A token identifying a page of results the server should return.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    /// Locations that could not be reached.
    #[prost(string, repeated, tag = "3")]
    pub unreachable: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Request message for
/// \[`GetDatasetConfig`\]\[google.cloud.storageinsights.v1.StorageInsights.GetDatasetConfig\]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetDatasetConfigRequest {
    /// Required. Name of the resource
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Request message for
/// \[`CreateDatasetConfig`\]\[google.cloud.storageinsights.v1.StorageInsights.CreateDatasetConfig\]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateDatasetConfigRequest {
    /// Required. Value for parent.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Required. ID of the requesting object.
    /// If auto-generating ID is enabled on the server-side, remove this field and
    /// `dataset_config_id` from the method_signature of Create RPC
    /// Note: The value should not contain any hyphens.
    #[prost(string, tag = "2")]
    pub dataset_config_id: ::prost::alloc::string::String,
    /// Required. The resource being created
    #[prost(message, optional, tag = "3")]
    pub dataset_config: ::core::option::Option<DatasetConfig>,
    /// Optional. A unique identifier for your request.
    /// Specify the request ID if you need to retry the request.
    /// If you retry the request with the same ID within 60 minutes, the server
    /// ignores the request if it has already completed the original request.
    ///
    /// For example, if your initial request times out and you retry the request
    /// using the same request ID, the server recognizes the original request and
    /// does not process the new request.
    ///
    /// The request ID must be a valid UUID and cannot be a zero UUID
    /// (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "4")]
    pub request_id: ::prost::alloc::string::String,
}
/// Request message for
/// \[`UpdateDatasetConfig`\]\[google.cloud.storageinsights.v1.StorageInsights.UpdateDatasetConfig\]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateDatasetConfigRequest {
    /// Required. Field mask is used to specify the fields to be overwritten in the
    /// `DatasetConfig` resource by the update.
    /// The fields specified in the `update_mask` are relative to the resource, not
    /// the full request. A field is overwritten if it is in the mask. If the
    /// user does not provide a mask then it returns an "Invalid Argument" error.
    #[prost(message, optional, tag = "1")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
    /// Required. The resource being updated
    #[prost(message, optional, tag = "2")]
    pub dataset_config: ::core::option::Option<DatasetConfig>,
    /// Optional. A unique identifier for your request.
    /// Specify the request ID if you need to retry the request.
    /// If you retry the request with the same ID within 60 minutes, the server
    /// ignores the request if it has already completed the original request.
    ///
    /// For example, if your initial request times out and you retry the request
    /// using the same request ID, the server recognizes the original request and
    /// does not process the new request.
    ///
    /// The request ID must be a valid UUID and cannot be a zero UUID
    /// (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "3")]
    pub request_id: ::prost::alloc::string::String,
}
/// Request message for
/// \[`DeleteDatasetConfig`\]\[google.cloud.storageinsights.v1.StorageInsights.DeleteDatasetConfig\]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DeleteDatasetConfigRequest {
    /// Required. Name of the resource
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Optional. A unique identifier for your request.
    /// Specify the request ID if you need to retry the request.
    /// If you retry the request with the same ID within 60 minutes, the server
    /// ignores the request if it has already completed the original request.
    ///
    /// For example, if your initial request times out and you retry the request
    /// using the same request ID, the server recognizes the original request and
    /// does not process the new request.
    ///
    /// The request ID must be a valid UUID and cannot be a zero UUID
    /// (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "2")]
    pub request_id: ::prost::alloc::string::String,
}
/// Request message for
/// \[`LinkDataset`\]\[google.cloud.storageinsights.v1.StorageInsights.LinkDataset\]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct LinkDatasetRequest {
    /// Required. Name of the resource
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Response message for
/// \[`LinkDataset`\]\[google.cloud.storageinsights.v1.StorageInsights.LinkDataset\]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct LinkDatasetResponse {}
/// Request message for
/// \[`UnlinkDataset`\]\[google.cloud.storageinsights.v1.StorageInsights.UnlinkDataset\]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct UnlinkDatasetRequest {
    /// Required. Name of the resource
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Metadata that helps discover which resources are available in a location.
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct LocationMetadata {
    /// If true, `storageinsights.googleapis.com/ReportConfig` resource is
    /// available at the location.
    #[prost(bool, tag = "1")]
    pub report_config_available: bool,
    /// If true, `storageinsights.googleapis.com/DatasetConfig` resource is
    /// available at the location.
    #[prost(bool, tag = "2")]
    pub dataset_config_available: bool,
}
/// Generated client implementations.
pub mod storage_insights_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Service describing handlers for resources
    #[derive(Debug, Clone)]
    pub struct StorageInsightsClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl StorageInsightsClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> StorageInsightsClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> StorageInsightsClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            StorageInsightsClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Lists ReportConfigs in a given project and location.
        pub async fn list_report_configs(
            &mut self,
            request: impl tonic::IntoRequest<super::ListReportConfigsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListReportConfigsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.storageinsights.v1.StorageInsights/ListReportConfigs",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.storageinsights.v1.StorageInsights",
                        "ListReportConfigs",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Gets details of a single ReportConfig.
        pub async fn get_report_config(
            &mut self,
            request: impl tonic::IntoRequest<super::GetReportConfigRequest>,
        ) -> std::result::Result<tonic::Response<super::ReportConfig>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.storageinsights.v1.StorageInsights/GetReportConfig",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.storageinsights.v1.StorageInsights",
                        "GetReportConfig",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Creates a new ReportConfig in a given project and location.
        pub async fn create_report_config(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateReportConfigRequest>,
        ) -> std::result::Result<tonic::Response<super::ReportConfig>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.storageinsights.v1.StorageInsights/CreateReportConfig",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.storageinsights.v1.StorageInsights",
                        "CreateReportConfig",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Updates the parameters of a single ReportConfig.
        pub async fn update_report_config(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateReportConfigRequest>,
        ) -> std::result::Result<tonic::Response<super::ReportConfig>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.storageinsights.v1.StorageInsights/UpdateReportConfig",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.storageinsights.v1.StorageInsights",
                        "UpdateReportConfig",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Deletes a single ReportConfig.
        pub async fn delete_report_config(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteReportConfigRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.storageinsights.v1.StorageInsights/DeleteReportConfig",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.storageinsights.v1.StorageInsights",
                        "DeleteReportConfig",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Lists ReportDetails in a given project and location.
        pub async fn list_report_details(
            &mut self,
            request: impl tonic::IntoRequest<super::ListReportDetailsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListReportDetailsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.storageinsights.v1.StorageInsights/ListReportDetails",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.storageinsights.v1.StorageInsights",
                        "ListReportDetails",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Gets details of a single ReportDetail.
        pub async fn get_report_detail(
            &mut self,
            request: impl tonic::IntoRequest<super::GetReportDetailRequest>,
        ) -> std::result::Result<tonic::Response<super::ReportDetail>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.storageinsights.v1.StorageInsights/GetReportDetail",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.storageinsights.v1.StorageInsights",
                        "GetReportDetail",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Lists the dataset configurations in a given project for a given location.
        pub async fn list_dataset_configs(
            &mut self,
            request: impl tonic::IntoRequest<super::ListDatasetConfigsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListDatasetConfigsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.storageinsights.v1.StorageInsights/ListDatasetConfigs",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.storageinsights.v1.StorageInsights",
                        "ListDatasetConfigs",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Gets the dataset configuration in a given project for a given location.
        pub async fn get_dataset_config(
            &mut self,
            request: impl tonic::IntoRequest<super::GetDatasetConfigRequest>,
        ) -> std::result::Result<tonic::Response<super::DatasetConfig>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.storageinsights.v1.StorageInsights/GetDatasetConfig",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.storageinsights.v1.StorageInsights",
                        "GetDatasetConfig",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Creates a dataset configuration in a given project for a given location.
        pub async fn create_dataset_config(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateDatasetConfigRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.storageinsights.v1.StorageInsights/CreateDatasetConfig",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.storageinsights.v1.StorageInsights",
                        "CreateDatasetConfig",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Updates a dataset configuration in a given project for a given location.
        pub async fn update_dataset_config(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateDatasetConfigRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.storageinsights.v1.StorageInsights/UpdateDatasetConfig",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.storageinsights.v1.StorageInsights",
                        "UpdateDatasetConfig",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Deletes a dataset configuration in a given project for a given location.
        pub async fn delete_dataset_config(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteDatasetConfigRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.storageinsights.v1.StorageInsights/DeleteDatasetConfig",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.storageinsights.v1.StorageInsights",
                        "DeleteDatasetConfig",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Links a dataset to BigQuery in a given project for a given location.
        pub async fn link_dataset(
            &mut self,
            request: impl tonic::IntoRequest<super::LinkDatasetRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.storageinsights.v1.StorageInsights/LinkDataset",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.storageinsights.v1.StorageInsights",
                        "LinkDataset",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Unlinks a dataset from BigQuery in a given project
        /// for a given location.
        pub async fn unlink_dataset(
            &mut self,
            request: impl tonic::IntoRequest<super::UnlinkDatasetRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.storageinsights.v1.StorageInsights/UnlinkDataset",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.storageinsights.v1.StorageInsights",
                        "UnlinkDataset",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
