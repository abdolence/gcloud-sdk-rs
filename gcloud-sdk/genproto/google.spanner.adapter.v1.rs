// This file is @generated by prost-build.
/// Message sent by the client to the adapter.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AdaptMessageRequest {
    /// Required. The database session in which the adapter request is processed.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Required. Identifier for the underlying wire protocol.
    #[prost(string, tag = "2")]
    pub protocol: ::prost::alloc::string::String,
    /// Optional. Uninterpreted bytes from the underlying wire protocol.
    #[prost(bytes = "vec", tag = "3")]
    pub payload: ::prost::alloc::vec::Vec<u8>,
    /// Optional. Opaque request state passed by the client to the server.
    #[prost(map = "string, string", tag = "4")]
    pub attachments: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// Message sent by the adapter to the client.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AdaptMessageResponse {
    /// Optional. Uninterpreted bytes from the underlying wire protocol.
    #[prost(bytes = "vec", tag = "1")]
    pub payload: ::prost::alloc::vec::Vec<u8>,
    /// Optional. Opaque state updates to be applied by the client.
    #[prost(map = "string, string", tag = "2")]
    pub state_updates: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Optional. Indicates whether this is the last
    /// [AdaptMessageResponse][google.spanner.adapter.v1.AdaptMessageResponse] in
    /// the stream. This field may be optionally set by the server. Clients should
    /// not rely on this field being set in all cases.
    #[prost(bool, tag = "3")]
    pub last: bool,
}
/// A session in the Cloud Spanner Adapter API.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Session {
    /// Identifier. The name of the session. This is always system-assigned.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// The request for
/// [CreateSessionRequest][Adapter.CreateSessionRequest].
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateSessionRequest {
    /// Required. The database in which the new session is created.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Required. The session to create.
    #[prost(message, optional, tag = "2")]
    pub session: ::core::option::Option<Session>,
}
/// Generated client implementations.
pub mod adapter_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Cloud Spanner Adapter API
    ///
    /// The Cloud Spanner Adapter service allows native drivers of supported database
    /// dialects to interact directly with Cloud Spanner by wrapping the underlying
    /// wire protocol used by the driver in a gRPC stream.
    #[derive(Debug, Clone)]
    pub struct AdapterClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl AdapterClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> AdapterClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> AdapterClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            AdapterClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Creates a new session to be used for requests made by the adapter.
        /// A session identifies a specific incarnation of a database resource and is
        /// meant to be reused across many `AdaptMessage` calls.
        pub async fn create_session(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateSessionRequest>,
        ) -> std::result::Result<tonic::Response<super::Session>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.spanner.adapter.v1.Adapter/CreateSession",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("google.spanner.adapter.v1.Adapter", "CreateSession"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Handles a single message from the client and returns the result as a
        /// stream. The server will interpret the message frame and respond with
        /// message frames to the client.
        pub async fn adapt_message(
            &mut self,
            request: impl tonic::IntoRequest<super::AdaptMessageRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::AdaptMessageResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.spanner.adapter.v1.Adapter/AdaptMessage",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("google.spanner.adapter.v1.Adapter", "AdaptMessage"),
                );
            self.inner.server_streaming(req, path, codec).await
        }
    }
}
