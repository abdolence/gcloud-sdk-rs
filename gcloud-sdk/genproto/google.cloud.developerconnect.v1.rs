// This file is @generated by prost-build.
/// Message for requesting a list of Users
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ListUsersRequest {
    /// Required. Parent value for ListUsersRequest
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Optional. Requested page size. Server may return fewer items than
    /// requested. If unspecified, server will pick an appropriate default.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// Optional. A token identifying a page of results the server should return.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// Optional. Filtering results
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
    /// Optional. Hint for how to order the results
    #[prost(string, tag = "5")]
    pub order_by: ::prost::alloc::string::String,
}
/// Message for response to listing Users
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListUsersResponse {
    /// The list of Users
    #[prost(message, repeated, tag = "1")]
    pub users: ::prost::alloc::vec::Vec<User>,
    /// A token identifying a page of results the server should return.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    /// Locations that could not be reached.
    #[prost(string, repeated, tag = "3")]
    pub unreachable: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Message describing Connection object
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Connection {
    /// Identifier. The resource name of the connection, in the format
    /// `projects/{project}/locations/{location}/connections/{connection_id}`.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Output only. \[Output only\] Create timestamp
    #[prost(message, optional, tag = "2")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. \[Output only\] Update timestamp
    #[prost(message, optional, tag = "3")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. \[Output only\] Delete timestamp
    #[prost(message, optional, tag = "11")]
    pub delete_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Optional. Labels as key value pairs
    #[prost(map = "string, string", tag = "4")]
    pub labels: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Output only. Installation state of the Connection.
    #[prost(message, optional, tag = "6")]
    pub installation_state: ::core::option::Option<InstallationState>,
    /// Optional. If disabled is set to true, functionality is disabled for this
    /// connection. Repository based API methods and webhooks processing for
    /// repositories in this connection will be disabled.
    #[prost(bool, tag = "7")]
    pub disabled: bool,
    /// Output only. Set to true when the connection is being set up or updated in
    /// the background.
    #[prost(bool, tag = "8")]
    pub reconciling: bool,
    /// Optional. Allows clients to store small amounts of arbitrary data.
    #[prost(map = "string, string", tag = "9")]
    pub annotations: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Optional. This checksum is computed by the server based on the value of
    /// other fields, and may be sent on update and delete requests to ensure the
    /// client has an up-to-date value before proceeding.
    #[prost(string, tag = "10")]
    pub etag: ::prost::alloc::string::String,
    /// Output only. A system-assigned unique identifier for the Connection.
    #[prost(string, tag = "12")]
    pub uid: ::prost::alloc::string::String,
    /// Optional. The crypto key configuration. This field is used by the
    /// Customer-Managed Encryption Keys (CMEK) feature.
    #[prost(message, optional, tag = "15")]
    pub crypto_key_config: ::core::option::Option<CryptoKeyConfig>,
    /// Optional. Configuration for the git proxy feature. Enabling the git proxy
    /// allows clients to perform git operations on the repositories linked in the
    /// connection.
    #[prost(message, optional, tag = "19")]
    pub git_proxy_config: ::core::option::Option<GitProxyConfig>,
    /// Configuration for the connection depending on the type of provider.
    #[prost(oneof = "connection::ConnectionConfig", tags = "5, 13, 14, 16, 17, 18")]
    pub connection_config: ::core::option::Option<connection::ConnectionConfig>,
}
/// Nested message and enum types in `Connection`.
pub mod connection {
    /// Configuration for the connection depending on the type of provider.
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Oneof)]
    pub enum ConnectionConfig {
        /// Configuration for connections to github.com.
        #[prost(message, tag = "5")]
        GithubConfig(super::GitHubConfig),
        /// Configuration for connections to an instance of GitHub Enterprise.
        #[prost(message, tag = "13")]
        GithubEnterpriseConfig(super::GitHubEnterpriseConfig),
        /// Configuration for connections to gitlab.com.
        #[prost(message, tag = "14")]
        GitlabConfig(super::GitLabConfig),
        /// Configuration for connections to an instance of GitLab Enterprise.
        #[prost(message, tag = "16")]
        GitlabEnterpriseConfig(super::GitLabEnterpriseConfig),
        /// Configuration for connections to an instance of Bitbucket Data Center.
        #[prost(message, tag = "17")]
        BitbucketDataCenterConfig(super::BitbucketDataCenterConfig),
        /// Configuration for connections to an instance of Bitbucket Clouds.
        #[prost(message, tag = "18")]
        BitbucketCloudConfig(super::BitbucketCloudConfig),
    }
}
/// The crypto key configuration. This field is used by the Customer-managed
/// encryption keys (CMEK) feature.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CryptoKeyConfig {
    /// Required. The name of the key which is used to encrypt/decrypt customer
    /// data. For key in Cloud KMS, the key should be in the format of
    /// `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
    #[prost(string, tag = "1")]
    pub key_reference: ::prost::alloc::string::String,
}
/// The git proxy configuration.
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GitProxyConfig {
    /// Optional. Setting this to true allows the git proxy to be used for
    /// performing git operations on the repositories linked in the connection.
    #[prost(bool, tag = "1")]
    pub enabled: bool,
}
/// Describes stage and necessary actions to be taken by the
/// user to complete the installation. Used for GitHub and GitHub Enterprise
/// based connections.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct InstallationState {
    /// Output only. Current step of the installation process.
    #[prost(enumeration = "installation_state::Stage", tag = "1")]
    pub stage: i32,
    /// Output only. Message of what the user should do next to continue the
    /// installation. Empty string if the installation is already complete.
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    /// Output only. Link to follow for next action. Empty string if the
    /// installation is already complete.
    #[prost(string, tag = "3")]
    pub action_uri: ::prost::alloc::string::String,
}
/// Nested message and enum types in `InstallationState`.
pub mod installation_state {
    /// Stage of the installation process.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Stage {
        /// No stage specified.
        Unspecified = 0,
        /// Only for GitHub Enterprise. An App creation has been requested.
        /// The user needs to confirm the creation in their GitHub enterprise host.
        PendingCreateApp = 1,
        /// User needs to authorize the GitHub (or Enterprise) App via OAuth.
        PendingUserOauth = 2,
        /// User needs to follow the link to install the GitHub (or Enterprise) App.
        PendingInstallApp = 3,
        /// Installation process has been completed.
        Complete = 10,
    }
    impl Stage {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "STAGE_UNSPECIFIED",
                Self::PendingCreateApp => "PENDING_CREATE_APP",
                Self::PendingUserOauth => "PENDING_USER_OAUTH",
                Self::PendingInstallApp => "PENDING_INSTALL_APP",
                Self::Complete => "COMPLETE",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "STAGE_UNSPECIFIED" => Some(Self::Unspecified),
                "PENDING_CREATE_APP" => Some(Self::PendingCreateApp),
                "PENDING_USER_OAUTH" => Some(Self::PendingUserOauth),
                "PENDING_INSTALL_APP" => Some(Self::PendingInstallApp),
                "COMPLETE" => Some(Self::Complete),
                _ => None,
            }
        }
    }
}
/// Configuration for connections to github.com.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GitHubConfig {
    /// Required. Immutable. The GitHub Application that was installed to the
    /// GitHub user or organization.
    #[prost(enumeration = "git_hub_config::GitHubApp", tag = "1")]
    pub github_app: i32,
    /// Optional. OAuth credential of the account that authorized the GitHub App.
    /// It is recommended to use a robot account instead of a human user account.
    /// The OAuth token must be tied to the GitHub App of this config.
    #[prost(message, optional, tag = "2")]
    pub authorizer_credential: ::core::option::Option<OAuthCredential>,
    /// Optional. GitHub App installation id.
    #[prost(int64, tag = "3")]
    pub app_installation_id: i64,
    /// Output only. The URI to navigate to in order to manage the installation
    /// associated with this GitHubConfig.
    #[prost(string, tag = "4")]
    pub installation_uri: ::prost::alloc::string::String,
}
/// Nested message and enum types in `GitHubConfig`.
pub mod git_hub_config {
    /// Represents the various GitHub Applications that can be installed to a
    /// GitHub user or organization and used with Developer Connect.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum GitHubApp {
        /// GitHub App not specified.
        Unspecified = 0,
        /// The Developer Connect GitHub Application.
        DeveloperConnect = 1,
        /// The Firebase GitHub Application.
        Firebase = 2,
    }
    impl GitHubApp {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "GIT_HUB_APP_UNSPECIFIED",
                Self::DeveloperConnect => "DEVELOPER_CONNECT",
                Self::Firebase => "FIREBASE",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "GIT_HUB_APP_UNSPECIFIED" => Some(Self::Unspecified),
                "DEVELOPER_CONNECT" => Some(Self::DeveloperConnect),
                "FIREBASE" => Some(Self::Firebase),
                _ => None,
            }
        }
    }
}
/// Configuration for connections to an instance of GitHub Enterprise.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GitHubEnterpriseConfig {
    /// Required. The URI of the GitHub Enterprise host this connection is for.
    #[prost(string, tag = "1")]
    pub host_uri: ::prost::alloc::string::String,
    /// Optional. ID of the GitHub App created from the manifest.
    #[prost(int64, tag = "2")]
    pub app_id: i64,
    /// Output only. The URL-friendly name of the GitHub App.
    #[prost(string, tag = "3")]
    pub app_slug: ::prost::alloc::string::String,
    /// Optional. SecretManager resource containing the private key of the GitHub
    /// App, formatted as `projects/*/secrets/*/versions/*`.
    #[prost(string, tag = "4")]
    pub private_key_secret_version: ::prost::alloc::string::String,
    /// Optional. SecretManager resource containing the webhook secret of the
    /// GitHub App, formatted as `projects/*/secrets/*/versions/*`.
    #[prost(string, tag = "5")]
    pub webhook_secret_secret_version: ::prost::alloc::string::String,
    /// Optional. ID of the installation of the GitHub App.
    #[prost(int64, tag = "8")]
    pub app_installation_id: i64,
    /// Output only. The URI to navigate to in order to manage the installation
    /// associated with this GitHubEnterpriseConfig.
    #[prost(string, tag = "9")]
    pub installation_uri: ::prost::alloc::string::String,
    /// Optional. Configuration for using Service Directory to privately connect to
    /// a GitHub Enterprise server. This should only be set if the GitHub
    /// Enterprise server is hosted on-premises and not reachable by public
    /// internet. If this field is left empty, calls to the GitHub Enterprise
    /// server will be made over the public internet.
    #[prost(message, optional, tag = "10")]
    pub service_directory_config: ::core::option::Option<ServiceDirectoryConfig>,
    /// Output only. GitHub Enterprise version installed at the host_uri.
    #[prost(string, tag = "12")]
    pub server_version: ::prost::alloc::string::String,
    /// Optional. SSL certificate to use for requests to GitHub Enterprise.
    #[prost(string, tag = "14")]
    pub ssl_ca_certificate: ::prost::alloc::string::String,
}
/// ServiceDirectoryConfig represents Service Directory configuration for a
/// connection.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ServiceDirectoryConfig {
    /// Required. The Service Directory service name.
    /// Format:
    /// projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
    #[prost(string, tag = "1")]
    pub service: ::prost::alloc::string::String,
}
/// Represents an OAuth token of the account that authorized the Connection,
/// and associated metadata.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct OAuthCredential {
    /// Required. A SecretManager resource containing the OAuth token that
    /// authorizes the connection. Format: `projects/*/secrets/*/versions/*`.
    #[prost(string, tag = "1")]
    pub oauth_token_secret_version: ::prost::alloc::string::String,
    /// Output only. The username associated with this token.
    #[prost(string, tag = "2")]
    pub username: ::prost::alloc::string::String,
}
/// Configuration for connections to gitlab.com.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GitLabConfig {
    /// Required. Immutable. SecretManager resource containing the webhook secret
    /// of a GitLab project, formatted as `projects/*/secrets/*/versions/*`. This
    /// is used to validate webhooks.
    #[prost(string, tag = "1")]
    pub webhook_secret_secret_version: ::prost::alloc::string::String,
    /// Required. A GitLab personal access token with the minimum `read_api` scope
    /// access and a minimum role of `reporter`. The GitLab Projects visible to
    /// this Personal Access Token will control which Projects Developer Connect
    /// has access to.
    #[prost(message, optional, tag = "2")]
    pub read_authorizer_credential: ::core::option::Option<UserCredential>,
    /// Required. A GitLab personal access token with the minimum `api` scope
    /// access and a minimum role of `maintainer`. The GitLab Projects visible to
    /// this Personal Access Token will control which Projects Developer Connect
    /// has access to.
    #[prost(message, optional, tag = "3")]
    pub authorizer_credential: ::core::option::Option<UserCredential>,
}
/// Represents a personal access token that authorized the Connection,
/// and associated metadata.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct UserCredential {
    /// Required. A SecretManager resource containing the user token that
    /// authorizes the Developer Connect connection. Format:
    /// `projects/*/secrets/*/versions/*`.
    #[prost(string, tag = "1")]
    pub user_token_secret_version: ::prost::alloc::string::String,
    /// Output only. The username associated with this token.
    #[prost(string, tag = "2")]
    pub username: ::prost::alloc::string::String,
}
/// Configuration for connections to an instance of GitLab Enterprise.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GitLabEnterpriseConfig {
    /// Required. The URI of the GitLab Enterprise host this connection is for.
    #[prost(string, tag = "1")]
    pub host_uri: ::prost::alloc::string::String,
    /// Required. Immutable. SecretManager resource containing the webhook secret
    /// of a GitLab project, formatted as `projects/*/secrets/*/versions/*`. This
    /// is used to validate webhooks.
    #[prost(string, tag = "2")]
    pub webhook_secret_secret_version: ::prost::alloc::string::String,
    /// Required. A GitLab personal access token with the minimum `read_api` scope
    /// access and a minimum role of `reporter`. The GitLab Projects visible to
    /// this Personal Access Token will control which Projects Developer Connect
    /// has access to.
    #[prost(message, optional, tag = "3")]
    pub read_authorizer_credential: ::core::option::Option<UserCredential>,
    /// Required. A GitLab personal access token with the minimum `api` scope
    /// access and a minimum role of `maintainer`. The GitLab Projects visible to
    /// this Personal Access Token will control which Projects Developer Connect
    /// has access to.
    #[prost(message, optional, tag = "4")]
    pub authorizer_credential: ::core::option::Option<UserCredential>,
    /// Optional. Configuration for using Service Directory to privately connect to
    /// a GitLab Enterprise instance. This should only be set if the GitLab
    /// Enterprise server is hosted on-premises and not reachable by public
    /// internet. If this field is left empty, calls to the GitLab Enterprise
    /// server will be made over the public internet.
    #[prost(message, optional, tag = "5")]
    pub service_directory_config: ::core::option::Option<ServiceDirectoryConfig>,
    /// Optional. SSL Certificate Authority certificate to use for requests to
    /// GitLab Enterprise instance.
    #[prost(string, tag = "6")]
    pub ssl_ca_certificate: ::prost::alloc::string::String,
    /// Output only. Version of the GitLab Enterprise server running on the
    /// `host_uri`.
    #[prost(string, tag = "7")]
    pub server_version: ::prost::alloc::string::String,
}
/// Configuration for connections to an instance of Bitbucket Data Center.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct BitbucketDataCenterConfig {
    /// Required. The URI of the Bitbucket Data Center host this connection is for.
    #[prost(string, tag = "1")]
    pub host_uri: ::prost::alloc::string::String,
    /// Required. Immutable. SecretManager resource containing the webhook secret
    /// used to verify webhook events, formatted as
    /// `projects/*/secrets/*/versions/*`. This is used to validate webhooks.
    #[prost(string, tag = "2")]
    pub webhook_secret_secret_version: ::prost::alloc::string::String,
    /// Required. An http access token with the minimum `Repository read` access.
    /// It's recommended to use a system account to generate the credentials.
    #[prost(message, optional, tag = "3")]
    pub read_authorizer_credential: ::core::option::Option<UserCredential>,
    /// Required. An http access token with the minimum `Repository admin` scope
    /// access. This is needed to create webhooks. It's recommended to use a system
    /// account to generate these credentials.
    #[prost(message, optional, tag = "4")]
    pub authorizer_credential: ::core::option::Option<UserCredential>,
    /// Optional. Configuration for using Service Directory to privately connect to
    /// a Bitbucket Data Center instance. This should only be set if the Bitbucket
    /// Data Center is hosted on-premises and not reachable by public internet. If
    /// this field is left empty, calls to the Bitbucket Data Center will be made
    /// over the public internet.
    #[prost(message, optional, tag = "5")]
    pub service_directory_config: ::core::option::Option<ServiceDirectoryConfig>,
    /// Optional. SSL certificate authority to trust when making requests to
    /// Bitbucket Data Center.
    #[prost(string, tag = "6")]
    pub ssl_ca_certificate: ::prost::alloc::string::String,
    /// Output only. Version of the Bitbucket Data Center server running on the
    /// `host_uri`.
    #[prost(string, tag = "7")]
    pub server_version: ::prost::alloc::string::String,
}
/// Configuration for connections to an instance of Bitbucket Cloud.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct BitbucketCloudConfig {
    /// Required. The Bitbucket Cloud Workspace ID to be connected to Google Cloud
    /// Platform.
    #[prost(string, tag = "1")]
    pub workspace: ::prost::alloc::string::String,
    /// Required. Immutable. SecretManager resource containing the webhook secret
    /// used to verify webhook events, formatted as
    /// `projects/*/secrets/*/versions/*`. This is used to validate and create
    /// webhooks.
    #[prost(string, tag = "2")]
    pub webhook_secret_secret_version: ::prost::alloc::string::String,
    /// Required. An access token with the minimum `repository` access.
    /// It can either be a workspace, project or repository access token.
    /// It's recommended to use a system account to generate the credentials.
    #[prost(message, optional, tag = "3")]
    pub read_authorizer_credential: ::core::option::Option<UserCredential>,
    /// Required. An access token with the minimum `repository`, `pullrequest` and
    /// `webhook` scope access. It can either be a workspace, project or repository
    /// access token. This is needed to create webhooks. It's recommended to use a
    /// system account to generate these credentials.
    #[prost(message, optional, tag = "4")]
    pub authorizer_credential: ::core::option::Option<UserCredential>,
}
/// Message for requesting list of Connections
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ListConnectionsRequest {
    /// Required. Parent value for ListConnectionsRequest
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Optional. Requested page size. Server may return fewer items than
    /// requested. If unspecified, server will pick an appropriate default.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// Optional. A token identifying a page of results the server should return.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// Optional. Filtering results
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
    /// Optional. Hint for how to order the results
    #[prost(string, tag = "5")]
    pub order_by: ::prost::alloc::string::String,
}
/// Message for response to listing Connections
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListConnectionsResponse {
    /// The list of Connection
    #[prost(message, repeated, tag = "1")]
    pub connections: ::prost::alloc::vec::Vec<Connection>,
    /// A token identifying a page of results the server should return.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    /// Locations that could not be reached.
    #[prost(string, repeated, tag = "3")]
    pub unreachable: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Message for getting a Connection
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetConnectionRequest {
    /// Required. Name of the resource
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Message for creating a Connection
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateConnectionRequest {
    /// Required. Value for parent.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Required. Id of the requesting object
    /// If auto-generating Id server-side, remove this field and
    /// connection_id from the method_signature of Create RPC
    #[prost(string, tag = "2")]
    pub connection_id: ::prost::alloc::string::String,
    /// Required. The resource being created
    #[prost(message, optional, tag = "3")]
    pub connection: ::core::option::Option<Connection>,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "4")]
    pub request_id: ::prost::alloc::string::String,
    /// Optional. If set, validate the request, but do not actually post it.
    #[prost(bool, tag = "5")]
    pub validate_only: bool,
}
/// Message for updating a Connection
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateConnectionRequest {
    /// Required. Field mask is used to specify the fields to be overwritten in the
    /// Connection resource by the update.
    /// The fields specified in the update_mask are relative to the resource, not
    /// the full request. A field will be overwritten if it is in the mask. If the
    /// user does not provide a mask then all fields will be overwritten.
    #[prost(message, optional, tag = "1")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
    /// Required. The resource being updated
    #[prost(message, optional, tag = "2")]
    pub connection: ::core::option::Option<Connection>,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "3")]
    pub request_id: ::prost::alloc::string::String,
    /// Optional. If set to true, and the connection is not found a new connection
    /// will be created. In this situation `update_mask` is ignored.
    /// The creation will succeed only if the input connection has all the
    /// necessary information (e.g a github_config with both  user_oauth_token and
    /// installation_id properties).
    #[prost(bool, tag = "4")]
    pub allow_missing: bool,
    /// Optional. If set, validate the request, but do not actually post it.
    #[prost(bool, tag = "5")]
    pub validate_only: bool,
}
/// Message for deleting a Connection
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DeleteConnectionRequest {
    /// Required. Name of the resource
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "2")]
    pub request_id: ::prost::alloc::string::String,
    /// Optional. If set, validate the request, but do not actually post it.
    #[prost(bool, tag = "3")]
    pub validate_only: bool,
    /// Optional. The current etag of the Connection.
    /// If an etag is provided and does not match the current etag of the
    /// Connection, deletion will be blocked and an ABORTED error will be returned.
    #[prost(string, tag = "4")]
    pub etag: ::prost::alloc::string::String,
}
/// Message for requesting list of AccountConnectors
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ListAccountConnectorsRequest {
    /// Required. Parent value for ListAccountConnectorsRequest
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Optional. Requested page size. Server may return fewer items than
    /// requested. If unspecified, server will pick an appropriate default.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// Optional. A token identifying a page of results the server should return.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// Optional. Filtering results
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
    /// Optional. Hint for how to order the results
    #[prost(string, tag = "5")]
    pub order_by: ::prost::alloc::string::String,
}
/// Message for response to listing AccountConnectors
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListAccountConnectorsResponse {
    /// The list of AccountConnectors
    #[prost(message, repeated, tag = "1")]
    pub account_connectors: ::prost::alloc::vec::Vec<AccountConnector>,
    /// A token identifying a page of results the server should return.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    /// Locations that could not be reached.
    #[prost(string, repeated, tag = "3")]
    pub unreachable: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Message for getting a AccountConnector
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetAccountConnectorRequest {
    /// Required. Name of the resource
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateAccountConnectorRequest {
    /// Required. Location resource name as the account_connector’s parent.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Required. The ID to use for the AccountConnector, which will become the
    /// final component of the AccountConnector's resource name. Its format should
    /// adhere to <https://google.aip.dev/122#resource-id-segments> Names must be
    /// unique per-project per-location.
    #[prost(string, tag = "2")]
    pub account_connector_id: ::prost::alloc::string::String,
    /// Required. The AccountConnector to create.
    #[prost(message, optional, tag = "3")]
    pub account_connector: ::core::option::Option<AccountConnector>,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "4")]
    pub request_id: ::prost::alloc::string::String,
    /// Optional. If set, validate the request, but do not actually post it.
    #[prost(bool, tag = "5")]
    pub validate_only: bool,
}
/// Message for updating a AccountConnector
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateAccountConnectorRequest {
    /// Optional. The list of fields to be updated.
    #[prost(message, optional, tag = "1")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
    /// Required. The AccountConnector to update.
    #[prost(message, optional, tag = "2")]
    pub account_connector: ::core::option::Option<AccountConnector>,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "3")]
    pub request_id: ::prost::alloc::string::String,
    /// Optional. If set to true, and the accountConnector is not found a new
    /// accountConnector will be created. In this situation `update_mask` is
    /// ignored. The creation will succeed only if the input accountConnector has
    /// all the necessary
    #[prost(bool, tag = "4")]
    pub allow_missing: bool,
    /// Optional. If set, validate the request, but do not actually post it.
    #[prost(bool, tag = "5")]
    pub validate_only: bool,
}
/// Message for deleting a AccountConnector
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DeleteAccountConnectorRequest {
    /// Required. Name of the resource
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "2")]
    pub request_id: ::prost::alloc::string::String,
    /// Optional. If set, validate the request, but do not actually post it.
    #[prost(bool, tag = "3")]
    pub validate_only: bool,
    /// Optional. The current etag of the AccountConnectorn.
    /// If an etag is provided and does not match the current etag of the
    /// AccountConnector, deletion will be blocked and an ABORTED error will be
    /// returned.
    #[prost(string, tag = "4")]
    pub etag: ::prost::alloc::string::String,
    /// Optional. If set to true, any Users from this AccountConnector will also
    /// be deleted. (Otherwise, the request will only work if the AccountConnector
    /// has no Users.)
    #[prost(bool, tag = "5")]
    pub force: bool,
}
/// Message for deleting a User
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DeleteUserRequest {
    /// Required. Name of the resource
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "2")]
    pub request_id: ::prost::alloc::string::String,
    /// Optional. If set, validate the request, but do not actually post it.
    #[prost(bool, tag = "3")]
    pub validate_only: bool,
    /// Optional. This checksum is computed by the server based on the value of
    /// other fields, and may be sent on update and delete requests to ensure the
    /// client has an up-to-date value before proceeding.
    #[prost(string, tag = "4")]
    pub etag: ::prost::alloc::string::String,
}
/// Represents the metadata of the long-running operation.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct OperationMetadata {
    /// Output only. The time the operation was created.
    #[prost(message, optional, tag = "1")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. The time the operation finished running.
    #[prost(message, optional, tag = "2")]
    pub end_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. Server-defined resource path for the target of the operation.
    #[prost(string, tag = "3")]
    pub target: ::prost::alloc::string::String,
    /// Output only. Name of the verb executed by the operation.
    #[prost(string, tag = "4")]
    pub verb: ::prost::alloc::string::String,
    /// Output only. Human-readable status of the operation, if any.
    #[prost(string, tag = "5")]
    pub status_message: ::prost::alloc::string::String,
    /// Output only. Identifies whether the user has requested cancellation
    /// of the operation. Operations that have been cancelled successfully
    /// have
    /// \[google.longrunning.Operation.error\]\[google.longrunning.Operation.error\]
    /// value with a \[google.rpc.Status.code\]\[google.rpc.Status.code\] of 1,
    /// corresponding to `Code.CANCELLED`.
    #[prost(bool, tag = "6")]
    pub requested_cancellation: bool,
    /// Output only. API version used to start the operation.
    #[prost(string, tag = "7")]
    pub api_version: ::prost::alloc::string::String,
}
/// Message for fetching a User of the user themselves.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FetchSelfRequest {
    /// Required. Name of the AccountConnector resource
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Message for deleting a User of the user themselves.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DeleteSelfRequest {
    /// Required. Name of the AccountConnector resource
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Message for fetching an OAuth access token.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FetchAccessTokenRequest {
    /// Required. The resource name of the AccountConnector in the format
    /// `projects/*/locations/*/accountConnectors/*`.
    #[prost(string, tag = "1")]
    pub account_connector: ::prost::alloc::string::String,
}
/// Message for responding to getting an OAuth access token.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FetchAccessTokenResponse {
    /// The token content.
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
    /// Expiration timestamp. Can be empty if unknown or non-expiring.
    #[prost(message, optional, tag = "2")]
    pub expiration_time: ::core::option::Option<::prost_types::Timestamp>,
    /// The scopes of the access token.
    #[prost(string, repeated, tag = "3")]
    pub scopes: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// The error resulted from exchanging OAuth tokens from the service provider.
    #[prost(message, optional, tag = "4")]
    pub exchange_error: ::core::option::Option<ExchangeError>,
}
/// Message for representing an error from exchanging OAuth tokens.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ExchangeError {
    /// <https://datatracker.ietf.org/doc/html/rfc6749#section-5.2> - error
    #[prost(string, tag = "1")]
    pub code: ::prost::alloc::string::String,
    /// <https://datatracker.ietf.org/doc/html/rfc6749#section-5.2> -
    /// error_description
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
}
/// Message describing the GitRepositoryLink object
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GitRepositoryLink {
    /// Identifier. Resource name of the repository, in the format
    /// `projects/*/locations/*/connections/*/gitRepositoryLinks/*`.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Required. Git Clone URI.
    #[prost(string, tag = "2")]
    pub clone_uri: ::prost::alloc::string::String,
    /// Output only. \[Output only\] Create timestamp
    #[prost(message, optional, tag = "3")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. \[Output only\] Update timestamp
    #[prost(message, optional, tag = "4")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. \[Output only\] Delete timestamp
    #[prost(message, optional, tag = "5")]
    pub delete_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Optional. Labels as key value pairs
    #[prost(map = "string, string", tag = "6")]
    pub labels: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Optional. This checksum is computed by the server based on the value of
    /// other fields, and may be sent on update and delete requests to ensure the
    /// client has an up-to-date value before proceeding.
    #[prost(string, tag = "7")]
    pub etag: ::prost::alloc::string::String,
    /// Output only. Set to true when the connection is being set up or updated in
    /// the background.
    #[prost(bool, tag = "8")]
    pub reconciling: bool,
    /// Optional. Allows clients to store small amounts of arbitrary data.
    #[prost(map = "string, string", tag = "9")]
    pub annotations: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Output only. A system-assigned unique identifier for the GitRepositoryLink.
    #[prost(string, tag = "10")]
    pub uid: ::prost::alloc::string::String,
    /// Output only. External ID of the webhook created for the repository.
    #[prost(string, tag = "11")]
    pub webhook_id: ::prost::alloc::string::String,
    /// Output only. URI to access the linked repository through the Git Proxy.
    /// This field is only populated if the git proxy is enabled for the
    /// connection.
    #[prost(string, tag = "12")]
    pub git_proxy_uri: ::prost::alloc::string::String,
}
/// Message for creating a GitRepositoryLink
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateGitRepositoryLinkRequest {
    /// Required. Value for parent.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Required. The resource being created
    #[prost(message, optional, tag = "2")]
    pub git_repository_link: ::core::option::Option<GitRepositoryLink>,
    /// Required. The ID to use for the repository, which will become the final
    /// component of the repository's resource name. This ID should be unique in
    /// the connection. Allows alphanumeric characters and any of
    /// -.\_~%!$&'()\*+,;=@.
    #[prost(string, tag = "3")]
    pub git_repository_link_id: ::prost::alloc::string::String,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "4")]
    pub request_id: ::prost::alloc::string::String,
    /// Optional. If set, validate the request, but do not actually post it.
    #[prost(bool, tag = "5")]
    pub validate_only: bool,
}
/// Message for deleting a GitRepositoryLink
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DeleteGitRepositoryLinkRequest {
    /// Required. Name of the resource
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "2")]
    pub request_id: ::prost::alloc::string::String,
    /// Optional. If set, validate the request, but do not actually post it.
    #[prost(bool, tag = "3")]
    pub validate_only: bool,
    /// Optional. This checksum is computed by the server based on the value of
    /// other fields, and may be sent on update and delete requests to ensure the
    /// client has an up-to-date value before proceeding.
    #[prost(string, tag = "4")]
    pub etag: ::prost::alloc::string::String,
}
/// Message for requesting a list of GitRepositoryLinks
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ListGitRepositoryLinksRequest {
    /// Required. Parent value for ListGitRepositoryLinksRequest
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Optional. Requested page size. Server may return fewer items than
    /// requested. If unspecified, server will pick an appropriate default.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// Optional. A token identifying a page of results the server should return.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// Optional. Filtering results
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
    /// Optional. Hint for how to order the results
    #[prost(string, tag = "5")]
    pub order_by: ::prost::alloc::string::String,
}
/// Message for response to listing GitRepositoryLinks
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListGitRepositoryLinksResponse {
    /// The list of GitRepositoryLinks
    #[prost(message, repeated, tag = "1")]
    pub git_repository_links: ::prost::alloc::vec::Vec<GitRepositoryLink>,
    /// A token identifying a page of results the server should return.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    /// Locations that could not be reached.
    #[prost(string, repeated, tag = "3")]
    pub unreachable: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Message for getting a GitRepositoryLink
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetGitRepositoryLinkRequest {
    /// Required. Name of the resource
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Message for fetching SCM read/write token.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FetchReadWriteTokenRequest {
    /// Required. The resource name of the gitRepositoryLink in the format
    /// `projects/*/locations/*/connections/*/gitRepositoryLinks/*`.
    #[prost(string, tag = "1")]
    pub git_repository_link: ::prost::alloc::string::String,
}
/// Message for fetching SCM read token.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FetchReadTokenRequest {
    /// Required. The resource name of the gitRepositoryLink in the format
    /// `projects/*/locations/*/connections/*/gitRepositoryLinks/*`.
    #[prost(string, tag = "1")]
    pub git_repository_link: ::prost::alloc::string::String,
}
/// Message for responding to get read token.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FetchReadTokenResponse {
    /// The token content.
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
    /// Expiration timestamp. Can be empty if unknown or non-expiring.
    #[prost(message, optional, tag = "2")]
    pub expiration_time: ::core::option::Option<::prost_types::Timestamp>,
    /// The git_username to specify when making a git clone with the
    /// token. For example, for GitHub GitRepositoryLinks, this would be
    /// "x-access-token"
    #[prost(string, tag = "3")]
    pub git_username: ::prost::alloc::string::String,
}
/// Message for responding to get read/write token.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FetchReadWriteTokenResponse {
    /// The token content.
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
    /// Expiration timestamp. Can be empty if unknown or non-expiring.
    #[prost(message, optional, tag = "2")]
    pub expiration_time: ::core::option::Option<::prost_types::Timestamp>,
    /// The git_username to specify when making a git clone with the
    /// token. For example, for GitHub GitRepositoryLinks, this would be
    /// "x-access-token"
    #[prost(string, tag = "3")]
    pub git_username: ::prost::alloc::string::String,
}
/// Request message for FetchLinkableGitRepositoriesRequest.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FetchLinkableGitRepositoriesRequest {
    /// Required. The name of the Connection.
    /// Format: `projects/*/locations/*/connections/*`.
    #[prost(string, tag = "1")]
    pub connection: ::prost::alloc::string::String,
    /// Optional. Number of results to return in the list. Defaults to 20.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// Optional. Page start.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
}
/// Response message for FetchLinkableGitRepositories.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchLinkableGitRepositoriesResponse {
    /// The git repositories that can be linked to the connection.
    #[prost(message, repeated, tag = "1")]
    pub linkable_git_repositories: ::prost::alloc::vec::Vec<LinkableGitRepository>,
    /// A token identifying a page of results the server should return.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
/// LinkableGitRepository represents a git repository that can be linked to a
/// connection.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct LinkableGitRepository {
    /// The clone uri of the repository.
    #[prost(string, tag = "1")]
    pub clone_uri: ::prost::alloc::string::String,
}
/// Request for fetching github installations.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FetchGitHubInstallationsRequest {
    /// Required. The resource name of the connection in the format
    /// `projects/*/locations/*/connections/*`.
    #[prost(string, tag = "1")]
    pub connection: ::prost::alloc::string::String,
}
/// Response of fetching github installations.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchGitHubInstallationsResponse {
    /// List of installations available to the OAuth user (for github.com)
    /// or all the installations (for GitHub enterprise).
    #[prost(message, repeated, tag = "1")]
    pub installations: ::prost::alloc::vec::Vec<
        fetch_git_hub_installations_response::Installation,
    >,
}
/// Nested message and enum types in `FetchGitHubInstallationsResponse`.
pub mod fetch_git_hub_installations_response {
    /// Represents an installation of the GitHub App.
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct Installation {
        /// ID of the installation in GitHub.
        #[prost(int64, tag = "1")]
        pub id: i64,
        /// Name of the GitHub user or organization that owns this installation.
        #[prost(string, tag = "2")]
        pub name: ::prost::alloc::string::String,
        /// Either "user" or "organization".
        #[prost(string, tag = "3")]
        pub r#type: ::prost::alloc::string::String,
    }
}
/// Request for fetching git refs.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FetchGitRefsRequest {
    /// Required. The resource name of GitRepositoryLink in the format
    /// `projects/*/locations/*/connections/*/gitRepositoryLinks/*`.
    #[prost(string, tag = "1")]
    pub git_repository_link: ::prost::alloc::string::String,
    /// Required. Type of refs to fetch.
    #[prost(enumeration = "fetch_git_refs_request::RefType", tag = "2")]
    pub ref_type: i32,
    /// Optional. Number of results to return in the list. Default to 20.
    #[prost(int32, tag = "4")]
    pub page_size: i32,
    /// Optional. Page start.
    #[prost(string, tag = "5")]
    pub page_token: ::prost::alloc::string::String,
}
/// Nested message and enum types in `FetchGitRefsRequest`.
pub mod fetch_git_refs_request {
    /// Type of refs.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum RefType {
        /// No type specified.
        Unspecified = 0,
        /// To fetch tags.
        Tag = 1,
        /// To fetch branches.
        Branch = 2,
    }
    impl RefType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "REF_TYPE_UNSPECIFIED",
                Self::Tag => "TAG",
                Self::Branch => "BRANCH",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "REF_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
                "TAG" => Some(Self::Tag),
                "BRANCH" => Some(Self::Branch),
                _ => None,
            }
        }
    }
}
/// Response for fetching git refs.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FetchGitRefsResponse {
    /// Name of the refs fetched.
    #[prost(string, repeated, tag = "1")]
    pub ref_names: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// A token identifying a page of results the server should return.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
/// AccountConnector encapsulates what a platform administrator needs to
/// configure for users to connect to the service providers, which includes,
/// among other fields, the OAuth client ID, client secret, and authorization and
/// token endpoints.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccountConnector {
    /// Identifier. The resource name of the accountConnector, in the format
    /// `projects/{project}/locations/{location}/accountConnectors/{account_connector_id}`.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Output only. The timestamp when the accountConnector was created.
    #[prost(message, optional, tag = "2")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. The timestamp when the accountConnector was updated.
    #[prost(message, optional, tag = "3")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Optional. Allows users to store small amounts of arbitrary data.
    #[prost(map = "string, string", tag = "6")]
    pub annotations: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Optional. This checksum is computed by the server based on the value of
    /// other fields, and may be sent on update and delete requests to ensure the
    /// client has an up-to-date value before proceeding.
    #[prost(string, tag = "7")]
    pub etag: ::prost::alloc::string::String,
    /// Optional. Labels as key value pairs
    #[prost(map = "string, string", tag = "8")]
    pub labels: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Output only. Start OAuth flow by clicking on this URL.
    #[prost(string, tag = "10")]
    pub oauth_start_uri: ::prost::alloc::string::String,
    /// The AccountConnector config.
    #[prost(oneof = "account_connector::AccountConnectorConfig", tags = "5")]
    pub account_connector_config: ::core::option::Option<
        account_connector::AccountConnectorConfig,
    >,
}
/// Nested message and enum types in `AccountConnector`.
pub mod account_connector {
    /// The AccountConnector config.
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Oneof)]
    pub enum AccountConnectorConfig {
        /// Provider OAuth config.
        #[prost(message, tag = "5")]
        ProviderOauthConfig(super::ProviderOAuthConfig),
    }
}
/// User represents a user connected to the service providers through
/// a AccountConnector.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct User {
    /// Identifier. Resource name of the user, in the format
    /// `projects/*/locations/*/accountConnectors/*/users/*`.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Output only. Developer Connect automatically converts user identity
    /// to some human readable description, e.g., email address.
    #[prost(string, tag = "2")]
    pub display_name: ::prost::alloc::string::String,
    /// Output only. The timestamp when the user was created.
    #[prost(message, optional, tag = "3")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. The timestamp when the token was last requested.
    #[prost(message, optional, tag = "4")]
    pub last_token_request_time: ::core::option::Option<::prost_types::Timestamp>,
}
/// ProviderOAuthConfig is the OAuth config for a provider.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ProviderOAuthConfig {
    /// Required. User selected scopes to apply to the Oauth config
    /// In the event of changing scopes, user records under AccountConnector will
    /// be deleted and users will re-auth again.
    #[prost(string, repeated, tag = "2")]
    pub scopes: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// OAuth Provider ID. It could be Developer Connect owned or providers
    /// provided.
    #[prost(oneof = "provider_o_auth_config::OauthProviderId", tags = "1")]
    pub oauth_provider_id: ::core::option::Option<
        provider_o_auth_config::OauthProviderId,
    >,
}
/// Nested message and enum types in `ProviderOAuthConfig`.
pub mod provider_o_auth_config {
    /// OAuth Provider ID. It could be Developer Connect owned or providers
    /// provided.
    #[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Oneof)]
    pub enum OauthProviderId {
        /// Immutable. Developer Connect provided OAuth.
        #[prost(enumeration = "super::SystemProvider", tag = "1")]
        SystemProviderId(i32),
    }
}
/// SystemProvider is a list of providers that are owned by Developer Connect.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SystemProvider {
    /// No system provider specified.
    Unspecified = 0,
    /// GitHub provider.
    /// Scopes can be found at
    /// <https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/scopes-for-oauth-apps#available-scopes>
    Github = 1,
    /// GitLab provider.
    /// Scopes can be found at
    /// <https://docs.gitlab.com/user/profile/personal_access_tokens/#personal-access-token-scopes>
    Gitlab = 2,
    /// Google provider.
    /// Recommended scopes:
    /// "<https://www.googleapis.com/auth/drive.readonly",>
    /// "<https://www.googleapis.com/auth/documents.readonly">
    Google = 3,
    /// Sentry provider.
    /// Scopes can be found at
    /// <https://docs.sentry.io/api/permissions/>
    Sentry = 4,
    /// Rovo provider.
    /// Must select the "rovo" scope.
    Rovo = 5,
    /// New Relic provider.
    /// No scopes are allowed.
    NewRelic = 6,
    /// Datastax provider.
    /// No scopes are allowed.
    Datastax = 7,
    /// Dynatrace provider.
    Dynatrace = 8,
}
impl SystemProvider {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "SYSTEM_PROVIDER_UNSPECIFIED",
            Self::Github => "GITHUB",
            Self::Gitlab => "GITLAB",
            Self::Google => "GOOGLE",
            Self::Sentry => "SENTRY",
            Self::Rovo => "ROVO",
            Self::NewRelic => "NEW_RELIC",
            Self::Datastax => "DATASTAX",
            Self::Dynatrace => "DYNATRACE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SYSTEM_PROVIDER_UNSPECIFIED" => Some(Self::Unspecified),
            "GITHUB" => Some(Self::Github),
            "GITLAB" => Some(Self::Gitlab),
            "GOOGLE" => Some(Self::Google),
            "SENTRY" => Some(Self::Sentry),
            "ROVO" => Some(Self::Rovo),
            "NEW_RELIC" => Some(Self::NewRelic),
            "DATASTAX" => Some(Self::Datastax),
            "DYNATRACE" => Some(Self::Dynatrace),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod developer_connect_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Service describing handlers for resources
    #[derive(Debug, Clone)]
    pub struct DeveloperConnectClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl DeveloperConnectClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> DeveloperConnectClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> DeveloperConnectClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            DeveloperConnectClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Lists Connections in a given project and location.
        pub async fn list_connections(
            &mut self,
            request: impl tonic::IntoRequest<super::ListConnectionsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListConnectionsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.DeveloperConnect/ListConnections",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.DeveloperConnect",
                        "ListConnections",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Gets details of a single Connection.
        pub async fn get_connection(
            &mut self,
            request: impl tonic::IntoRequest<super::GetConnectionRequest>,
        ) -> std::result::Result<tonic::Response<super::Connection>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.DeveloperConnect/GetConnection",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.DeveloperConnect",
                        "GetConnection",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Creates a new Connection in a given project and location.
        pub async fn create_connection(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateConnectionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.DeveloperConnect/CreateConnection",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.DeveloperConnect",
                        "CreateConnection",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Updates the parameters of a single Connection.
        pub async fn update_connection(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateConnectionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.DeveloperConnect/UpdateConnection",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.DeveloperConnect",
                        "UpdateConnection",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Deletes a single Connection.
        pub async fn delete_connection(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteConnectionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.DeveloperConnect/DeleteConnection",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.DeveloperConnect",
                        "DeleteConnection",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Creates a GitRepositoryLink. Upon linking a Git Repository, Developer
        /// Connect will configure the Git Repository to send webhook events to
        /// Developer Connect. Connections that use Firebase GitHub Application will
        /// have events forwarded to the Firebase service. All other Connections will
        /// have events forwarded to Cloud Build.
        pub async fn create_git_repository_link(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateGitRepositoryLinkRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.DeveloperConnect/CreateGitRepositoryLink",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.DeveloperConnect",
                        "CreateGitRepositoryLink",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Deletes a single GitRepositoryLink.
        pub async fn delete_git_repository_link(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteGitRepositoryLinkRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.DeveloperConnect/DeleteGitRepositoryLink",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.DeveloperConnect",
                        "DeleteGitRepositoryLink",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Lists GitRepositoryLinks in a given project, location, and connection.
        pub async fn list_git_repository_links(
            &mut self,
            request: impl tonic::IntoRequest<super::ListGitRepositoryLinksRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListGitRepositoryLinksResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.DeveloperConnect/ListGitRepositoryLinks",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.DeveloperConnect",
                        "ListGitRepositoryLinks",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Gets details of a single GitRepositoryLink.
        pub async fn get_git_repository_link(
            &mut self,
            request: impl tonic::IntoRequest<super::GetGitRepositoryLinkRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GitRepositoryLink>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.DeveloperConnect/GetGitRepositoryLink",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.DeveloperConnect",
                        "GetGitRepositoryLink",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Fetches read/write token of a given gitRepositoryLink.
        pub async fn fetch_read_write_token(
            &mut self,
            request: impl tonic::IntoRequest<super::FetchReadWriteTokenRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FetchReadWriteTokenResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.DeveloperConnect/FetchReadWriteToken",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.DeveloperConnect",
                        "FetchReadWriteToken",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Fetches read token of a given gitRepositoryLink.
        pub async fn fetch_read_token(
            &mut self,
            request: impl tonic::IntoRequest<super::FetchReadTokenRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FetchReadTokenResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.DeveloperConnect/FetchReadToken",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.DeveloperConnect",
                        "FetchReadToken",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// FetchLinkableGitRepositories returns a list of git repositories from an SCM
        /// that are available to be added to a Connection.
        pub async fn fetch_linkable_git_repositories(
            &mut self,
            request: impl tonic::IntoRequest<super::FetchLinkableGitRepositoriesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FetchLinkableGitRepositoriesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.DeveloperConnect/FetchLinkableGitRepositories",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.DeveloperConnect",
                        "FetchLinkableGitRepositories",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// FetchGitHubInstallations returns the list of GitHub Installations that
        /// are available to be added to a Connection.
        /// For github.com, only installations accessible to the authorizer token
        /// are returned. For GitHub Enterprise, all installations are returned.
        pub async fn fetch_git_hub_installations(
            &mut self,
            request: impl tonic::IntoRequest<super::FetchGitHubInstallationsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FetchGitHubInstallationsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.DeveloperConnect/FetchGitHubInstallations",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.DeveloperConnect",
                        "FetchGitHubInstallations",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Fetch the list of branches or tags for a given repository.
        pub async fn fetch_git_refs(
            &mut self,
            request: impl tonic::IntoRequest<super::FetchGitRefsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FetchGitRefsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.DeveloperConnect/FetchGitRefs",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.DeveloperConnect",
                        "FetchGitRefs",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Lists AccountConnectors in a given project and location.
        pub async fn list_account_connectors(
            &mut self,
            request: impl tonic::IntoRequest<super::ListAccountConnectorsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListAccountConnectorsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.DeveloperConnect/ListAccountConnectors",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.DeveloperConnect",
                        "ListAccountConnectors",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Gets details of a single AccountConnector.
        pub async fn get_account_connector(
            &mut self,
            request: impl tonic::IntoRequest<super::GetAccountConnectorRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AccountConnector>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.DeveloperConnect/GetAccountConnector",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.DeveloperConnect",
                        "GetAccountConnector",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Creates a new AccountConnector in a given project and location.
        pub async fn create_account_connector(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateAccountConnectorRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.DeveloperConnect/CreateAccountConnector",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.DeveloperConnect",
                        "CreateAccountConnector",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Updates the parameters of a single AccountConnector.
        pub async fn update_account_connector(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateAccountConnectorRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.DeveloperConnect/UpdateAccountConnector",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.DeveloperConnect",
                        "UpdateAccountConnector",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Deletes a single AccountConnector.
        pub async fn delete_account_connector(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteAccountConnectorRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.DeveloperConnect/DeleteAccountConnector",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.DeveloperConnect",
                        "DeleteAccountConnector",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Fetches OAuth access token based on end user credentials.
        pub async fn fetch_access_token(
            &mut self,
            request: impl tonic::IntoRequest<super::FetchAccessTokenRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FetchAccessTokenResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.DeveloperConnect/FetchAccessToken",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.DeveloperConnect",
                        "FetchAccessToken",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Lists Users in a given project, location, and account_connector.
        pub async fn list_users(
            &mut self,
            request: impl tonic::IntoRequest<super::ListUsersRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListUsersResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.DeveloperConnect/ListUsers",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.DeveloperConnect",
                        "ListUsers",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Deletes a single User.
        pub async fn delete_user(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteUserRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.DeveloperConnect/DeleteUser",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.DeveloperConnect",
                        "DeleteUser",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Fetch the User based on the user credentials.
        pub async fn fetch_self(
            &mut self,
            request: impl tonic::IntoRequest<super::FetchSelfRequest>,
        ) -> std::result::Result<tonic::Response<super::User>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.DeveloperConnect/FetchSelf",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.DeveloperConnect",
                        "FetchSelf",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Delete the User based on the user credentials.
        pub async fn delete_self(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteSelfRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.DeveloperConnect/DeleteSelf",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.DeveloperConnect",
                        "DeleteSelf",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// The InsightsConfig resource is the core configuration object to capture
/// events from your Software Development Lifecycle. It acts as the central hub
/// for managing how Developer connect understands your application, its runtime
/// environments, and the artifacts deployed within them.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InsightsConfig {
    /// Identifier. The name of the InsightsConfig.
    /// Format:
    /// projects/{project}/locations/{location}/insightsConfigs/{insightsConfig}
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Output only. \[Output only\] Create timestamp
    #[prost(message, optional, tag = "2")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. \[Output only\] Update timestamp
    #[prost(message, optional, tag = "3")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. The runtime configurations where the application is deployed.
    #[prost(message, repeated, tag = "5")]
    pub runtime_configs: ::prost::alloc::vec::Vec<RuntimeConfig>,
    /// Optional. The artifact configurations of the artifacts that are deployed.
    #[prost(message, repeated, tag = "6")]
    pub artifact_configs: ::prost::alloc::vec::Vec<ArtifactConfig>,
    /// Optional. Output only. The state of the InsightsConfig.
    #[prost(enumeration = "insights_config::State", tag = "7")]
    pub state: i32,
    /// Optional. User specified annotations. See
    /// <https://google.aip.dev/148#annotations> for more details such as format and
    /// size limitations.
    #[prost(map = "string, string", tag = "8")]
    pub annotations: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Optional. Set of labels associated with an InsightsConfig.
    #[prost(map = "string, string", tag = "9")]
    pub labels: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Output only. Reconciling (<https://google.aip.dev/128#reconciliation>).
    /// Set to true if the current state of InsightsConfig does not match the
    /// user's intended state, and the service is actively updating the resource to
    /// reconcile them. This can happen due to user-triggered updates or
    /// system actions like failover or maintenance.
    #[prost(bool, tag = "10")]
    pub reconciling: bool,
    /// Output only. Any errors that occurred while setting up the InsightsConfig.
    /// Each error will be in the format: `field_name: error_message`, e.g.
    /// GetAppHubApplication: Permission denied while getting App Hub
    /// application. Please grant permissions to the P4SA.
    #[prost(message, repeated, tag = "11")]
    pub errors: ::prost::alloc::vec::Vec<super::super::super::rpc::Status>,
    /// The context of the InsightsConfig.
    #[prost(oneof = "insights_config::InsightsConfigContext", tags = "4")]
    pub insights_config_context: ::core::option::Option<
        insights_config::InsightsConfigContext,
    >,
}
/// Nested message and enum types in `InsightsConfig`.
pub mod insights_config {
    /// The state of the InsightsConfig.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum State {
        /// No state specified.
        Unspecified = 0,
        /// The InsightsConfig is pending application discovery/runtime discovery.
        Pending = 5,
        /// The initial discovery process is complete.
        Complete = 3,
        /// The InsightsConfig is in an error state.
        Error = 4,
    }
    impl State {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "STATE_UNSPECIFIED",
                Self::Pending => "PENDING",
                Self::Complete => "COMPLETE",
                Self::Error => "ERROR",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "STATE_UNSPECIFIED" => Some(Self::Unspecified),
                "PENDING" => Some(Self::Pending),
                "COMPLETE" => Some(Self::Complete),
                "ERROR" => Some(Self::Error),
                _ => None,
            }
        }
    }
    /// The context of the InsightsConfig.
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Oneof)]
    pub enum InsightsConfigContext {
        /// Optional. The name of the App Hub Application.
        /// Format:
        /// projects/{project}/locations/{location}/applications/{application}
        #[prost(string, tag = "4")]
        AppHubApplication(::prost::alloc::string::String),
    }
}
/// RuntimeConfig represents the runtimes where the application is
/// deployed.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RuntimeConfig {
    /// Required. Immutable. The URI of the runtime configuration.
    /// For GKE, this is the cluster name.
    /// For Cloud Run, this is the service name.
    #[prost(string, tag = "1")]
    pub uri: ::prost::alloc::string::String,
    /// Output only. The state of the Runtime.
    #[prost(enumeration = "runtime_config::State", tag = "2")]
    pub state: i32,
    /// The type of the runtime.
    #[prost(oneof = "runtime_config::Runtime", tags = "3")]
    pub runtime: ::core::option::Option<runtime_config::Runtime>,
    /// Where the runtime is derived from.
    #[prost(oneof = "runtime_config::DerivedFrom", tags = "4")]
    pub derived_from: ::core::option::Option<runtime_config::DerivedFrom>,
}
/// Nested message and enum types in `RuntimeConfig`.
pub mod runtime_config {
    /// The state of the runtime in the InsightsConfig.
    /// Whether the runtime is linked to the InsightsConfig.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum State {
        /// No state specified.
        Unspecified = 0,
        /// The runtime configuration has been linked to the InsightsConfig.
        Linked = 1,
        /// The runtime configuration has been unlinked to the InsightsConfig.
        Unlinked = 2,
    }
    impl State {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "STATE_UNSPECIFIED",
                Self::Linked => "LINKED",
                Self::Unlinked => "UNLINKED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "STATE_UNSPECIFIED" => Some(Self::Unspecified),
                "LINKED" => Some(Self::Linked),
                "UNLINKED" => Some(Self::Unlinked),
                _ => None,
            }
        }
    }
    /// The type of the runtime.
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Oneof)]
    pub enum Runtime {
        /// Output only. Google Kubernetes Engine runtime.
        #[prost(message, tag = "3")]
        GkeWorkload(super::GkeWorkload),
    }
    /// Where the runtime is derived from.
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Oneof)]
    pub enum DerivedFrom {
        /// Output only. App Hub Workload.
        #[prost(message, tag = "4")]
        AppHubWorkload(super::AppHubWorkload),
    }
}
/// GKEWorkload represents the Google Kubernetes Engine runtime.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GkeWorkload {
    /// Required. Immutable. The name of the GKE cluster.
    /// Format:
    /// `projects/{project}/locations/{location}/clusters/{cluster}`.
    #[prost(string, tag = "1")]
    pub cluster: ::prost::alloc::string::String,
    /// Output only. The name of the GKE deployment.
    /// Format:
    /// `projects/{project}/locations/{location}/clusters/{cluster}/namespaces/{namespace}/deployments/{deployment}`.
    #[prost(string, tag = "2")]
    pub deployment: ::prost::alloc::string::String,
}
/// AppHubWorkload represents the App Hub Workload.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct AppHubWorkload {
    /// Required. Output only. Immutable. The name of the App Hub Workload.
    /// Format:
    /// `projects/{project}/locations/{location}/applications/{application}/workloads/{workload}`.
    #[prost(string, tag = "1")]
    pub workload: ::prost::alloc::string::String,
    /// Output only. The criticality of the App Hub Workload.
    #[prost(string, tag = "2")]
    pub criticality: ::prost::alloc::string::String,
    /// Output only. The environment of the App Hub Workload.
    #[prost(string, tag = "3")]
    pub environment: ::prost::alloc::string::String,
}
/// The artifact config of the artifact that is deployed.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ArtifactConfig {
    /// Required. Immutable. The URI of the artifact that is deployed.
    /// e.g. `us-docker.pkg.dev/my-project/my-repo/image`.
    /// The URI does not include the tag / digest because it captures a lineage of
    /// artifacts.
    #[prost(string, tag = "1")]
    pub uri: ::prost::alloc::string::String,
    /// The storage location of the artifact.
    #[prost(oneof = "artifact_config::ArtifactStorage", tags = "2")]
    pub artifact_storage: ::core::option::Option<artifact_config::ArtifactStorage>,
    /// The storage location of the artifact metadata.
    #[prost(oneof = "artifact_config::ArtifactMetadataStorage", tags = "3")]
    pub artifact_metadata_storage: ::core::option::Option<
        artifact_config::ArtifactMetadataStorage,
    >,
}
/// Nested message and enum types in `ArtifactConfig`.
pub mod artifact_config {
    /// The storage location of the artifact.
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Oneof)]
    pub enum ArtifactStorage {
        /// Optional. Set if the artifact is stored in Artifact regsitry.
        #[prost(message, tag = "2")]
        GoogleArtifactRegistry(super::GoogleArtifactRegistry),
    }
    /// The storage location of the artifact metadata.
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Oneof)]
    pub enum ArtifactMetadataStorage {
        /// Optional. Set if the artifact metadata is stored in Artifact analysis.
        #[prost(message, tag = "3")]
        GoogleArtifactAnalysis(super::GoogleArtifactAnalysis),
    }
}
/// Google Artifact Analysis configurations.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GoogleArtifactAnalysis {
    /// Required. The project id of the project where the provenance is stored.
    #[prost(string, tag = "1")]
    pub project_id: ::prost::alloc::string::String,
}
/// Google Artifact Registry configurations.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GoogleArtifactRegistry {
    /// Required. The host project of Artifact Registry.
    #[prost(string, tag = "1")]
    pub project_id: ::prost::alloc::string::String,
    /// Required. Immutable. The name of the artifact registry package.
    #[prost(string, tag = "2")]
    pub artifact_registry_package: ::prost::alloc::string::String,
}
/// Request for creating an InsightsConfig.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateInsightsConfigRequest {
    /// Required. Value for parent.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Required. ID of the requesting InsightsConfig.
    #[prost(string, tag = "2")]
    pub insights_config_id: ::prost::alloc::string::String,
    /// Required. The resource being created.
    #[prost(message, optional, tag = "3")]
    pub insights_config: ::core::option::Option<InsightsConfig>,
    /// Optional. If set, validate the request, but do not actually post it.
    #[prost(bool, tag = "4")]
    pub validate_only: bool,
}
/// Request for getting an InsightsConfig.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetInsightsConfigRequest {
    /// Required. Name of the resource.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Request for requesting list of InsightsConfigs.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ListInsightsConfigsRequest {
    /// Required. Parent value for ListInsightsConfigsRequest.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Optional. Requested page size. Server may return fewer items than
    /// requested. If unspecified, server will pick an appropriate default.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// Optional. A token identifying a page of results the server should return.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// Optional. Filtering results. See <https://google.aip.dev/160> for more
    /// details. Filter string, adhering to the rules in
    /// <https://google.aip.dev/160.> List only InsightsConfigs matching the filter.
    /// If filter is empty, all InsightsConfigs are listed.
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
    /// Optional. Hint for how to order the results.
    #[prost(string, tag = "5")]
    pub order_by: ::prost::alloc::string::String,
}
/// Request for response to listing InsightsConfigs.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListInsightsConfigsResponse {
    /// The list of InsightsConfigs.
    #[prost(message, repeated, tag = "1")]
    pub insights_configs: ::prost::alloc::vec::Vec<InsightsConfig>,
    /// A token identifying a page of results the server should return.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    /// Locations that could not be reached.
    #[prost(string, repeated, tag = "3")]
    pub unreachable: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Request for deleting an InsightsConfig.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DeleteInsightsConfigRequest {
    /// Required. Value for parent.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "2")]
    pub request_id: ::prost::alloc::string::String,
    /// Optional. If set, validate the request, but do not actually post it.
    #[prost(bool, tag = "3")]
    pub validate_only: bool,
    /// Optional. This checksum is computed by the server based on the value of
    /// other fields, and may be sent on update and delete requests to ensure the
    /// client has an up-to-date value before proceeding.
    #[prost(string, tag = "4")]
    pub etag: ::prost::alloc::string::String,
}
/// Request for updating an InsightsConfig.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateInsightsConfigRequest {
    /// Required. The resource being updated.
    #[prost(message, optional, tag = "2")]
    pub insights_config: ::core::option::Option<InsightsConfig>,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "3")]
    pub request_id: ::prost::alloc::string::String,
    /// Optional. If set to true, and the insightsConfig is not found a new
    /// insightsConfig will be created. In this situation `update_mask` is ignored.
    /// The creation will succeed only if the input insightsConfig has all the
    /// necessary information (e.g a github_config with both  user_oauth_token and
    /// installation_id properties).
    #[prost(bool, tag = "4")]
    pub allow_missing: bool,
    /// Optional. If set, validate the request, but do not actually post it.
    #[prost(bool, tag = "5")]
    pub validate_only: bool,
}
/// Generated client implementations.
pub mod insights_config_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Creates and manages InsightsConfigs.
    ///
    /// The InsightsConfig resource is the core configuration object to capture
    /// events from your Software Development Lifecycle. It acts as the central hub
    /// for managing how Developer connect understands your application, its runtime
    /// environments, and the artifacts deployed within them.
    /// A user can create an InsightsConfig, list previously-requested
    /// InsightsConfigs or get InsightsConfigs by their ID to determine the status of
    /// the InsightsConfig.
    #[derive(Debug, Clone)]
    pub struct InsightsConfigServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl InsightsConfigServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> InsightsConfigServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InsightsConfigServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            InsightsConfigServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Lists InsightsConfigs in a given project and location.
        pub async fn list_insights_configs(
            &mut self,
            request: impl tonic::IntoRequest<super::ListInsightsConfigsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListInsightsConfigsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.InsightsConfigService/ListInsightsConfigs",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.InsightsConfigService",
                        "ListInsightsConfigs",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Creates a new InsightsConfig in a given project and location.
        pub async fn create_insights_config(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateInsightsConfigRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.InsightsConfigService/CreateInsightsConfig",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.InsightsConfigService",
                        "CreateInsightsConfig",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Gets details of a single Insight.
        pub async fn get_insights_config(
            &mut self,
            request: impl tonic::IntoRequest<super::GetInsightsConfigRequest>,
        ) -> std::result::Result<tonic::Response<super::InsightsConfig>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.InsightsConfigService/GetInsightsConfig",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.InsightsConfigService",
                        "GetInsightsConfig",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Updates the parameters of a single InsightsConfig.
        pub async fn update_insights_config(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateInsightsConfigRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.InsightsConfigService/UpdateInsightsConfig",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.InsightsConfigService",
                        "UpdateInsightsConfig",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Delete a single Insight.
        pub async fn delete_insights_config(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteInsightsConfigRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.InsightsConfigService/DeleteInsightsConfig",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.InsightsConfigService",
                        "DeleteInsightsConfig",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
