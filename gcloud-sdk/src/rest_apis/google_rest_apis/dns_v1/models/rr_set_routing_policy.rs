use serde::{Deserialize, Serialize}; /*
                                      * Cloud DNS API
                                      *
                                      * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
                                      *
                                      * The version of the OpenAPI document: v1
                                      *
                                      * Generated by: https://openapi-generator.tech
                                      */

/// RrSetRoutingPolicy : A RRSetRoutingPolicy represents ResourceRecordSet data that is returned dynamically with the response varying based on configured properties such as geolocation or by weighted random selection.

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct RrSetRoutingPolicy {
    #[serde(rename = "geo", skip_serializing_if = "Option::is_none")]
    pub geo: Option<Box<crate::google_rest_apis::dns_v1::models::RrSetRoutingPolicyGeoPolicy>>,
    #[serde(rename = "kind", skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    #[serde(rename = "primaryBackup", skip_serializing_if = "Option::is_none")]
    pub primary_backup:
        Option<Box<crate::google_rest_apis::dns_v1::models::RrSetRoutingPolicyPrimaryBackupPolicy>>,
    #[serde(rename = "wrr", skip_serializing_if = "Option::is_none")]
    pub wrr: Option<Box<crate::google_rest_apis::dns_v1::models::RrSetRoutingPolicyWrrPolicy>>,
}

impl RrSetRoutingPolicy {
    /// A RRSetRoutingPolicy represents ResourceRecordSet data that is returned dynamically with the response varying based on configured properties such as geolocation or by weighted random selection.
    pub fn new() -> RrSetRoutingPolicy {
        RrSetRoutingPolicy {
            geo: None,
            kind: None,
            primary_backup: None,
            wrr: None,
        }
    }
}
