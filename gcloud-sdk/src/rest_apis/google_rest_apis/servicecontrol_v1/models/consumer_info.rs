use serde::{Deserialize, Serialize}; /*
                                      * Service Control API
                                      *
                                      * Provides admission control and telemetry reporting for services integrated with Service Infrastructure.
                                      *
                                      * The version of the OpenAPI document: v1
                                      *
                                      * Generated by: https://openapi-generator.tech
                                      */

/// ConsumerInfo : `ConsumerInfo` provides information about the consumer.

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ConsumerInfo {
    /// The consumer identity number, can be Google cloud project number, folder number or organization number e.g. 1234567890. A value of 0 indicates no consumer number is found.
    #[serde(rename = "consumerNumber", skip_serializing_if = "Option::is_none")]
    pub consumer_number: Option<String>,
    /// The Google cloud project number, e.g. 1234567890. A value of 0 indicates no project number is found. NOTE: This field is deprecated after Chemist support flexible consumer id. New code should not depend on this field anymore.
    #[serde(rename = "projectNumber", skip_serializing_if = "Option::is_none")]
    pub project_number: Option<String>,
    /// The type of the consumer which should have been defined in [Google Resource Manager](https://cloud.google.com/resource-manager/).
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
}

impl ConsumerInfo {
    /// `ConsumerInfo` provides information about the consumer.
    pub fn new() -> ConsumerInfo {
        ConsumerInfo {
            consumer_number: None,
            project_number: None,
            r#type: None,
        }
    }
}

/// The type of the consumer which should have been defined in [Google Resource Manager](https://cloud.google.com/resource-manager/).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "CONSUMER_TYPE_UNSPECIFIED")]
    ConsumerTypeUnspecified,
    #[serde(rename = "PROJECT")]
    Project,
    #[serde(rename = "FOLDER")]
    Folder,
    #[serde(rename = "ORGANIZATION")]
    Organization,
    #[serde(rename = "SERVICE_SPECIFIC")]
    ServiceSpecific,
}

impl Default for Type {
    fn default() -> Type {
        Self::ConsumerTypeUnspecified
    }
}
