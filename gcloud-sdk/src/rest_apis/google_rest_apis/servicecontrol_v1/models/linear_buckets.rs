use serde::{Deserialize, Serialize}; /*
                                      * Service Control API
                                      *
                                      * Provides admission control and telemetry reporting for services integrated with Service Infrastructure.
                                      *
                                      * The version of the OpenAPI document: v1
                                      *
                                      * Generated by: https://openapi-generator.tech
                                      */

use crate::google_rest_apis::servicecontrol_v1::models;

/// LinearBuckets : Describing buckets with constant width.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct LinearBuckets {
    /// The number of finite buckets. With the underflow and overflow buckets, the total number of buckets is `num_finite_buckets` + 2. See comments on `bucket_options` for details.
    #[serde(rename = "numFiniteBuckets", skip_serializing_if = "Option::is_none")]
    pub num_finite_buckets: Option<i32>,
    /// The i'th linear bucket covers the interval [offset + (i-1) * width, offset + i * width) where i ranges from 1 to num_finite_buckets, inclusive.
    #[serde(rename = "offset", skip_serializing_if = "Option::is_none")]
    pub offset: Option<f64>,
    /// The i'th linear bucket covers the interval [offset + (i-1) * width, offset + i * width) where i ranges from 1 to num_finite_buckets, inclusive. Must be strictly positive.
    #[serde(rename = "width", skip_serializing_if = "Option::is_none")]
    pub width: Option<f64>,
}

impl LinearBuckets {
    /// Describing buckets with constant width.
    pub fn new() -> LinearBuckets {
        LinearBuckets {
            num_finite_buckets: None,
            offset: None,
            width: None,
        }
    }
}
