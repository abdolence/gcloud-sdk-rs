use serde::{Deserialize, Serialize}; /*
                                      * Service Control API
                                      *
                                      * Provides admission control and telemetry reporting for services integrated with Service Infrastructure.
                                      *
                                      * The version of the OpenAPI document: v1
                                      *
                                      * Generated by: https://openapi-generator.tech
                                      */

/// OrgPolicyViolationInfo : Represents OrgPolicy Violation information.

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct OrgPolicyViolationInfo {
    /// Optional. Resource payload that is currently in scope and is subjected to orgpolicy conditions. This payload may be the subset of the actual Resource that may come in the request. This payload should not contain any core content.
    #[serde(rename = "payload", skip_serializing_if = "Option::is_none")]
    pub payload: Option<::std::collections::HashMap<String, serde_json::Value>>,
    /// Optional. Tags referenced on the resource at the time of evaluation. These also include the federated tags, if they are supplied in the CheckOrgPolicy or CheckCustomConstraints Requests. Optional field as of now. These tags are the Cloud tags that are available on the resource during the policy evaluation and will be available as part of the OrgPolicy check response for logging purposes.
    #[serde(rename = "resourceTags", skip_serializing_if = "Option::is_none")]
    pub resource_tags: Option<::std::collections::HashMap<String, String>>,
    /// Optional. Resource type that the orgpolicy is checked against. Example: compute.googleapis.com/Instance, store.googleapis.com/bucket
    #[serde(rename = "resourceType", skip_serializing_if = "Option::is_none")]
    pub resource_type: Option<String>,
    /// Optional. Policy violations
    #[serde(rename = "violationInfo", skip_serializing_if = "Option::is_none")]
    pub violation_info:
        Option<Vec<crate::google_rest_apis::servicecontrol_v1::models::ViolationInfo>>,
}

impl OrgPolicyViolationInfo {
    /// Represents OrgPolicy Violation information.
    pub fn new() -> OrgPolicyViolationInfo {
        OrgPolicyViolationInfo {
            payload: None,
            resource_tags: None,
            resource_type: None,
            violation_info: None,
        }
    }
}
