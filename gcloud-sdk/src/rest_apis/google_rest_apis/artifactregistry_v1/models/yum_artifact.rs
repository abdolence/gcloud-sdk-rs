use serde::{Deserialize, Serialize}; /*
                                      * Artifact Registry API
                                      *
                                      * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
                                      *
                                      * The version of the OpenAPI document: v1
                                      *
                                      * Generated by: https://openapi-generator.tech
                                      */

use crate::google_rest_apis::artifactregistry_v1::models;

/// YumArtifact : A detailed representation of a Yum artifact.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct YumArtifact {
    /// Output only. Operating system architecture of the artifact.
    #[serde(rename = "architecture", skip_serializing_if = "Option::is_none")]
    pub architecture: Option<String>,
    /// Output only. The Artifact Registry resource name of the artifact.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Output only. The yum package name of the artifact.
    #[serde(rename = "packageName", skip_serializing_if = "Option::is_none")]
    pub package_name: Option<String>,
    /// Output only. An artifact is a binary or source package.
    #[serde(rename = "packageType", skip_serializing_if = "Option::is_none")]
    pub package_type: Option<PackageType>,
}

impl YumArtifact {
    /// A detailed representation of a Yum artifact.
    pub fn new() -> YumArtifact {
        YumArtifact {
            architecture: None,
            name: None,
            package_name: None,
            package_type: None,
        }
    }
}
/// Output only. An artifact is a binary or source package.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PackageType {
    #[serde(rename = "PACKAGE_TYPE_UNSPECIFIED")]
    PackageTypeUnspecified,
    #[serde(rename = "BINARY")]
    Binary,
    #[serde(rename = "SOURCE")]
    Source,
}

impl Default for PackageType {
    fn default() -> PackageType {
        Self::PackageTypeUnspecified
    }
}
