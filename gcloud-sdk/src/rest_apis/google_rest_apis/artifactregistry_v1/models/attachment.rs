use serde::{Deserialize, Serialize}; /*
                                      * Artifact Registry API
                                      *
                                      * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
                                      *
                                      * The version of the OpenAPI document: v1
                                      *
                                      * Generated by: https://openapi-generator.tech
                                      */

use crate::google_rest_apis::artifactregistry_v1::models;

/// Attachment : An Attachment refers to additional metadata that can be attached to artifacts in Artifact Registry. An attachment consists of one or more files.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Attachment {
    /// Optional. User annotations. These attributes can only be set and used by the user, and not by Artifact Registry. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
    #[serde(rename = "annotations", skip_serializing_if = "Option::is_none")]
    pub annotations: Option<std::collections::HashMap<String, String>>,
    /// The namespace this attachment belongs to. E.g. If an attachment is created by artifact analysis, namespace is set to `artifactanalysis.googleapis.com`.
    #[serde(
        rename = "attachmentNamespace",
        skip_serializing_if = "Option::is_none"
    )]
    pub attachment_namespace: Option<String>,
    /// Output only. The time when the attachment was created.
    #[serde(rename = "createTime", skip_serializing_if = "Option::is_none")]
    pub create_time: Option<String>,
    /// Required. The files that belong to this attachment. If the file ID part contains slashes, they are escaped. E.g. `projects/p1/locations/us-central1/repositories/repo1/files/sha:`.
    #[serde(rename = "files", skip_serializing_if = "Option::is_none")]
    pub files: Option<Vec<String>>,
    /// The name of the attachment. E.g. `projects/p1/locations/us/repositories/repo/attachments/sbom`.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Output only. The name of the OCI version that this attachment created. Only populated for Docker attachments. E.g. `projects/p1/locations/us-central1/repositories/repo1/packages/p1/versions/v1`.
    #[serde(rename = "ociVersionName", skip_serializing_if = "Option::is_none")]
    pub oci_version_name: Option<String>,
    /// Required. The target the attachment is for, can be a Version, Package or Repository. E.g. `projects/p1/locations/us-central1/repositories/repo1/packages/p1/versions/v1`.
    #[serde(rename = "target", skip_serializing_if = "Option::is_none")]
    pub target: Option<String>,
    /// Type of attachment. E.g. `application/vnd.spdx+json`
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    /// Output only. The time when the attachment was last updated.
    #[serde(rename = "updateTime", skip_serializing_if = "Option::is_none")]
    pub update_time: Option<String>,
}

impl Attachment {
    /// An Attachment refers to additional metadata that can be attached to artifacts in Artifact Registry. An attachment consists of one or more files.
    pub fn new() -> Attachment {
        Attachment {
            annotations: None,
            attachment_namespace: None,
            create_time: None,
            files: None,
            name: None,
            oci_version_name: None,
            target: None,
            r#type: None,
            update_time: None,
        }
    }
}
