use serde::{Deserialize, Serialize}; /*
                                      * Artifact Registry API
                                      *
                                      * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
                                      *
                                      * The version of the OpenAPI document: v1
                                      *
                                      * Generated by: https://openapi-generator.tech
                                      */

use crate::google_rest_apis::artifactregistry_v1::models;

/// GenericArtifact : GenericArtifact represents a generic artifact
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GenericArtifact {
    /// Output only. The time when the Generic module is created.
    #[serde(rename = "createTime", skip_serializing_if = "Option::is_none")]
    pub create_time: Option<String>,
    /// Resource name of the generic artifact. project, location, repository, package_id and version_id create a unique generic artifact. i.e. \"projects/test-project/locations/us-west4/repositories/test-repo/ genericArtifacts/package_id:version_id\"
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Output only. The time when the Generic module is updated.
    #[serde(rename = "updateTime", skip_serializing_if = "Option::is_none")]
    pub update_time: Option<String>,
    /// The version of the generic artifact.
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

impl GenericArtifact {
    /// GenericArtifact represents a generic artifact
    pub fn new() -> GenericArtifact {
        GenericArtifact {
            create_time: None,
            name: None,
            update_time: None,
            version: None,
        }
    }
}
