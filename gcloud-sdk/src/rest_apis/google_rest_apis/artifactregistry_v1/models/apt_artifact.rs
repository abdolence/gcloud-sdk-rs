use serde::{Deserialize, Serialize}; /*
                                      * Artifact Registry API
                                      *
                                      * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
                                      *
                                      * The version of the OpenAPI document: v1
                                      *
                                      * Generated by: https://openapi-generator.tech
                                      */

use crate::google_rest_apis::artifactregistry_v1::models;

/// AptArtifact : A detailed representation of an Apt artifact. Information in the record is derived from the archive's control file. See https://www.debian.org/doc/debian-policy/ch-controlfields.html
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AptArtifact {
    /// Output only. Operating system architecture of the artifact.
    #[serde(rename = "architecture", skip_serializing_if = "Option::is_none")]
    pub architecture: Option<String>,
    /// Output only. Repository component of the artifact.
    #[serde(rename = "component", skip_serializing_if = "Option::is_none")]
    pub component: Option<String>,
    /// Output only. Contents of the artifact's control metadata file.
    #[serde(rename = "controlFile", skip_serializing_if = "Option::is_none")]
    pub control_file: Option<String>,
    /// Output only. The Artifact Registry resource name of the artifact.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Output only. The Apt package name of the artifact.
    #[serde(rename = "packageName", skip_serializing_if = "Option::is_none")]
    pub package_name: Option<String>,
    /// Output only. An artifact is a binary or source package.
    #[serde(rename = "packageType", skip_serializing_if = "Option::is_none")]
    pub package_type: Option<PackageType>,
}

impl AptArtifact {
    /// A detailed representation of an Apt artifact. Information in the record is derived from the archive's control file. See https://www.debian.org/doc/debian-policy/ch-controlfields.html
    pub fn new() -> AptArtifact {
        AptArtifact {
            architecture: None,
            component: None,
            control_file: None,
            name: None,
            package_name: None,
            package_type: None,
        }
    }
}
/// Output only. An artifact is a binary or source package.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PackageType {
    #[serde(rename = "PACKAGE_TYPE_UNSPECIFIED")]
    PackageTypeUnspecified,
    #[serde(rename = "BINARY")]
    Binary,
    #[serde(rename = "SOURCE")]
    Source,
}

impl Default for PackageType {
    fn default() -> PackageType {
        Self::PackageTypeUnspecified
    }
}
