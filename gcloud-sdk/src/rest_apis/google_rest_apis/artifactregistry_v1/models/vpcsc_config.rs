use serde::{Deserialize, Serialize}; /*
                                      * Artifact Registry API
                                      *
                                      * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
                                      *
                                      * The version of the OpenAPI document: v1
                                      *
                                      * Generated by: https://openapi-generator.tech
                                      */

use crate::google_rest_apis::artifactregistry_v1::models;

/// VpcscConfig : The Artifact Registry VPC SC config that apply to a Project.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct VpcscConfig {
    /// The name of the project's VPC SC Config. Always of the form: projects/{projectID}/locations/{location}/vpcscConfig In update request: never set In response: always set
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The project per location VPC SC policy that defines the VPC SC behavior for the Remote Repository (Allow/Deny).
    #[serde(rename = "vpcscPolicy", skip_serializing_if = "Option::is_none")]
    pub vpcsc_policy: Option<VpcscPolicy>,
}

impl VpcscConfig {
    /// The Artifact Registry VPC SC config that apply to a Project.
    pub fn new() -> VpcscConfig {
        VpcscConfig {
            name: None,
            vpcsc_policy: None,
        }
    }
}
/// The project per location VPC SC policy that defines the VPC SC behavior for the Remote Repository (Allow/Deny).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum VpcscPolicy {
    #[serde(rename = "VPCSC_POLICY_UNSPECIFIED")]
    VpcscPolicyUnspecified,
    #[serde(rename = "DENY")]
    Deny,
    #[serde(rename = "ALLOW")]
    Allow,
}

impl Default for VpcscPolicy {
    fn default() -> VpcscPolicy {
        Self::VpcscPolicyUnspecified
    }
}
