use serde::{Deserialize, Serialize}; /*
                                      * Artifact Registry API
                                      *
                                      * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
                                      *
                                      * The version of the OpenAPI document: v1
                                      *
                                      * Generated by: https://openapi-generator.tech
                                      */

use crate::google_rest_apis::artifactregistry_v1::models;

/// KfpArtifact : A detailed representation of a KFP artifact.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct KfpArtifact {
    /// Output only. Resource name of the KFP artifact. Since users don't directly interact with this resource, the name will be derived from the associated version. For example, when version = \".../versions/sha256:abcdef...\", the name will be \".../kfpArtifacts/sha256:abcdef...\".
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The version associated with the KFP artifact. Must follow the Semantic Versioning standard.
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

impl KfpArtifact {
    /// A detailed representation of a KFP artifact.
    pub fn new() -> KfpArtifact {
        KfpArtifact {
            name: None,
            version: None,
        }
    }
}
