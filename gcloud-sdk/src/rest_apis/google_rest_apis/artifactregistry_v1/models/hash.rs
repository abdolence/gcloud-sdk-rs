use serde::{Deserialize, Serialize}; /*
                                      * Artifact Registry API
                                      *
                                      * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
                                      *
                                      * The version of the OpenAPI document: v1
                                      *
                                      * Generated by: https://openapi-generator.tech
                                      */

use crate::google_rest_apis::artifactregistry_v1::models;

/// Hash : A hash of file content.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Hash {
    /// The algorithm used to compute the hash value.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    /// The hash value.
    #[serde(rename = "value", skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

impl Hash {
    /// A hash of file content.
    pub fn new() -> Hash {
        Hash {
            r#type: None,
            value: None,
        }
    }
}
/// The algorithm used to compute the hash value.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "HASH_TYPE_UNSPECIFIED")]
    HashTypeUnspecified,
    #[serde(rename = "SHA256")]
    Sha256,
    #[serde(rename = "MD5")]
    Md5,
}

impl Default for Type {
    fn default() -> Type {
        Self::HashTypeUnspecified
    }
}
