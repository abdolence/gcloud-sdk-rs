use serde::{Deserialize, Serialize}; /*
                                      * Artifact Registry API
                                      *
                                      * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
                                      *
                                      * The version of the OpenAPI document: v1
                                      *
                                      * Generated by: https://openapi-generator.tech
                                      */

use crate::google_rest_apis::artifactregistry_v1::models;

/// GoogleDevtoolsArtifactregistryV1Rule : A rule defines the deny or allow action of the operation it applies to and the conditions required for the rule to apply. You can set one rule for an entire repository and one rule for each package within.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GoogleDevtoolsArtifactregistryV1Rule {
    /// The action this rule takes.
    #[serde(rename = "action", skip_serializing_if = "Option::is_none")]
    pub action: Option<Action>,
    /// Optional. A CEL expression for conditions that must be met in order for the rule to apply. If not provided, the rule matches all objects.
    #[serde(rename = "condition", skip_serializing_if = "Option::is_none")]
    pub condition: Option<Box<models::Expr>>,
    /// The name of the rule, for example: `projects/p1/locations/us-central1/repositories/repo1/rules/rule1`.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "operation", skip_serializing_if = "Option::is_none")]
    pub operation: Option<Operation>,
    /// The package ID the rule applies to. If empty, this rule applies to all packages inside the repository.
    #[serde(rename = "packageId", skip_serializing_if = "Option::is_none")]
    pub package_id: Option<String>,
}

impl GoogleDevtoolsArtifactregistryV1Rule {
    /// A rule defines the deny or allow action of the operation it applies to and the conditions required for the rule to apply. You can set one rule for an entire repository and one rule for each package within.
    pub fn new() -> GoogleDevtoolsArtifactregistryV1Rule {
        GoogleDevtoolsArtifactregistryV1Rule {
            action: None,
            condition: None,
            name: None,
            operation: None,
            package_id: None,
        }
    }
}
/// The action this rule takes.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Action {
    #[serde(rename = "ACTION_UNSPECIFIED")]
    ActionUnspecified,
    #[serde(rename = "ALLOW")]
    Allow,
    #[serde(rename = "DENY")]
    Deny,
}

impl Default for Action {
    fn default() -> Action {
        Self::ActionUnspecified
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Operation {
    #[serde(rename = "OPERATION_UNSPECIFIED")]
    OperationUnspecified,
    #[serde(rename = "DOWNLOAD")]
    Download,
}

impl Default for Operation {
    fn default() -> Operation {
        Self::OperationUnspecified
    }
}
