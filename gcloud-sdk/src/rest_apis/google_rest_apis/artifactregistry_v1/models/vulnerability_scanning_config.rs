use serde::{Deserialize, Serialize}; /*
                                      * Artifact Registry API
                                      *
                                      * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
                                      *
                                      * The version of the OpenAPI document: v1
                                      *
                                      * Generated by: https://openapi-generator.tech
                                      */

use crate::google_rest_apis::artifactregistry_v1::models;

/// VulnerabilityScanningConfig : Config on whether to perform vulnerability scanning for resources in this repository, as well as output fields describing current state.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct VulnerabilityScanningConfig {
    /// Optional. Config for whether this repository has vulnerability scanning disabled.
    #[serde(rename = "enablementConfig", skip_serializing_if = "Option::is_none")]
    pub enablement_config: Option<EnablementConfig>,
    /// Output only. State of feature enablement, combining repository enablement config and API enablement state.
    #[serde(rename = "enablementState", skip_serializing_if = "Option::is_none")]
    pub enablement_state: Option<EnablementState>,
    /// Output only. Reason for the repository state.
    #[serde(
        rename = "enablementStateReason",
        skip_serializing_if = "Option::is_none"
    )]
    pub enablement_state_reason: Option<String>,
    /// Output only. The last time this repository config was enabled.
    #[serde(rename = "lastEnableTime", skip_serializing_if = "Option::is_none")]
    pub last_enable_time: Option<String>,
}

impl VulnerabilityScanningConfig {
    /// Config on whether to perform vulnerability scanning for resources in this repository, as well as output fields describing current state.
    pub fn new() -> VulnerabilityScanningConfig {
        VulnerabilityScanningConfig {
            enablement_config: None,
            enablement_state: None,
            enablement_state_reason: None,
            last_enable_time: None,
        }
    }
}
/// Optional. Config for whether this repository has vulnerability scanning disabled.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EnablementConfig {
    #[serde(rename = "ENABLEMENT_CONFIG_UNSPECIFIED")]
    EnablementConfigUnspecified,
    #[serde(rename = "INHERITED")]
    Inherited,
    #[serde(rename = "DISABLED")]
    Disabled,
}

impl Default for EnablementConfig {
    fn default() -> EnablementConfig {
        Self::EnablementConfigUnspecified
    }
}
/// Output only. State of feature enablement, combining repository enablement config and API enablement state.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EnablementState {
    #[serde(rename = "ENABLEMENT_STATE_UNSPECIFIED")]
    EnablementStateUnspecified,
    #[serde(rename = "SCANNING_UNSUPPORTED")]
    ScanningUnsupported,
    #[serde(rename = "SCANNING_DISABLED")]
    ScanningDisabled,
    #[serde(rename = "SCANNING_ACTIVE")]
    ScanningActive,
}

impl Default for EnablementState {
    fn default() -> EnablementState {
        Self::EnablementStateUnspecified
    }
}
