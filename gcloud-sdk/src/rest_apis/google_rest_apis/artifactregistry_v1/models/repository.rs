use serde::{Deserialize, Serialize}; /*
                                      * Artifact Registry API
                                      *
                                      * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
                                      *
                                      * The version of the OpenAPI document: v1
                                      *
                                      * Generated by: https://openapi-generator.tech
                                      */

use crate::google_rest_apis::artifactregistry_v1::models;

/// Repository : A Repository for storing artifacts with a specific format.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Repository {
    /// Optional. Cleanup policies for this repository. Cleanup policies indicate when certain package versions can be automatically deleted. Map keys are policy IDs supplied by users during policy creation. They must unique within a repository and be under 128 characters in length.
    #[serde(rename = "cleanupPolicies", skip_serializing_if = "Option::is_none")]
    pub cleanup_policies: Option<std::collections::HashMap<String, models::CleanupPolicy>>,
    /// Optional. If true, the cleanup pipeline is prevented from deleting versions in this repository.
    #[serde(
        rename = "cleanupPolicyDryRun",
        skip_serializing_if = "Option::is_none"
    )]
    pub cleanup_policy_dry_run: Option<bool>,
    /// Output only. The time when the repository was created.
    #[serde(rename = "createTime", skip_serializing_if = "Option::is_none")]
    pub create_time: Option<String>,
    /// The user-provided description of the repository.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Optional. If this is true, an unspecified repo type will be treated as error rather than defaulting to standard.
    #[serde(
        rename = "disallowUnspecifiedMode",
        skip_serializing_if = "Option::is_none"
    )]
    pub disallow_unspecified_mode: Option<bool>,
    /// Docker repository config contains repository level configuration for the repositories of docker type.
    #[serde(rename = "dockerConfig", skip_serializing_if = "Option::is_none")]
    pub docker_config: Option<Box<models::DockerRepositoryConfig>>,
    /// Optional. The format of packages that are stored in the repository.
    #[serde(rename = "format", skip_serializing_if = "Option::is_none")]
    pub format: Option<Format>,
    /// The Cloud KMS resource name of the customer managed encryption key that's used to encrypt the contents of the Repository. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. This value may not be changed after the Repository has been created.
    #[serde(rename = "kmsKeyName", skip_serializing_if = "Option::is_none")]
    pub kms_key_name: Option<String>,
    /// Labels with user-defined metadata. This field may contain up to 64 entries. Label keys and values may be no longer than 63 characters. Label keys must begin with a lowercase letter and may only contain lowercase letters, numeric characters, underscores, and dashes.
    #[serde(rename = "labels", skip_serializing_if = "Option::is_none")]
    pub labels: Option<std::collections::HashMap<String, String>>,
    /// Maven repository config contains repository level configuration for the repositories of maven type.
    #[serde(rename = "mavenConfig", skip_serializing_if = "Option::is_none")]
    pub maven_config: Option<Box<models::MavenRepositoryConfig>>,
    /// Optional. The mode of the repository.
    #[serde(rename = "mode", skip_serializing_if = "Option::is_none")]
    pub mode: Option<Mode>,
    /// The name of the repository, for example: `projects/p1/locations/us-central1/repositories/repo1`. For each location in a project, repository names must be unique.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Output only. The repository endpoint, for example: `us-docker.pkg.dev/my-proj/my-repo`.
    #[serde(rename = "registryUri", skip_serializing_if = "Option::is_none")]
    pub registry_uri: Option<String>,
    /// Configuration specific for a Remote Repository.
    #[serde(
        rename = "remoteRepositoryConfig",
        skip_serializing_if = "Option::is_none"
    )]
    pub remote_repository_config: Option<Box<models::RemoteRepositoryConfig>>,
    /// Output only. Whether or not this repository satisfies PZI.
    #[serde(rename = "satisfiesPzi", skip_serializing_if = "Option::is_none")]
    pub satisfies_pzi: Option<bool>,
    /// Output only. Whether or not this repository satisfies PZS.
    #[serde(rename = "satisfiesPzs", skip_serializing_if = "Option::is_none")]
    pub satisfies_pzs: Option<bool>,
    /// Output only. The size, in bytes, of all artifact storage in this repository. Repositories that are generally available or in public preview use this to calculate storage costs.
    #[serde(rename = "sizeBytes", skip_serializing_if = "Option::is_none")]
    pub size_bytes: Option<String>,
    /// Output only. The time when the repository was last updated.
    #[serde(rename = "updateTime", skip_serializing_if = "Option::is_none")]
    pub update_time: Option<String>,
    /// Configuration specific for a Virtual Repository.
    #[serde(
        rename = "virtualRepositoryConfig",
        skip_serializing_if = "Option::is_none"
    )]
    pub virtual_repository_config: Option<Box<models::VirtualRepositoryConfig>>,
    /// Optional. Config and state for vulnerability scanning of resources within this Repository.
    #[serde(
        rename = "vulnerabilityScanningConfig",
        skip_serializing_if = "Option::is_none"
    )]
    pub vulnerability_scanning_config: Option<Box<models::VulnerabilityScanningConfig>>,
}

impl Repository {
    /// A Repository for storing artifacts with a specific format.
    pub fn new() -> Repository {
        Repository {
            cleanup_policies: None,
            cleanup_policy_dry_run: None,
            create_time: None,
            description: None,
            disallow_unspecified_mode: None,
            docker_config: None,
            format: None,
            kms_key_name: None,
            labels: None,
            maven_config: None,
            mode: None,
            name: None,
            registry_uri: None,
            remote_repository_config: None,
            satisfies_pzi: None,
            satisfies_pzs: None,
            size_bytes: None,
            update_time: None,
            virtual_repository_config: None,
            vulnerability_scanning_config: None,
        }
    }
}
/// Optional. The format of packages that are stored in the repository.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Format {
    #[serde(rename = "FORMAT_UNSPECIFIED")]
    FormatUnspecified,
    #[serde(rename = "DOCKER")]
    Docker,
    #[serde(rename = "MAVEN")]
    Maven,
    #[serde(rename = "NPM")]
    Npm,
    #[serde(rename = "APT")]
    Apt,
    #[serde(rename = "YUM")]
    Yum,
    #[serde(rename = "GOOGET")]
    Googet,
    #[serde(rename = "PYTHON")]
    Python,
    #[serde(rename = "KFP")]
    Kfp,
    #[serde(rename = "GO")]
    Go,
    #[serde(rename = "GENERIC")]
    Generic,
}

impl Default for Format {
    fn default() -> Format {
        Self::FormatUnspecified
    }
}
/// Optional. The mode of the repository.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Mode {
    #[serde(rename = "MODE_UNSPECIFIED")]
    ModeUnspecified,
    #[serde(rename = "STANDARD_REPOSITORY")]
    StandardRepository,
    #[serde(rename = "VIRTUAL_REPOSITORY")]
    VirtualRepository,
    #[serde(rename = "REMOTE_REPOSITORY")]
    RemoteRepository,
    #[serde(rename = "AOSS_REPOSITORY")]
    AossRepository,
    #[serde(rename = "ASSURED_OSS_REPOSITORY")]
    AssuredOssRepository,
}

impl Default for Mode {
    fn default() -> Mode {
        Self::ModeUnspecified
    }
}
