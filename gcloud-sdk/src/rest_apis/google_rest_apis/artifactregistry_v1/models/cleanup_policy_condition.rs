use serde::{Deserialize, Serialize}; /*
                                      * Artifact Registry API
                                      *
                                      * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
                                      *
                                      * The version of the OpenAPI document: v1
                                      *
                                      * Generated by: https://openapi-generator.tech
                                      */

use crate::google_rest_apis::artifactregistry_v1::models;

/// CleanupPolicyCondition : CleanupPolicyCondition is a set of conditions attached to a CleanupPolicy. If multiple entries are set, all must be satisfied for the condition to be satisfied.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CleanupPolicyCondition {
    /// Match versions newer than a duration.
    #[serde(rename = "newerThan", skip_serializing_if = "Option::is_none")]
    pub newer_than: Option<String>,
    /// Match versions older than a duration.
    #[serde(rename = "olderThan", skip_serializing_if = "Option::is_none")]
    pub older_than: Option<String>,
    /// Match versions by package prefix. Applied on any prefix match.
    #[serde(
        rename = "packageNamePrefixes",
        skip_serializing_if = "Option::is_none"
    )]
    pub package_name_prefixes: Option<Vec<String>>,
    /// Match versions by tag prefix. Applied on any prefix match.
    #[serde(rename = "tagPrefixes", skip_serializing_if = "Option::is_none")]
    pub tag_prefixes: Option<Vec<String>>,
    /// Match versions by tag status.
    #[serde(rename = "tagState", skip_serializing_if = "Option::is_none")]
    pub tag_state: Option<TagState>,
    /// Match versions by version name prefix. Applied on any prefix match.
    #[serde(
        rename = "versionNamePrefixes",
        skip_serializing_if = "Option::is_none"
    )]
    pub version_name_prefixes: Option<Vec<String>>,
}

impl CleanupPolicyCondition {
    /// CleanupPolicyCondition is a set of conditions attached to a CleanupPolicy. If multiple entries are set, all must be satisfied for the condition to be satisfied.
    pub fn new() -> CleanupPolicyCondition {
        CleanupPolicyCondition {
            newer_than: None,
            older_than: None,
            package_name_prefixes: None,
            tag_prefixes: None,
            tag_state: None,
            version_name_prefixes: None,
        }
    }
}
/// Match versions by tag status.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TagState {
    #[serde(rename = "TAG_STATE_UNSPECIFIED")]
    TagStateUnspecified,
    #[serde(rename = "TAGGED")]
    Tagged,
    #[serde(rename = "UNTAGGED")]
    Untagged,
    #[serde(rename = "ANY")]
    Any,
}

impl Default for TagState {
    fn default() -> TagState {
        Self::TagStateUnspecified
    }
}
