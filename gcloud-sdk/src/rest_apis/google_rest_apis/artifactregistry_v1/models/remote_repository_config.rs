use serde::{Deserialize, Serialize}; /*
                                      * Artifact Registry API
                                      *
                                      * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
                                      *
                                      * The version of the OpenAPI document: v1
                                      *
                                      * Generated by: https://openapi-generator.tech
                                      */

use crate::google_rest_apis::artifactregistry_v1::models;

/// RemoteRepositoryConfig : Remote repository configuration.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RemoteRepositoryConfig {
    /// Specific settings for an Apt remote repository.
    #[serde(rename = "aptRepository", skip_serializing_if = "Option::is_none")]
    pub apt_repository: Option<Box<models::AptRepository>>,
    /// Common remote repository settings. Used as the remote repository upstream URL.
    #[serde(rename = "commonRepository", skip_serializing_if = "Option::is_none")]
    pub common_repository: Option<Box<models::CommonRemoteRepository>>,
    /// The description of the remote source.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Input only. A create/update remote repo option to avoid making a HEAD/GET request to validate a remote repo and any supplied upstream credentials.
    #[serde(
        rename = "disableUpstreamValidation",
        skip_serializing_if = "Option::is_none"
    )]
    pub disable_upstream_validation: Option<bool>,
    /// Specific settings for a Docker remote repository.
    #[serde(rename = "dockerRepository", skip_serializing_if = "Option::is_none")]
    pub docker_repository: Option<Box<models::DockerRepository>>,
    /// Specific settings for a Maven remote repository.
    #[serde(rename = "mavenRepository", skip_serializing_if = "Option::is_none")]
    pub maven_repository: Option<Box<models::MavenRepository>>,
    /// Specific settings for an Npm remote repository.
    #[serde(rename = "npmRepository", skip_serializing_if = "Option::is_none")]
    pub npm_repository: Option<Box<models::NpmRepository>>,
    /// Specific settings for a Python remote repository.
    #[serde(rename = "pythonRepository", skip_serializing_if = "Option::is_none")]
    pub python_repository: Option<Box<models::PythonRepository>>,
    /// Optional. The credentials used to access the remote repository.
    #[serde(
        rename = "upstreamCredentials",
        skip_serializing_if = "Option::is_none"
    )]
    pub upstream_credentials: Option<Box<models::UpstreamCredentials>>,
    /// Specific settings for a Yum remote repository.
    #[serde(rename = "yumRepository", skip_serializing_if = "Option::is_none")]
    pub yum_repository: Option<Box<models::YumRepository>>,
}

impl RemoteRepositoryConfig {
    /// Remote repository configuration.
    pub fn new() -> RemoteRepositoryConfig {
        RemoteRepositoryConfig {
            apt_repository: None,
            common_repository: None,
            description: None,
            disable_upstream_validation: None,
            docker_repository: None,
            maven_repository: None,
            npm_repository: None,
            python_repository: None,
            upstream_credentials: None,
            yum_repository: None,
        }
    }
}
