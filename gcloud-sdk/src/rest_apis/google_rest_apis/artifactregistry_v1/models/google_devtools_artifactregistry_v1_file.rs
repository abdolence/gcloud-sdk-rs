use serde::{Deserialize, Serialize}; /*
                                      * Artifact Registry API
                                      *
                                      * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
                                      *
                                      * The version of the OpenAPI document: v1
                                      *
                                      * Generated by: https://openapi-generator.tech
                                      */

use crate::google_rest_apis::artifactregistry_v1::models;

/// GoogleDevtoolsArtifactregistryV1File : Files store content that is potentially associated with Packages or Versions.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GoogleDevtoolsArtifactregistryV1File {
    /// Optional. Client specified annotations.
    #[serde(rename = "annotations", skip_serializing_if = "Option::is_none")]
    pub annotations: Option<std::collections::HashMap<String, String>>,
    /// Output only. The time when the File was created.
    #[serde(rename = "createTime", skip_serializing_if = "Option::is_none")]
    pub create_time: Option<String>,
    /// Output only. The time when the last attempt to refresh the file's data was made. Only set when the repository is remote.
    #[serde(rename = "fetchTime", skip_serializing_if = "Option::is_none")]
    pub fetch_time: Option<String>,
    /// The hashes of the file content.
    #[serde(rename = "hashes", skip_serializing_if = "Option::is_none")]
    pub hashes: Option<Vec<models::Hash>>,
    /// The name of the file, for example: `projects/p1/locations/us-central1/repositories/repo1/files/a%2Fb%2Fc.txt`. If the file ID part contains slashes, they are escaped.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The name of the Package or Version that owns this file, if any.
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    /// The size of the File in bytes.
    #[serde(rename = "sizeBytes", skip_serializing_if = "Option::is_none")]
    pub size_bytes: Option<String>,
    /// Output only. The time when the File was last updated.
    #[serde(rename = "updateTime", skip_serializing_if = "Option::is_none")]
    pub update_time: Option<String>,
}

impl GoogleDevtoolsArtifactregistryV1File {
    /// Files store content that is potentially associated with Packages or Versions.
    pub fn new() -> GoogleDevtoolsArtifactregistryV1File {
        GoogleDevtoolsArtifactregistryV1File {
            annotations: None,
            create_time: None,
            fetch_time: None,
            hashes: None,
            name: None,
            owner: None,
            size_bytes: None,
            update_time: None,
        }
    }
}
