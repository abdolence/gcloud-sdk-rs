use serde::{Deserialize, Serialize}; /*
                                      * Artifact Registry API
                                      *
                                      * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
                                      *
                                      * The version of the OpenAPI document: v1
                                      *
                                      * Generated by: https://openapi-generator.tech
                                      */

use crate::google_rest_apis::artifactregistry_v1::models;

/// UpstreamPolicy : Artifact policy configuration for the repository contents.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpstreamPolicy {
    /// The user-provided ID of the upstream policy.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Entries with a greater priority value take precedence in the pull order.
    #[serde(rename = "priority", skip_serializing_if = "Option::is_none")]
    pub priority: Option<i32>,
    /// A reference to the repository resource, for example: `projects/p1/locations/us-central1/repositories/repo1`.
    #[serde(rename = "repository", skip_serializing_if = "Option::is_none")]
    pub repository: Option<String>,
}

impl UpstreamPolicy {
    /// Artifact policy configuration for the repository contents.
    pub fn new() -> UpstreamPolicy {
        UpstreamPolicy {
            id: None,
            priority: None,
            repository: None,
        }
    }
}
