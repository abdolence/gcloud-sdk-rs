use serde::{Deserialize, Serialize}; /*
                                      * Artifact Registry API
                                      *
                                      * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
                                      *
                                      * The version of the OpenAPI document: v1
                                      *
                                      * Generated by: https://openapi-generator.tech
                                      */

use crate::google_rest_apis::artifactregistry_v1::models;

/// GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository : Publicly available Yum repositories constructed from a common repository base and a custom repository path.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository {
    /// A common public repository base for Yum.
    #[serde(rename = "repositoryBase", skip_serializing_if = "Option::is_none")]
    pub repository_base: Option<RepositoryBase>,
    /// A custom field to define a path to a specific repository from the base.
    #[serde(rename = "repositoryPath", skip_serializing_if = "Option::is_none")]
    pub repository_path: Option<String>,
}

impl GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository {
    /// Publicly available Yum repositories constructed from a common repository base and a custom repository path.
    pub fn new(
    ) -> GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository {
        GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository {
            repository_base: None,
            repository_path: None,
        }
    }
}
/// A common public repository base for Yum.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RepositoryBase {
    #[serde(rename = "REPOSITORY_BASE_UNSPECIFIED")]
    RepositoryBaseUnspecified,
    #[serde(rename = "CENTOS")]
    Centos,
    #[serde(rename = "CENTOS_DEBUG")]
    CentosDebug,
    #[serde(rename = "CENTOS_VAULT")]
    CentosVault,
    #[serde(rename = "CENTOS_STREAM")]
    CentosStream,
    #[serde(rename = "ROCKY")]
    Rocky,
    #[serde(rename = "EPEL")]
    Epel,
}

impl Default for RepositoryBase {
    fn default() -> RepositoryBase {
        Self::RepositoryBaseUnspecified
    }
}
