/*
 * Google Identity Toolkit API
 *
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::google_rest_apis::identitytoolkit_v3::models;
use serde::{Deserialize, Serialize};

/// IdpConfig : Template for a single idp configuration.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IdpConfig {
    /// OAuth2 client ID.
    #[serde(rename = "clientId", skip_serializing_if = "Option::is_none")]
    pub client_id: Option<String>,
    /// Whether this IDP is enabled.
    #[serde(rename = "enabled", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Percent of users who will be prompted/redirected federated login for this IDP.
    #[serde(rename = "experimentPercent", skip_serializing_if = "Option::is_none")]
    pub experiment_percent: Option<i32>,
    /// OAuth2 provider.
    #[serde(rename = "provider", skip_serializing_if = "Option::is_none")]
    pub provider: Option<String>,
    /// OAuth2 client secret.
    #[serde(rename = "secret", skip_serializing_if = "Option::is_none")]
    pub secret: Option<String>,
    /// Whitelisted client IDs for audience check.
    #[serde(
        rename = "whitelistedAudiences",
        skip_serializing_if = "Option::is_none"
    )]
    pub whitelisted_audiences: Option<Vec<String>>,
}

impl IdpConfig {
    /// Template for a single idp configuration.
    pub fn new() -> IdpConfig {
        IdpConfig {
            client_id: None,
            enabled: None,
            experiment_percent: None,
            provider: None,
            secret: None,
            whitelisted_audiences: None,
        }
    }
}
