/*
 * Google Identity Toolkit API
 *
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::google_rest_apis::identitytoolkit_v3::models;
use serde::{Deserialize, Serialize};

/// IdentitytoolkitRelyingpartySendVerificationCodeRequest : Request for Identitytoolkit-SendVerificationCode
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IdentitytoolkitRelyingpartySendVerificationCodeRequest {
    /// Receipt of successful app token validation with APNS.
    #[serde(rename = "iosReceipt", skip_serializing_if = "Option::is_none")]
    pub ios_receipt: Option<String>,
    /// Secret delivered to iOS app via APNS.
    #[serde(rename = "iosSecret", skip_serializing_if = "Option::is_none")]
    pub ios_secret: Option<String>,
    /// The phone number to send the verification code to in E.164 format.
    #[serde(rename = "phoneNumber", skip_serializing_if = "Option::is_none")]
    pub phone_number: Option<String>,
    /// Recaptcha solution.
    #[serde(rename = "recaptchaToken", skip_serializing_if = "Option::is_none")]
    pub recaptcha_token: Option<String>,
}

impl IdentitytoolkitRelyingpartySendVerificationCodeRequest {
    /// Request for Identitytoolkit-SendVerificationCode
    pub fn new() -> IdentitytoolkitRelyingpartySendVerificationCodeRequest {
        IdentitytoolkitRelyingpartySendVerificationCodeRequest {
            ios_receipt: None,
            ios_secret: None,
            phone_number: None,
            recaptcha_token: None,
        }
    }
}
