/*
 * Google Identity Toolkit API
 *
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::google_rest_apis::identitytoolkit_v3::models;
use serde::{Deserialize, Serialize};

/// IdentitytoolkitRelyingpartySetAccountInfoRequest : Request to set the account information.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IdentitytoolkitRelyingpartySetAccountInfoRequest {
    /// The captcha challenge.
    #[serde(rename = "captchaChallenge", skip_serializing_if = "Option::is_none")]
    pub captcha_challenge: Option<String>,
    /// Response to the captcha.
    #[serde(rename = "captchaResponse", skip_serializing_if = "Option::is_none")]
    pub captcha_response: Option<String>,
    /// The timestamp when the account is created.
    #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// The custom attributes to be set in the user's id token.
    #[serde(rename = "customAttributes", skip_serializing_if = "Option::is_none")]
    pub custom_attributes: Option<String>,
    /// GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
    #[serde(
        rename = "delegatedProjectNumber",
        skip_serializing_if = "Option::is_none"
    )]
    pub delegated_project_number: Option<String>,
    /// The attributes users request to delete.
    #[serde(rename = "deleteAttribute", skip_serializing_if = "Option::is_none")]
    pub delete_attribute: Option<Vec<String>>,
    /// The IDPs the user request to delete.
    #[serde(rename = "deleteProvider", skip_serializing_if = "Option::is_none")]
    pub delete_provider: Option<Vec<String>>,
    /// Whether to disable the user.
    #[serde(rename = "disableUser", skip_serializing_if = "Option::is_none")]
    pub disable_user: Option<bool>,
    /// The name of the user.
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    /// The email of the user.
    #[serde(rename = "email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    /// Mark the email as verified or not.
    #[serde(rename = "emailVerified", skip_serializing_if = "Option::is_none")]
    pub email_verified: Option<bool>,
    /// The GITKit token of the authenticated user.
    #[serde(rename = "idToken", skip_serializing_if = "Option::is_none")]
    pub id_token: Option<String>,
    /// Instance id token of the app.
    #[serde(rename = "instanceId", skip_serializing_if = "Option::is_none")]
    pub instance_id: Option<String>,
    /// Last login timestamp.
    #[serde(rename = "lastLoginAt", skip_serializing_if = "Option::is_none")]
    pub last_login_at: Option<String>,
    /// The local ID of the user.
    #[serde(rename = "localId", skip_serializing_if = "Option::is_none")]
    pub local_id: Option<String>,
    /// The out-of-band code of the change email request.
    #[serde(rename = "oobCode", skip_serializing_if = "Option::is_none")]
    pub oob_code: Option<String>,
    /// The new password of the user.
    #[serde(rename = "password", skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    /// Privileged caller can update user with specified phone number.
    #[serde(rename = "phoneNumber", skip_serializing_if = "Option::is_none")]
    pub phone_number: Option<String>,
    /// The photo url of the user.
    #[serde(rename = "photoUrl", skip_serializing_if = "Option::is_none")]
    pub photo_url: Option<String>,
    /// The associated IDPs of the user.
    #[serde(rename = "provider", skip_serializing_if = "Option::is_none")]
    pub provider: Option<Vec<String>>,
    /// Whether return sts id token and refresh token instead of gitkit token.
    #[serde(rename = "returnSecureToken", skip_serializing_if = "Option::is_none")]
    pub return_secure_token: Option<bool>,
    /// Mark the user to upgrade to federated login.
    #[serde(
        rename = "upgradeToFederatedLogin",
        skip_serializing_if = "Option::is_none"
    )]
    pub upgrade_to_federated_login: Option<bool>,
    /// Timestamp in seconds for valid login token.
    #[serde(rename = "validSince", skip_serializing_if = "Option::is_none")]
    pub valid_since: Option<String>,
}

impl IdentitytoolkitRelyingpartySetAccountInfoRequest {
    /// Request to set the account information.
    pub fn new() -> IdentitytoolkitRelyingpartySetAccountInfoRequest {
        IdentitytoolkitRelyingpartySetAccountInfoRequest {
            captcha_challenge: None,
            captcha_response: None,
            created_at: None,
            custom_attributes: None,
            delegated_project_number: None,
            delete_attribute: None,
            delete_provider: None,
            disable_user: None,
            display_name: None,
            email: None,
            email_verified: None,
            id_token: None,
            instance_id: None,
            last_login_at: None,
            local_id: None,
            oob_code: None,
            password: None,
            phone_number: None,
            photo_url: None,
            provider: None,
            return_secure_token: None,
            upgrade_to_federated_login: None,
            valid_since: None,
        }
    }
}
