/*
 * Google Identity Toolkit API
 *
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::google_rest_apis::identitytoolkit_v3::models;
use serde::{Deserialize, Serialize};

/// EmailTemplate : Template for an email template.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EmailTemplate {
    /// Email body.
    #[serde(rename = "body", skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    /// Email body format.
    #[serde(rename = "format", skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    /// From address of the email.
    #[serde(rename = "from", skip_serializing_if = "Option::is_none")]
    pub from: Option<String>,
    /// From display name.
    #[serde(rename = "fromDisplayName", skip_serializing_if = "Option::is_none")]
    pub from_display_name: Option<String>,
    /// Reply-to address.
    #[serde(rename = "replyTo", skip_serializing_if = "Option::is_none")]
    pub reply_to: Option<String>,
    /// Subject of the email.
    #[serde(rename = "subject", skip_serializing_if = "Option::is_none")]
    pub subject: Option<String>,
}

impl EmailTemplate {
    /// Template for an email template.
    pub fn new() -> EmailTemplate {
        EmailTemplate {
            body: None,
            format: None,
            from: None,
            from_display_name: None,
            reply_to: None,
            subject: None,
        }
    }
}
