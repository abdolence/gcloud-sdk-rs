/*
 * Google Identity Toolkit API
 *
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::google_rest_apis::identitytoolkit_v3::models;
use serde::{Deserialize, Serialize};

/// IdentitytoolkitRelyingpartyCreateAuthUriRequest : Request to get the IDP authentication URL.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IdentitytoolkitRelyingpartyCreateAuthUriRequest {
    /// The app ID of the mobile app, base64(CERT_SHA1):PACKAGE_NAME for Android, BUNDLE_ID for iOS.
    #[serde(rename = "appId", skip_serializing_if = "Option::is_none")]
    pub app_id: Option<String>,
    /// Explicitly specify the auth flow type. Currently only support \"CODE_FLOW\" type. The field is only used for Google provider.
    #[serde(rename = "authFlowType", skip_serializing_if = "Option::is_none")]
    pub auth_flow_type: Option<String>,
    /// The relying party OAuth client ID.
    #[serde(rename = "clientId", skip_serializing_if = "Option::is_none")]
    pub client_id: Option<String>,
    /// The opaque value used by the client to maintain context info between the authentication request and the IDP callback.
    #[serde(rename = "context", skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// The URI to which the IDP redirects the user after the federated login flow.
    #[serde(rename = "continueUri", skip_serializing_if = "Option::is_none")]
    pub continue_uri: Option<String>,
    /// The query parameter that client can customize by themselves in auth url. The following parameters are reserved for server so that they cannot be customized by clients: client_id, response_type, scope, redirect_uri, state, oauth_token.
    #[serde(rename = "customParameter", skip_serializing_if = "Option::is_none")]
    pub custom_parameter: Option<std::collections::HashMap<String, String>>,
    /// The hosted domain to restrict sign-in to accounts at that domain for Google Apps hosted accounts.
    #[serde(rename = "hostedDomain", skip_serializing_if = "Option::is_none")]
    pub hosted_domain: Option<String>,
    /// The email or federated ID of the user.
    #[serde(rename = "identifier", skip_serializing_if = "Option::is_none")]
    pub identifier: Option<String>,
    /// The developer's consumer key for OpenId OAuth Extension
    #[serde(rename = "oauthConsumerKey", skip_serializing_if = "Option::is_none")]
    pub oauth_consumer_key: Option<String>,
    /// Additional oauth scopes, beyond the basid user profile, that the user would be prompted to grant
    #[serde(rename = "oauthScope", skip_serializing_if = "Option::is_none")]
    pub oauth_scope: Option<String>,
    /// Optional realm for OpenID protocol. The sub string \"scheme://domain:port\" of the param \"continueUri\" is used if this is not set.
    #[serde(rename = "openidRealm", skip_serializing_if = "Option::is_none")]
    pub openid_realm: Option<String>,
    /// The native app package for OTA installation.
    #[serde(rename = "otaApp", skip_serializing_if = "Option::is_none")]
    pub ota_app: Option<String>,
    /// The IdP ID. For white listed IdPs it's a short domain name e.g. google.com, aol.com, live.net and yahoo.com. For other OpenID IdPs it's the OP identifier.
    #[serde(rename = "providerId", skip_serializing_if = "Option::is_none")]
    pub provider_id: Option<String>,
    /// The session_id passed by client.
    #[serde(rename = "sessionId", skip_serializing_if = "Option::is_none")]
    pub session_id: Option<String>,
    /// For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from.
    #[serde(rename = "tenantId", skip_serializing_if = "Option::is_none")]
    pub tenant_id: Option<String>,
    /// Tenant project number to be used for idp discovery.
    #[serde(
        rename = "tenantProjectNumber",
        skip_serializing_if = "Option::is_none"
    )]
    pub tenant_project_number: Option<String>,
}

impl IdentitytoolkitRelyingpartyCreateAuthUriRequest {
    /// Request to get the IDP authentication URL.
    pub fn new() -> IdentitytoolkitRelyingpartyCreateAuthUriRequest {
        IdentitytoolkitRelyingpartyCreateAuthUriRequest {
            app_id: None,
            auth_flow_type: None,
            client_id: None,
            context: None,
            continue_uri: None,
            custom_parameter: None,
            hosted_domain: None,
            identifier: None,
            oauth_consumer_key: None,
            oauth_scope: None,
            openid_realm: None,
            ota_app: None,
            provider_id: None,
            session_id: None,
            tenant_id: None,
            tenant_project_number: None,
        }
    }
}
