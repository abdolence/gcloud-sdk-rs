use serde::{Deserialize, Serialize}; /*
                                      * Service Control API
                                      *
                                      * Provides admission control and telemetry reporting for services integrated with Service Infrastructure.
                                      *
                                      * The version of the OpenAPI document: v2
                                      *
                                      * Generated by: https://openapi-generator.tech
                                      */

use crate::google_rest_apis::servicecontrol_v2::models;

/// V2LogEntrySourceLocation : Additional information about the source code location that produced the log entry.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V2LogEntrySourceLocation {
    /// Optional. Source file name. Depending on the runtime environment, this might be a simple name or a fully-qualified name.
    #[serde(rename = "file", skip_serializing_if = "Option::is_none")]
    pub file: Option<String>,
    /// Optional. Human-readable name of the function or method being invoked, with optional context such as the class or package name. This information may be used in contexts such as the logs viewer, where a file and line number are less meaningful. The format can vary by language. For example: `qual.if.ied.Class.method` (Java), `dir/package.func` (Go), `function` (Python).
    #[serde(rename = "function", skip_serializing_if = "Option::is_none")]
    pub function: Option<String>,
    /// Optional. Line within the source file. 1-based; 0 indicates no line number available.
    #[serde(rename = "line", skip_serializing_if = "Option::is_none")]
    pub line: Option<String>,
}

impl V2LogEntrySourceLocation {
    /// Additional information about the source code location that produced the log entry.
    pub fn new() -> V2LogEntrySourceLocation {
        V2LogEntrySourceLocation {
            file: None,
            function: None,
            line: None,
        }
    }
}
