use serde::{Deserialize, Serialize}; /*
                                      * Service Control API
                                      *
                                      * Provides admission control and telemetry reporting for services integrated with Service Infrastructure.
                                      *
                                      * The version of the OpenAPI document: v2
                                      *
                                      * Generated by: https://openapi-generator.tech
                                      */

use crate::google_rest_apis::servicecontrol_v2::models;

/// AuthorizationInfo : Authorization information for the operation.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AuthorizationInfo {
    /// Whether or not authorization for `resource` and `permission` was granted.
    #[serde(rename = "granted", skip_serializing_if = "Option::is_none")]
    pub granted: Option<bool>,
    /// The required IAM permission.
    #[serde(rename = "permission", skip_serializing_if = "Option::is_none")]
    pub permission: Option<String>,
    /// The type of the permission that was checked. For data access audit logs this corresponds with the permission type that must be enabled in the project/folder/organization IAM policy in order for the log to be written.
    #[serde(rename = "permissionType", skip_serializing_if = "Option::is_none")]
    pub permission_type: Option<PermissionType>,
    /// The resource being accessed, as a REST-style or cloud resource string. For example: bigquery.googleapis.com/projects/PROJECTID/datasets/DATASETID or projects/PROJECTID/datasets/DATASETID
    #[serde(rename = "resource", skip_serializing_if = "Option::is_none")]
    pub resource: Option<String>,
    #[serde(rename = "resourceAttributes", skip_serializing_if = "Option::is_none")]
    pub resource_attributes: Option<Box<models::Resource>>,
}

impl AuthorizationInfo {
    /// Authorization information for the operation.
    pub fn new() -> AuthorizationInfo {
        AuthorizationInfo {
            granted: None,
            permission: None,
            permission_type: None,
            resource: None,
            resource_attributes: None,
        }
    }
}
/// The type of the permission that was checked. For data access audit logs this corresponds with the permission type that must be enabled in the project/folder/organization IAM policy in order for the log to be written.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PermissionType {
    #[serde(rename = "PERMISSION_TYPE_UNSPECIFIED")]
    PermissionTypeUnspecified,
    #[serde(rename = "ADMIN_READ")]
    AdminRead,
    #[serde(rename = "ADMIN_WRITE")]
    AdminWrite,
    #[serde(rename = "DATA_READ")]
    DataRead,
    #[serde(rename = "DATA_WRITE")]
    DataWrite,
}

impl Default for PermissionType {
    fn default() -> PermissionType {
        Self::PermissionTypeUnspecified
    }
}
