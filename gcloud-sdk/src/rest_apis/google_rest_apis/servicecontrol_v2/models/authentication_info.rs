use serde::{Deserialize, Serialize}; /*
                                      * Service Control API
                                      *
                                      * Provides admission control and telemetry reporting for services integrated with Service Infrastructure.
                                      *
                                      * The version of the OpenAPI document: v2
                                      *
                                      * Generated by: https://openapi-generator.tech
                                      */

use crate::google_rest_apis::servicecontrol_v2::models;

/// AuthenticationInfo : Authentication information for the operation.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AuthenticationInfo {
    /// The authority selector specified by the requestor, if any. It is not guaranteed that the principal was allowed to use this authority.
    #[serde(rename = "authoritySelector", skip_serializing_if = "Option::is_none")]
    pub authority_selector: Option<String>,
    /// The email address of the authenticated user (or service account on behalf of third party principal) making the request. For third party identity callers, the `principal_subject` field is populated instead of this field. For privacy reasons, the principal email address is sometimes redacted. For more information, see [Caller identities in audit logs](https://cloud.google.com/logging/docs/audit#user-id).
    #[serde(rename = "principalEmail", skip_serializing_if = "Option::is_none")]
    pub principal_email: Option<String>,
    /// String representation of identity of requesting party. Populated for both first and third party identities.
    #[serde(rename = "principalSubject", skip_serializing_if = "Option::is_none")]
    pub principal_subject: Option<String>,
    /// Identity delegation history of an authenticated service account that makes the request. It contains information on the real authorities that try to access GCP resources by delegating on a service account. When multiple authorities present, they are guaranteed to be sorted based on the original ordering of the identity delegation events.
    #[serde(
        rename = "serviceAccountDelegationInfo",
        skip_serializing_if = "Option::is_none"
    )]
    pub service_account_delegation_info: Option<Vec<models::ServiceAccountDelegationInfo>>,
    /// The name of the service account key used to create or exchange credentials for authenticating the service account making the request. This is a scheme-less URI full resource name. For example: \"//iam.googleapis.com/projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}/keys/{key}\"
    #[serde(
        rename = "serviceAccountKeyName",
        skip_serializing_if = "Option::is_none"
    )]
    pub service_account_key_name: Option<String>,
    #[serde(
        rename = "serviceDelegationHistory",
        skip_serializing_if = "Option::is_none"
    )]
    pub service_delegation_history: Option<Box<models::ServiceDelegationHistory>>,
    /// The third party identification (if any) of the authenticated user making the request. When the JSON object represented here has a proto equivalent, the proto name will be indicated in the `@type` property.
    #[serde(
        rename = "thirdPartyPrincipal",
        skip_serializing_if = "Option::is_none"
    )]
    pub third_party_principal: Option<std::collections::HashMap<String, serde_json::Value>>,
}

impl AuthenticationInfo {
    /// Authentication information for the operation.
    pub fn new() -> AuthenticationInfo {
        AuthenticationInfo {
            authority_selector: None,
            principal_email: None,
            principal_subject: None,
            service_account_delegation_info: None,
            service_account_key_name: None,
            service_delegation_history: None,
            third_party_principal: None,
        }
    }
}
