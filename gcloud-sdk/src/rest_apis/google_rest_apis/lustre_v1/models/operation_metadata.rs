use serde::{Deserialize, Serialize}; /*
                                      * Google Cloud Managed Lustre API
                                      *
                                      * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
                                      *
                                      * The version of the OpenAPI document: v1
                                      *
                                      * Generated by: https://openapi-generator.tech
                                      */

use crate::google_rest_apis::lustre_v1::models;

/// OperationMetadata : Represents the metadata of a long-running operation.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperationMetadata {
    /// Output only. API version used to start the operation.
    #[serde(rename = "apiVersion", skip_serializing_if = "Option::is_none")]
    pub api_version: Option<String>,
    /// Output only. The time the operation was created.
    #[serde(rename = "createTime", skip_serializing_if = "Option::is_none")]
    pub create_time: Option<String>,
    /// Output only. The time the operation finished running.
    #[serde(rename = "endTime", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<String>,
    /// Output only. Identifies whether the user has requested cancellation of the operation. Operations that have been cancelled successfully have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
    #[serde(
        rename = "requestedCancellation",
        skip_serializing_if = "Option::is_none"
    )]
    pub requested_cancellation: Option<bool>,
    /// Output only. Human-readable status of the operation, if any.
    #[serde(rename = "statusMessage", skip_serializing_if = "Option::is_none")]
    pub status_message: Option<String>,
    /// Output only. Server-defined resource path for the target of the operation.
    #[serde(rename = "target", skip_serializing_if = "Option::is_none")]
    pub target: Option<String>,
    /// Output only. Name of the verb executed by the operation.
    #[serde(rename = "verb", skip_serializing_if = "Option::is_none")]
    pub verb: Option<String>,
}

impl OperationMetadata {
    /// Represents the metadata of a long-running operation.
    pub fn new() -> OperationMetadata {
        OperationMetadata {
            api_version: None,
            create_time: None,
            end_time: None,
            requested_cancellation: None,
            status_message: None,
            target: None,
            verb: None,
        }
    }
}
